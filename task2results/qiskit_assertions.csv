filepath,testclass,testname,assertion type,line number,assert string
task2results/qiskit-aqua-main/test/chemistry/test_app_mgse.py,test_mgse_npme,test_mgse_npme,approximate,60,"self.assertAlmostEqual(result.energy, self.reference_energy, places=5)"
task2results/qiskit-aqua-main/test/chemistry/test_app_mgse.py,test_mgse_npme,test_mgse_npme,approximate,65,"self.assertEqual(len(formatted), 19)"
task2results/qiskit-aqua-main/test/chemistry/test_app_mgse.py,test_mgse_npme,test_mgse_npme,approximate,66,"self.assertEqual(formatted[0], '=== GROUND STATE ENERGY ===')"
task2results/qiskit-aqua-main/test/chemistry/test_app_mgse.py,test_mgse_npme,test_mgse_npme,approximate,67,"self.assertEqual(formatted[4], '  - frozen energy part: 0.0')"
task2results/qiskit-aqua-main/test/chemistry/test_app_mgse.py,test_mgse_npme,test_mgse_npme,approximate,68,"self.assertEqual(formatted[5], '  - particle hole part: 0.0')"
task2results/qiskit-aqua-main/test/chemistry/test_app_mgse.py,test_mgse_npme,test_mgse_npme,approximate,69,"self.assertEqual(formatted[7][0:44], '> Total ground state energy (Hartree): -1.13')"
task2results/qiskit-aqua-main/test/chemistry/test_app_mgse.py,test_mgse_npme,test_mgse_npme,approximate,70,"self.assertEqual(formatted[8], '  Measured:: # Particles: 2.000 S: 0.000 S^2: 0.000 M: 0.00000')"
task2results/qiskit-aqua-main/test/chemistry/test_app_mgse.py,test_mgse_npme,test_mgse_npme,approximate,72,"self.assertEqual(formatted[10], '=== DIPOLE MOMENT ===')"
task2results/qiskit-aqua-main/test/chemistry/test_app_mgse.py,test_mgse_npme,test_mgse_npme,approximate,73,"self.assertEqual(formatted[14], '  - frozen energy part: [0.0  0.0  0.0]')"
task2results/qiskit-aqua-main/test/chemistry/test_app_mgse.py,test_mgse_npme,test_mgse_npme,approximate,74,"self.assertEqual(formatted[15], '  - particle hole part: [0.0  0.0  0.0]')"
task2results/qiskit-aqua-main/test/chemistry/test_app_mgse.py,test_mgse_npme,test_mgse_npme,approximate,75,"self.assertEqual(formatted[18], '               (debye): [0.0  0.0  0.0]  Total: 0.')"
task2results/qiskit-aqua-main/test/chemistry/test_app_mgse.py,test_mgse_vqe,test_mgse_vqe,approximate,83,"self.assertAlmostEqual(result.energy, self.reference_energy, places=5)"
task2results/qiskit-aqua-main/test/chemistry/test_app_mgse.py,test_mgse_solver,test_mgse_solver,approximate,95,"self.assertAlmostEqual(result.energy, self.reference_energy, places=5)"
task2results/qiskit-aqua-main/test/chemistry/test_app_mgse.py,test_mgse_solver,test_mgse_solver,approximate,99,"self.assertAlmostEqual(result.energy, self.reference_energy, places=5)"
task2results/qiskit-aqua-main/test/chemistry/test_app_mgse.py,test_mgse_callback_vqe_uccsd,test_mgse_callback_vqe_uccsd,approximate,142,"self.assertAlmostEqual(result.energy, self.reference_energy, places=5)"
task2results/qiskit-aqua-main/test/chemistry/test_app_mgse.py,test_mgse_callback,test_mgse_callback,approximate,151,"self.assertAlmostEqual(result.energy, self.reference_energy, places=5)"
task2results/qiskit-aqua-main/test/chemistry/test_app_mgse.py,test_mgse_callback,test_mgse_callback,approximate,154,"self.assertAlmostEqual(result.energy, self.reference_energy, places=5)"
task2results/qiskit-aqua-main/test/chemistry/test_app_mgse.py,test_mgse_default_solver,test_mgse_default_solver,approximate,164,"self.assertAlmostEqual(result.energy, self.reference_energy, places=5)"
task2results/qiskit-aqua-main/test/chemistry/test_app_mgse.py,test_mgse_default_solver,test_mgse_default_solver,approximate,168,"self.assertAlmostEqual(result.energy, self.reference_energy, places=5)"
task2results/qiskit-aqua-main/test/chemistry/test_app_mgse.py,test_mgse_callback_vqe_uccsd_z2,test_mgse_callback_vqe_uccsd_z2,approximate,194,"self.assertAlmostEqual(result.energy, (- 7.882), places=3)"
task2results/qiskit-aqua-main/test/chemistry/test_app_mgse.py,test_mgse_callback_vqe_uccsd_z2_nosymm,test_mgse_callback_vqe_uccsd_z2_nosymm,approximate,222,"self.assertEqual(z2_symm.is_empty(), True)"
task2results/qiskit-aqua-main/test/chemistry/test_app_mgse.py,test_mgse_callback_vqe_uccsd_z2_nosymm,test_mgse_callback_vqe_uccsd_z2_nosymm,approximate,223,"self.assertAlmostEqual(result.energy, (- 7.881), places=3)"
task2results/qiskit-aqua-main/test/chemistry/test_app_mgse.py,test_mgse_callback_vqe_uccsd_z2_nosymm,test_mgse_callback_vqe_uccsd_z2_nosymm,approximate,224,"self.assertAlmostEqual(result.num_particles, 2)"
task2results/qiskit-aqua-main/test/chemistry/test_app_mgse.py,test_mgse_callback_vqe_uccsd_z2_nosymm,test_mgse_callback_vqe_uccsd_z2_nosymm,approximate,225,"self.assertAlmostEqual(result.total_dipole_moment_in_debye, 4.667, places=3)"
task2results/qiskit-aqua-main/test/chemistry/test_app_mgse.py,test_mgse_callback_vqe_uccsd_z2_nosymm,test_mgse_callback_vqe_uccsd_z2_nosymm,approximate,234,"self.assertEqual(z2_symm.is_empty(), True)"
task2results/qiskit-aqua-main/test/chemistry/test_app_mgse.py,test_mgse_callback_vqe_uccsd_z2_nosymm,test_mgse_callback_vqe_uccsd_z2_nosymm,approximate,235,"self.assertEqual(str(result), str(result1))"
task2results/qiskit-aqua-main/test/chemistry/test_driver_gaussian_log.py,test_gaussian_log_result_list,test_gaussian_log_result_list,approximate,77,"self.assertListEqual(result.log, lines)"
task2results/qiskit-aqua-main/test/chemistry/test_driver_gaussian_log.py,test_gaussian_log_result_string,test_gaussian_log_result_string,approximate,84,"self.assertListEqual(result.log, line.split('\n'))"
task2results/qiskit-aqua-main/test/chemistry/test_driver_gaussian_log.py,test_quadratic_force_constants,test_quadratic_force_constants,approximate,94,"self.assertListEqual(qfc, expected)"
task2results/qiskit-aqua-main/test/chemistry/test_driver_gaussian_log.py,test_cubic_force_constants,test_cubic_force_constants,approximate,105,"self.assertListEqual(cfc, expected)"
task2results/qiskit-aqua-main/test/chemistry/test_driver_gaussian_log.py,test_quartic_force_constants,test_quartic_force_constants,approximate,123,"self.assertListEqual(qfc, expected)"
task2results/qiskit-aqua-main/test/chemistry/test_bksf_mapping.py,test_bksf_edge_op_bi,test_bksf_edge_op_bi,approximate,40,"self.assertEqual(qterm_b0, ref_qterm_b0, '\n{} vs \n{}'.format(qterm_b0.print_details(), ref_qterm_b0.print_details()))"
task2results/qiskit-aqua-main/test/chemistry/test_bksf_mapping.py,test_bksf_edge_op_bi,test_bksf_edge_op_bi,approximate,42,"self.assertEqual(qterm_b1, ref_qterm_b1, '\n{} vs \n{}'.format(qterm_b1.print_details(), ref_qterm_b1.print_details()))"
task2results/qiskit-aqua-main/test/chemistry/test_bksf_mapping.py,test_bksf_edge_op_bi,test_bksf_edge_op_bi,approximate,44,"self.assertEqual(qterm_b2, ref_qterm_b2, '\n{} vs \n{}'.format(qterm_b2.print_details(), ref_qterm_b2.print_details()))"
task2results/qiskit-aqua-main/test/chemistry/test_bksf_mapping.py,test_bksf_edge_op_bi,test_bksf_edge_op_bi,approximate,46,"self.assertEqual(qterm_b3, ref_qterm_b3, '\n{} vs \n{}'.format(qterm_b3.print_details(), ref_qterm_b3.print_details()))"
task2results/qiskit-aqua-main/test/chemistry/test_bksf_mapping.py,test_bksf_edge_op_aij,test_bksf_edge_op_aij,approximate,67,"self.assertEqual(qterm_a01, ref_qterm_a01, '\n{} vs \n{}'.format(qterm_a01.print_details(), ref_qterm_a01.print_details()))"
task2results/qiskit-aqua-main/test/chemistry/test_bksf_mapping.py,test_bksf_edge_op_aij,test_bksf_edge_op_aij,approximate,69,"self.assertEqual(qterm_a02, ref_qterm_a02, '\n{} vs \n{}'.format(qterm_a02.print_details(), ref_qterm_a02.print_details()))"
task2results/qiskit-aqua-main/test/chemistry/test_bksf_mapping.py,test_bksf_edge_op_aij,test_bksf_edge_op_aij,approximate,71,"self.assertEqual(qterm_a03, ref_qterm_a03, '\n{} vs \n{}'.format(qterm_a03.print_details(), ref_qterm_a03.print_details()))"
task2results/qiskit-aqua-main/test/chemistry/test_bksf_mapping.py,test_bksf_edge_op_aij,test_bksf_edge_op_aij,approximate,73,"self.assertEqual(qterm_a12, ref_qterm_a12, '\n{} vs \n{}'.format(qterm_a12.print_details(), ref_qterm_a12.print_details()))"
task2results/qiskit-aqua-main/test/chemistry/test_bksf_mapping.py,test_bksf_edge_op_aij,test_bksf_edge_op_aij,approximate,75,"self.assertEqual(qterm_a13, ref_qterm_a13, '\n{} vs \n{}'.format(qterm_a13.print_details(), ref_qterm_a13.print_details()))"
task2results/qiskit-aqua-main/test/chemistry/test_bksf_mapping.py,test_bksf_edge_op_aij,test_bksf_edge_op_aij,approximate,77,"self.assertEqual(qterm_a23, ref_qterm_a23, '\n{} vs \n{}'.format(qterm_a23.print_details(), ref_qterm_a23.print_details()))"
task2results/qiskit-aqua-main/test/chemistry/test_core_hamiltonian_symmetries.py,_validate_result,_validate_result,approximate,46,"self.assertAlmostEqual(result.energy, (- 7.882324378883), places=3)"
task2results/qiskit-aqua-main/test/chemistry/test_core_hamiltonian_symmetries.py,test_no_symmetry,test_no_symmetry,approximate,66,"self.assertEqual(qubit_op.num_qubits, 12)"
task2results/qiskit-aqua-main/test/chemistry/test_core_hamiltonian_symmetries.py,test_auto_symmetry,test_auto_symmetry,approximate,84,"self.assertEqual(qubit_op.num_qubits, 8)"
task2results/qiskit-aqua-main/test/chemistry/test_core_hamiltonian_symmetries.py,test_auto_symmetry,test_auto_symmetry,approximate,90,"self.assertEqual(core.molecule_info[core.INFO_Z2SYMMETRIES].tapering_values, [1, 1, 1, 1])"
task2results/qiskit-aqua-main/test/chemistry/test_core_hamiltonian_symmetries.py,test_given_symmetry,test_given_symmetry,approximate,103,"self.assertEqual(qubit_op.num_qubits, 8)"
task2results/qiskit-aqua-main/test/chemistry/test_core_hamiltonian_symmetries.py,test_given_symmetry,test_given_symmetry,approximate,109,"self.assertEqual(core.molecule_info[core.INFO_Z2SYMMETRIES].tapering_values, [1, 1, 1, 1])"
task2results/qiskit-aqua-main/test/chemistry/test_core_hamiltonian_symmetries.py,test_auto_symmetry_freeze_core,test_auto_symmetry_freeze_core,approximate,148,"self.assertEqual(qubit_op.num_qubits, 6)"
task2results/qiskit-aqua-main/test/chemistry/test_core_hamiltonian_symmetries.py,test_auto_symmetry_freeze_core,test_auto_symmetry_freeze_core,approximate,154,"self.assertEqual(core.molecule_info[core.INFO_Z2SYMMETRIES].tapering_values, [(- 1), 1, 1, (- 1)])"
task2results/qiskit-aqua-main/test/chemistry/test_core_hamiltonian_symmetries.py,test_auto_freeze_core_parity,test_auto_freeze_core_parity,approximate,167,"self.assertEqual(qubit_op.num_qubits, 6)"
task2results/qiskit-aqua-main/test/chemistry/test_core_hamiltonian_symmetries.py,test_auto_freeze_core_parity,test_auto_freeze_core_parity,approximate,173,"self.assertEqual(core.molecule_info[core.INFO_Z2SYMMETRIES].tapering_values, [(- 1), 1, 1, 1])"
task2results/qiskit-aqua-main/test/chemistry/test_core_hamiltonian_symmetries.py,test_auto_freeze_core_parity_2,test_auto_freeze_core_parity_2,approximate,186,"self.assertEqual(qubit_op.num_qubits, 6)"
task2results/qiskit-aqua-main/test/chemistry/test_core_hamiltonian_symmetries.py,test_auto_freeze_core_parity_2,test_auto_freeze_core_parity_2,approximate,192,"self.assertEqual(core.molecule_info[core.INFO_Z2SYMMETRIES].tapering_values, [1, 1])"
task2results/qiskit-aqua-main/test/chemistry/test_core_hamiltonian_symmetries.py,test_auto_ph_freeze_core_parity_2,test_auto_ph_freeze_core_parity_2,approximate,205,"self.assertEqual(qubit_op.num_qubits, 6)"
task2results/qiskit-aqua-main/test/chemistry/test_core_hamiltonian_symmetries.py,test_auto_ph_freeze_core_parity_2,test_auto_ph_freeze_core_parity_2,approximate,211,"self.assertEqual(core.molecule_info[core.INFO_Z2SYMMETRIES].tapering_values, [1, 1])"
task2results/qiskit-aqua-main/test/chemistry/test_core_hamiltonian_symmetries.py,test_vqe_auto_symmetry_freeze_core,test_vqe_auto_symmetry_freeze_core,approximate,224,"self.assertEqual(qubit_op.num_qubits, 6)"
task2results/qiskit-aqua-main/test/chemistry/test_core_hamiltonian_symmetries.py,test_vqe_auto_symmetry_freeze_core,test_vqe_auto_symmetry_freeze_core,approximate,244,"self.assertEqual(core.molecule_info[core.INFO_Z2SYMMETRIES].tapering_values, [(- 1), 1, 1, (- 1)])"
task2results/qiskit-aqua-main/test/chemistry/test_vqe_uccsd_adapt.py,test_uccsd_adapt,test_uccsd_adapt,approximate,65,self.assertIsNotNone(self.var_form_base.excitation_pool)
task2results/qiskit-aqua-main/test/chemistry/test_vqe_uccsd_adapt.py,test_uccsd_adapt,test_uccsd_adapt,approximate,67,"self.assertEqual(self.var_form_base._hopping_ops, [])"
task2results/qiskit-aqua-main/test/chemistry/test_vqe_uccsd_adapt.py,test_vqe_adapt,test_vqe_adapt,approximate,88,"self.assertEqual(result.num_iterations, 1)"
task2results/qiskit-aqua-main/test/chemistry/test_vqe_uccsd_adapt.py,test_vqe_adapt,test_vqe_adapt,approximate,89,"self.assertEqual(result.finishing_criterion, 'Maximum number of iterations reached')"
task2results/qiskit-aqua-main/test/chemistry/test_vqe_uccsd_adapt.py,test_vqe_adapt,test_vqe_adapt,approximate,96,"self.assertAlmostEqual(result.eigenvalue.real, (- 1.85727503), places=2)"
task2results/qiskit-aqua-main/test/chemistry/test_vqe_uccsd_adapt.py,test_vqe_adapt,test_vqe_adapt,approximate,97,"self.assertEqual(result.num_iterations, 2)"
task2results/qiskit-aqua-main/test/chemistry/test_vqe_uccsd_adapt.py,test_vqe_adapt,test_vqe_adapt,approximate,98,"self.assertAlmostEqual(result.final_max_gradient, 0.0, places=5)"
task2results/qiskit-aqua-main/test/chemistry/test_vqe_uccsd_adapt.py,test_vqe_adapt,test_vqe_adapt,approximate,99,"self.assertEqual(result.finishing_criterion, 'Threshold converged')"
task2results/qiskit-aqua-main/test/chemistry/test_particle_hole.py,test_particle_hole,test_particle_hole,approximate,70,"self.assertAlmostEqual((- ph_shift), (molecule.hf_energy - molecule.nuclear_repulsion_energy), msg=config)"
task2results/qiskit-aqua-main/test/chemistry/test_particle_hole.py,test_particle_hole,test_particle_hole,approximate,80,"self.assertAlmostEqual(result.eigenvalue.real, (ph_result.eigenvalue.real - ph_shift), msg=config)"
task2results/qiskit-aqua-main/test/chemistry/test_groundstate_eigensolver.py,test_npme,test_npme,approximate,57,"self.assertAlmostEqual(res.total_energies[0], self.reference_energy, places=6)"
task2results/qiskit-aqua-main/test/chemistry/test_groundstate_eigensolver.py,test_npme_with_default_filter,test_npme_with_default_filter,approximate,64,"self.assertAlmostEqual(res.total_energies[0], self.reference_energy, places=6)"
task2results/qiskit-aqua-main/test/chemistry/test_groundstate_eigensolver.py,test_vqe_uccsd,test_vqe_uccsd,approximate,71,"self.assertAlmostEqual(res.total_energies[0], self.reference_energy, places=6)"
task2results/qiskit-aqua-main/test/chemistry/test_groundstate_eigensolver.py,test_eval_op_single,test_eval_op_single,approximate,107,"self.assertIsInstance(add_aux_op_res[0], complex)"
task2results/qiskit-aqua-main/test/chemistry/test_groundstate_eigensolver.py,test_eval_op_single,test_eval_op_single,approximate,108,"self.assertAlmostEqual(add_aux_op_res[0].real, 2, places=6)"
task2results/qiskit-aqua-main/test/chemistry/test_groundstate_eigensolver.py,test_eval_op_single_none,test_eval_op_single_none,approximate,118,self.assertIsNone(add_aux_op_res)
task2results/qiskit-aqua-main/test/chemistry/test_groundstate_eigensolver.py,test_eval_op_list,test_eval_op_list,approximate,131,"self.assertIsInstance(add_aux_op_res, list)"
task2results/qiskit-aqua-main/test/chemistry/test_groundstate_eigensolver.py,test_eval_op_list_none,test_eval_op_list_none,approximate,147,"self.assertIsInstance(add_aux_op_res, list)"
task2results/qiskit-aqua-main/test/chemistry/test_groundstate_eigensolver.py,test_eval_op_list_none,test_eval_op_list_none,approximate,151,self.assertIsNone(add_aux_op_res[(- 1)])
task2results/qiskit-aqua-main/test/chemistry/test_groundstate_eigensolver.py,test_eval_op_dict,test_eval_op_dict,approximate,166,"self.assertIsInstance(add_aux_op_res, dict)"
task2results/qiskit-aqua-main/test/chemistry/test_groundstate_eigensolver.py,test_eval_op_dict_none,test_eval_op_dict_none,approximate,184,"self.assertIsInstance(add_aux_op_res, dict)"
task2results/qiskit-aqua-main/test/chemistry/test_groundstate_eigensolver.py,test_eval_op_dict_none,test_eval_op_dict_none,approximate,187,self.assertIsNone(add_aux_op_res['None'])
task2results/qiskit-aqua-main/test/chemistry/test_initial_state_hartree_fock.py,test_qubits_2_py_h2_cct,test_qubits_2_py_h2_cct,approximate,72,"self.assertEqual(cct.qasm(), 'OPENQASM 2.0;\ninclude ""qelib1.inc"";\nqreg q[2];\nx q[0];\n')"
task2results/qiskit-aqua-main/test/chemistry/test_initial_state_hartree_fock.py,test_qubits_6_py_lih_cct,test_qubits_6_py_lih_cct,approximate,79,"self.assertEqual(cct.qasm(), 'OPENQASM 2.0;\ninclude ""qelib1.inc"";\nqreg q[6];\nx q[0];\nx q[1];\n')"
task2results/qiskit-aqua-main/test/chemistry/test_initial_state_hartree_fock.py,test_hf_value,test_hf_value,approximate,125,"self.assertAlmostEqual(fermionic_transformation._hf_energy, hf_energy, places=6)"
task2results/qiskit-aqua-main/test/chemistry/test_symmetries.py,test_symmetries,test_symmetries,approximate,62,"self.assertSequenceEqual(labels, ['ZIZIZIZI', 'ZZIIZZII'])"
task2results/qiskit-aqua-main/test/chemistry/test_symmetries.py,test_sq_paulis,test_sq_paulis,approximate,67,"self.assertSequenceEqual(labels, ['IIIIIIXI', 'IIIIIXII'])"
task2results/qiskit-aqua-main/test/chemistry/test_symmetries.py,test_cliffords,test_cliffords,approximate,71,"self.assertEqual(2, len(self.z2_symmetries.cliffords))"
task2results/qiskit-aqua-main/test/chemistry/test_symmetries.py,test_sq_list,test_sq_list,approximate,75,"self.assertSequenceEqual(self.z2_symmetries.sq_list, [1, 2])"
task2results/qiskit-aqua-main/test/chemistry/test_symmetries.py,test_tapered_op,test_tapered_op,approximate,106,"self.assertAlmostEqual(result.total_energies[0], self.reference_energy, places=6)"
task2results/qiskit-aqua-main/test/chemistry/test_adapt_vqe.py,test_default,test_default,approximate,56,"self.assertAlmostEqual(res.electronic_energies[0], self.expected, places=6)"
task2results/qiskit-aqua-main/test/chemistry/test_adapt_vqe.py,test_custom_minimum_eigensolver,test_custom_minimum_eigensolver,approximate,102,"self.assertAlmostEqual(res.electronic_energies[0], self.expected, places=6)"
task2results/qiskit-aqua-main/test/chemistry/test_adapt_vqe.py,test_custom_excitation_pool,test_custom_excitation_pool,approximate,123,"self.assertAlmostEqual(res.electronic_energies[0], self.expected, places=6)"
task2results/qiskit-aqua-main/test/chemistry/test_core_hamiltonian.py,_validate_vars,_validate_vars,approximate,41,"self.assertAlmostEqual(core._hf_energy, (- 1.117), places=3)"
task2results/qiskit-aqua-main/test/chemistry/test_core_hamiltonian.py,_validate_vars,_validate_vars,approximate,42,"self.assertAlmostEqual(core._energy_shift, energy_shift)"
task2results/qiskit-aqua-main/test/chemistry/test_core_hamiltonian.py,_validate_vars,_validate_vars,approximate,43,"self.assertAlmostEqual(core._ph_energy_shift, ph_energy_shift)"
task2results/qiskit-aqua-main/test/chemistry/test_core_hamiltonian.py,_validate_info,_validate_info,approximate,49,"self.assertEqual(z2symmetries.is_empty(), True)"
task2results/qiskit-aqua-main/test/chemistry/test_core_hamiltonian.py,_validate_info,_validate_info,approximate,50,"self.assertEqual(core.molecule_info, {'num_particles': num_particles, 'num_orbitals': num_orbitals, 'two_qubit_reduction': actual_two_qubit_reduction})"
task2results/qiskit-aqua-main/test/chemistry/test_core_hamiltonian.py,_validate_input_object,_validate_input_object,approximate,55,"self.assertTrue(isinstance(qubit_op, WeightedPauliOperator))"
task2results/qiskit-aqua-main/test/chemistry/test_core_hamiltonian.py,_validate_input_object,_validate_input_object,approximate,56,self.assertIsNotNone(qubit_op)
task2results/qiskit-aqua-main/test/chemistry/test_core_hamiltonian.py,_validate_input_object,_validate_input_object,approximate,57,"self.assertEqual(qubit_op.num_qubits, num_qubits)"
task2results/qiskit-aqua-main/test/chemistry/test_core_hamiltonian.py,_validate_input_object,_validate_input_object,approximate,58,"self.assertEqual(len(qubit_op.to_dict()['paulis']), num_paulis)"
task2results/qiskit-aqua-main/test/chemistry/test_bosonic_transformation.py,_validate_input_object,_validate_input_object,approximate,42,"self.assertTrue(isinstance(qubit_op, WeightedPauliOperator))"
task2results/qiskit-aqua-main/test/chemistry/test_bosonic_transformation.py,_validate_input_object,_validate_input_object,approximate,43,self.assertIsNotNone(qubit_op)
task2results/qiskit-aqua-main/test/chemistry/test_bosonic_transformation.py,_validate_input_object,_validate_input_object,approximate,44,"self.assertEqual(qubit_op.num_qubits, num_qubits)"
task2results/qiskit-aqua-main/test/chemistry/test_bosonic_transformation.py,_validate_input_object,_validate_input_object,approximate,45,"self.assertEqual(len(qubit_op.to_dict()['paulis']), num_paulis)"
task2results/qiskit-aqua-main/test/chemistry/test_bosonic_transformation.py,test_output,test_output,approximate,56,"self.assertEqual(bosonic_transformation.num_modes, 4)"
task2results/qiskit-aqua-main/test/chemistry/test_bosonic_transformation.py,test_output,test_output,approximate,58,"self.assertEqual(len(aux_ops), 4)"
task2results/qiskit-aqua-main/test/chemistry/test_bosonic_transformation.py,test_with_numpy_minimum_eigensolver,test_with_numpy_minimum_eigensolver,approximate,71,"self.assertAlmostEqual(result.computed_vibronic_energies[0], self.reference_energy, places=4)"
task2results/qiskit-aqua-main/test/chemistry/test_bosonic_transformation.py,test_vqe_uvccsd_factory,test_vqe_uvccsd_factory,approximate,87,"self.assertAlmostEqual(result.computed_vibronic_energies[0], self.reference_energy, places=1)"
task2results/qiskit-aqua-main/test/chemistry/test_driver_pyscf_extra.py,test_h3,test_h3,approximate,40,"self.assertAlmostEqual(molecule.hf_energy, (- 1.523996200246108), places=5)"
task2results/qiskit-aqua-main/test/chemistry/test_driver_pyscf_extra.py,test_h4,test_h4,approximate,47,"self.assertAlmostEqual(molecule.hf_energy, (- 2.09854593699776), places=5)"
task2results/qiskit-aqua-main/test/chemistry/test_driver_pyscf_extra.py,test_list_atom,test_list_atom,approximate,60,"self.assertAlmostEqual(molecule.hf_energy, (- 1.0661086493179366), places=5)"
task2results/qiskit-aqua-main/test/chemistry/test_driver_pyscf_extra.py,test_zmatrix,test_zmatrix,approximate,67,"self.assertAlmostEqual(molecule.hf_energy, (- 1.0661086493179366), places=5)"
task2results/qiskit-aqua-main/test/chemistry/test_driver_psi4_extra.py,test_input_format_list,test_input_format_list,approximate,48,"self.assertAlmostEqual(qmolecule.hf_energy, (- 1.117), places=3)"
task2results/qiskit-aqua-main/test/chemistry/test_driver_psi4_extra.py,test_input_format_string,test_input_format_string,approximate,68,"self.assertAlmostEqual(qmolecule.hf_energy, (- 1.117), places=3)"
task2results/qiskit-aqua-main/test/chemistry/test_driver_psi4_extra.py,test_psi4_failure,test_psi4_failure,approximate,94,"self.assertTrue(str(ctxmgr.exception).startswith(""'psi4 process return code""))"
task2results/qiskit-aqua-main/test/chemistry/test_driver.py,test_driver_hf_energy,test_driver_hf_energy,approximate,50,"self.assertAlmostEqual(self.qmolecule.hf_energy, (- 1.117), places=3)"
task2results/qiskit-aqua-main/test/chemistry/test_driver.py,test_driver_nuclear_repulsion_energy,test_driver_nuclear_repulsion_energy,approximate,56,"self.assertAlmostEqual(self.qmolecule.nuclear_repulsion_energy, 0.72, places=2)"
task2results/qiskit-aqua-main/test/chemistry/test_driver.py,test_driver_num_orbitals,test_driver_num_orbitals,approximate,61,"self.assertEqual(self.qmolecule.num_orbitals, 2)"
task2results/qiskit-aqua-main/test/chemistry/test_driver.py,test_driver_num_alpha,test_driver_num_alpha,approximate,66,"self.assertEqual(self.qmolecule.num_alpha, 1)"
task2results/qiskit-aqua-main/test/chemistry/test_driver.py,test_driver_num_beta,test_driver_num_beta,approximate,71,"self.assertEqual(self.qmolecule.num_beta, 1)"
task2results/qiskit-aqua-main/test/chemistry/test_driver.py,test_driver_molecular_charge,test_driver_molecular_charge,approximate,76,"self.assertEqual(self.qmolecule.molecular_charge, 0)"
task2results/qiskit-aqua-main/test/chemistry/test_driver.py,test_driver_multiplicity,test_driver_multiplicity,approximate,81,"self.assertEqual(self.qmolecule.multiplicity, 1)"
task2results/qiskit-aqua-main/test/chemistry/test_driver.py,test_driver_num_atoms,test_driver_num_atoms,approximate,86,"self.assertEqual(self.qmolecule.num_atoms, 2)"
task2results/qiskit-aqua-main/test/chemistry/test_driver.py,test_driver_atom_symbol,test_driver_atom_symbol,approximate,91,"self.assertSequenceEqual(self.qmolecule.atom_symbol, ['H', 'H'])"
task2results/qiskit-aqua-main/test/chemistry/test_driver.py,test_driver_mo_coeff,test_driver_mo_coeff,approximate,102,"self.assertEqual(self.qmolecule.mo_coeff.shape, (2, 2))"
task2results/qiskit-aqua-main/test/chemistry/test_driver.py,test_driver_mo_onee_ints,test_driver_mo_onee_ints,approximate,115,"self.assertEqual(self.qmolecule.mo_onee_ints.shape, (2, 2))"
task2results/qiskit-aqua-main/test/chemistry/test_driver.py,test_driver_mo_eri_ints,test_driver_mo_eri_ints,approximate,122,"self.assertEqual(self.qmolecule.mo_eri_ints.shape, (2, 2, 2, 2))"
task2results/qiskit-aqua-main/test/chemistry/test_mp2info.py,test_mp2_delta,test_mp2_delta,approximate,40,"self.assertAlmostEqual((- 0.012903900586859602), self.mp2info.mp2_delta, places=6)"
task2results/qiskit-aqua-main/test/chemistry/test_mp2info.py,test_mp2_energy,test_mp2_energy,approximate,44,"self.assertAlmostEqual((- 7.874768670395503), self.mp2info.mp2_energy, places=6)"
task2results/qiskit-aqua-main/test/chemistry/test_mp2info.py,test_mp2_terms,test_mp2_terms,approximate,49,"self.assertEqual(76, len(terms.keys()))"
task2results/qiskit-aqua-main/test/chemistry/test_mp2info.py,test_mp2_terms_frozen_core,test_mp2_terms_frozen_core,approximate,54,"self.assertEqual(16, len(terms.keys()))"
task2results/qiskit-aqua-main/test/chemistry/test_mp2info.py,test_mp2_terms_frozen_core_orbital_reduction,test_mp2_terms_frozen_core_orbital_reduction,approximate,59,"self.assertEqual(4, len(terms.keys()))"
task2results/qiskit-aqua-main/test/chemistry/test_mp2info.py,test_mp2_h2,test_mp2_h2,approximate,78,"self.assertEqual(1, len(terms.keys()))"
task2results/qiskit-aqua-main/test/chemistry/test_end2end_with_vqe.py,test_end2end_h2,test_end2end_h2,approximate,69,"self.assertAlmostEqual(result.eigenvalue.real, self.reference_energy, places=4)"
task2results/qiskit-aqua-main/test/chemistry/test_uvcc_vscf.py,test_uvcc_vscf,test_uvcc_vscf,approximate,81,"self.assertAlmostEqual(energy, self.reference_energy, places=4)"
task2results/qiskit-aqua-main/test/chemistry/test_driver_gaussian_extra.py,test_cfg_augment,test_cfg_augment,approximate,52,"self.assertEqual(aug_cfg, expected)"
task2results/qiskit-aqua-main/test/chemistry/test_extrapolators.py,test_factory,test_factory,approximate,97,"self.assertIsInstance(Extrapolator.factory(mode='window'), WindowExtrapolator)"
task2results/qiskit-aqua-main/test/chemistry/test_extrapolators.py,test_factory,test_factory,approximate,98,"self.assertIsInstance(Extrapolator.factory(mode='poly'), PolynomialExtrapolator)"
task2results/qiskit-aqua-main/test/chemistry/test_extrapolators.py,test_factory,test_factory,approximate,99,"self.assertIsInstance(Extrapolator.factory(mode='diff_model'), DifferentialExtrapolator)"
task2results/qiskit-aqua-main/test/chemistry/test_extrapolators.py,test_factory,test_factory,approximate,100,"self.assertIsInstance(Extrapolator.factory(mode='pca'), PCAExtrapolator)"
task2results/qiskit-aqua-main/test/chemistry/test_extrapolators.py,test_factory,test_factory,approximate,101,"self.assertIsInstance(Extrapolator.factory(mode='l1'), SieveExtrapolator)"
task2results/qiskit-aqua-main/test/chemistry/test_extrapolators.py,test_factory,test_factory,approximate,102,"self.assertRaises(AquaError, Extrapolator.factory, mode='unknown')"
task2results/qiskit-aqua-main/test/chemistry/test_extrapolators.py,test_polynomial_extrapolator,test_polynomial_extrapolator,approximate,119,"self.assertLess(sum(sq_diff), 0.001)"
task2results/qiskit-aqua-main/test/chemistry/test_extrapolators.py,test_poly_window_extrapolator,test_poly_window_extrapolator,approximate,134,self.assertFalse(params.get(0.3))
task2results/qiskit-aqua-main/test/chemistry/test_extrapolators.py,test_poly_window_extrapolator,test_poly_window_extrapolator,approximate,135,self.assertFalse(params.get(0.5))
task2results/qiskit-aqua-main/test/chemistry/test_extrapolators.py,test_poly_window_extrapolator,test_poly_window_extrapolator,approximate,138,"self.assertLess(sum(sq_diff_1), 0.1)"
task2results/qiskit-aqua-main/test/chemistry/test_extrapolators.py,test_poly_window_extrapolator,test_poly_window_extrapolator,approximate,141,"self.assertLess(sum(sq_diff_2), 0.01)"
task2results/qiskit-aqua-main/test/chemistry/test_extrapolators.py,test_poly_window_extrapolator,test_poly_window_extrapolator,approximate,144,"self.assertLess(sum(sq_diff_3), 0.01)"
task2results/qiskit-aqua-main/test/chemistry/test_extrapolators.py,test_differential_model_window_extrapolator,test_differential_model_window_extrapolator,approximate,158,self.assertFalse(params.get(0.3))
task2results/qiskit-aqua-main/test/chemistry/test_extrapolators.py,test_differential_model_window_extrapolator,test_differential_model_window_extrapolator,approximate,159,self.assertFalse(params.get(0.5))
task2results/qiskit-aqua-main/test/chemistry/test_extrapolators.py,test_differential_model_window_extrapolator,test_differential_model_window_extrapolator,approximate,162,"self.assertLess(sum(sq_diff_1), 0.01)"
task2results/qiskit-aqua-main/test/chemistry/test_extrapolators.py,test_differential_model_window_extrapolator,test_differential_model_window_extrapolator,approximate,165,"self.assertLess(sum(sq_diff_2), 0.001)"
task2results/qiskit-aqua-main/test/chemistry/test_extrapolators.py,test_differential_model_window_extrapolator,test_differential_model_window_extrapolator,approximate,168,"self.assertLess(sum(sq_diff_3), 0.001)"
task2results/qiskit-aqua-main/test/chemistry/test_extrapolators.py,test_differential_model_window_alternate_model_extrapolator,test_differential_model_window_alternate_model_extrapolator,approximate,184,self.assertFalse(params.get(0.3))
task2results/qiskit-aqua-main/test/chemistry/test_extrapolators.py,test_differential_model_window_alternate_model_extrapolator,test_differential_model_window_alternate_model_extrapolator,approximate,185,self.assertFalse(params.get(0.5))
task2results/qiskit-aqua-main/test/chemistry/test_extrapolators.py,test_differential_model_window_alternate_model_extrapolator,test_differential_model_window_alternate_model_extrapolator,approximate,188,"self.assertLess(sum(sq_diff_1), 0.01)"
task2results/qiskit-aqua-main/test/chemistry/test_extrapolators.py,test_differential_model_window_alternate_model_extrapolator,test_differential_model_window_alternate_model_extrapolator,approximate,191,"self.assertLess(sum(sq_diff_2), 0.001)"
task2results/qiskit-aqua-main/test/chemistry/test_extrapolators.py,test_differential_model_window_alternate_model_extrapolator,test_differential_model_window_alternate_model_extrapolator,approximate,195,"self.assertLess(sum(sq_diff_3), 0.001)"
task2results/qiskit-aqua-main/test/chemistry/test_extrapolators.py,test_pca_polynomial_window_extrapolator,test_pca_polynomial_window_extrapolator,approximate,209,self.assertFalse(params.get(0.3))
task2results/qiskit-aqua-main/test/chemistry/test_extrapolators.py,test_pca_polynomial_window_extrapolator,test_pca_polynomial_window_extrapolator,approximate,210,self.assertFalse(params.get(0.5))
task2results/qiskit-aqua-main/test/chemistry/test_extrapolators.py,test_pca_polynomial_window_extrapolator,test_pca_polynomial_window_extrapolator,approximate,213,"self.assertLess(sum(sq_diff_1), 0.01)"
task2results/qiskit-aqua-main/test/chemistry/test_extrapolators.py,test_pca_polynomial_window_extrapolator,test_pca_polynomial_window_extrapolator,approximate,216,"self.assertLess(sum(sq_diff_2), 0.01)"
task2results/qiskit-aqua-main/test/chemistry/test_extrapolators.py,test_pca_polynomial_window_extrapolator,test_pca_polynomial_window_extrapolator,approximate,219,"self.assertLess(sum(sq_diff_3), 0.01)"
task2results/qiskit-aqua-main/test/chemistry/test_extrapolators.py,test_sieve_poly_window_extrapolator,test_sieve_poly_window_extrapolator,approximate,234,self.assertFalse(params.get(0.3))
task2results/qiskit-aqua-main/test/chemistry/test_extrapolators.py,test_sieve_poly_window_extrapolator,test_sieve_poly_window_extrapolator,approximate,235,self.assertFalse(params.get(0.5))
task2results/qiskit-aqua-main/test/chemistry/test_extrapolators.py,test_sieve_poly_window_extrapolator,test_sieve_poly_window_extrapolator,approximate,238,"self.assertLess(sum(sq_diff_1), 0.1)"
task2results/qiskit-aqua-main/test/chemistry/test_extrapolators.py,test_sieve_poly_window_extrapolator,test_sieve_poly_window_extrapolator,approximate,241,"self.assertLess(sum(sq_diff_2), 0.1)"
task2results/qiskit-aqua-main/test/chemistry/test_extrapolators.py,test_sieve_poly_window_extrapolator,test_sieve_poly_window_extrapolator,approximate,244,"self.assertLess(sum(sq_diff_3), 0.1)"
task2results/qiskit-aqua-main/test/chemistry/test_driver_fcidump_dumper.py,test_dumped_inactive_energy,test_dumped_inactive_energy,approximate,57,"self.assertAlmostEqual(self.dumped['ECORE'], self.core_energy, places=3)"
task2results/qiskit-aqua-main/test/chemistry/test_driver_fcidump_dumper.py,test_dumped_num_orbitals,test_dumped_num_orbitals,approximate,62,"self.assertEqual(self.dumped['NORB'], self.num_orbitals)"
task2results/qiskit-aqua-main/test/chemistry/test_driver_fcidump_dumper.py,test_dumped_num_electrons,test_dumped_num_electrons,approximate,67,"self.assertEqual(self.dumped['NELEC'], self.num_electrons)"
task2results/qiskit-aqua-main/test/chemistry/test_driver_fcidump_dumper.py,test_dumped_spin_number,test_dumped_spin_number,approximate,72,"self.assertEqual(self.dumped['MS2'], self.spin_number)"
task2results/qiskit-aqua-main/test/chemistry/test_driver_fcidump_dumper.py,test_dumped_wave_function_sym,test_dumped_wave_function_sym,approximate,77,"self.assertEqual(self.dumped['ISYM'], self.wf_symmetry)"
task2results/qiskit-aqua-main/test/chemistry/test_driver_fcidump_dumper.py,test_dumped_orbital_syms,test_dumped_orbital_syms,approximate,82,"self.assertEqual(self.dumped['ORBSYM'], self.orb_symmetries)"
task2results/qiskit-aqua-main/test/chemistry/test_uccsd_hartree_fock.py,test_uccsd_hf,test_uccsd_hf,approximate,72,"self.assertAlmostEqual(result.total_energies[0], self.reference_energy, places=6)"
task2results/qiskit-aqua-main/test/chemistry/test_uccsd_hartree_fock.py,test_uccsd_hf_qasm,test_uccsd_hf_qasm,approximate,87,"self.assertAlmostEqual(result.total_energies[0], (- 1.138), places=2)"
task2results/qiskit-aqua-main/test/chemistry/test_uccsd_hartree_fock.py,test_uccsd_hf_aer_statevector,test_uccsd_hf_aer_statevector,approximate,104,"self.assertAlmostEqual(result.total_energies[0], self.reference_energy, places=6)"
task2results/qiskit-aqua-main/test/chemistry/test_uccsd_hartree_fock.py,test_uccsd_hf_aer_qasm,test_uccsd_hf_aer_qasm,approximate,125,"self.assertAlmostEqual(result.total_energies[0], (- 1.138), places=2)"
task2results/qiskit-aqua-main/test/chemistry/test_uccsd_hartree_fock.py,test_uccsd_hf_aer_qasm_snapshot,test_uccsd_hf_aer_qasm_snapshot,approximate,144,"self.assertAlmostEqual(result.total_energies[0], self.reference_energy, places=3)"
task2results/qiskit-aqua-main/test/chemistry/test_uccsd_hartree_fock.py,test_uccsd_excitations,test_uccsd_excitations,approximate,195,"self.assertListEqual(list(excitations), self.EXCITATION_RESULTS[expected_result_idx])"
task2results/qiskit-aqua-main/test/chemistry/test_chc_vscf.py,test_chc_vscf,test_chc_vscf,approximate,85,"self.assertAlmostEqual(energy, self.reference_energy, places=4)"
task2results/qiskit-aqua-main/test/chemistry/test_driver_methods_gsc.py,_assert_energy,_assert_energy,approximate,60,"self.assertAlmostEqual(self.ref_energies[mol], result.total_energies[0], places=3)"
task2results/qiskit-aqua-main/test/chemistry/test_driver_methods_gsc.py,_assert_energy_and_dipole,_assert_energy_and_dipole,approximate,64,"self.assertAlmostEqual(self.ref_dipoles[mol], result.total_dipole_moment[0], places=3)"
task2results/qiskit-aqua-main/test/chemistry/test_fermionic_operator.py,test_transform,test_transform,approximate,89,"self.assertEqual(h1_nonzeros, 0, 'there are differences between h1 transformation')"
task2results/qiskit-aqua-main/test/chemistry/test_fermionic_operator.py,test_transform,test_transform,approximate,92,"self.assertEqual(h2_nonzeros, 0, 'there are differences between h2 transformation')"
task2results/qiskit-aqua-main/test/chemistry/test_fermionic_operator.py,test_freezing_core,test_freezing_core,approximate,107,"self.assertLess(diff, 1e-06)"
task2results/qiskit-aqua-main/test/chemistry/test_fermionic_operator.py,test_freezing_core,test_freezing_core,approximate,120,"self.assertLess(diff, 1e-06)"
task2results/qiskit-aqua-main/test/chemistry/test_fermionic_operator.py,test_bksf_mapping,test_bksf_mapping,approximate,147,"self.assertEqual(overlapped_spectrum, (jw_eigs.size // 2))"
task2results/qiskit-aqua-main/test/chemistry/test_readme_sample.py,test_readme_sample,test_readme_sample,approximate,106,"self.assertAlmostEqual(result.eigenvalue.real, (- 1.8572750301938803), places=6)"
task2results/qiskit-aqua-main/test/chemistry/test_vqe_uccsd_mes_factory.py,test_setters_getters,test_setters_getters,approximate,62,"self.assertEqual(self._vqe_uccsd_factory.quantum_instance, self.quantum_instance)"
task2results/qiskit-aqua-main/test/chemistry/test_vqe_uccsd_mes_factory.py,test_setters_getters,test_setters_getters,approximate,64,"self.assertEqual(self._vqe_uccsd_factory.quantum_instance, None)"
task2results/qiskit-aqua-main/test/chemistry/test_vqe_uccsd_mes_factory.py,test_setters_getters,test_setters_getters,approximate,67,"self.assertEqual(self._vqe_uccsd_factory.optimizer, None)"
task2results/qiskit-aqua-main/test/chemistry/test_vqe_uccsd_mes_factory.py,test_setters_getters,test_setters_getters,approximate,70,"self.assertEqual(self._vqe_uccsd_factory.optimizer, optimizer)"
task2results/qiskit-aqua-main/test/chemistry/test_vqe_uccsd_mes_factory.py,test_setters_getters,test_setters_getters,approximate,73,"self.assertEqual(self._vqe_uccsd_factory.initial_point, None)"
task2results/qiskit-aqua-main/test/chemistry/test_vqe_uccsd_mes_factory.py,test_setters_getters,test_setters_getters,approximate,76,"self.assertEqual(self._vqe_uccsd_factory.initial_point, initial_point)"
task2results/qiskit-aqua-main/test/chemistry/test_vqe_uccsd_mes_factory.py,test_setters_getters,test_setters_getters,approximate,79,"self.assertEqual(self._vqe_uccsd_factory.expectation, None)"
task2results/qiskit-aqua-main/test/chemistry/test_vqe_uccsd_mes_factory.py,test_setters_getters,test_setters_getters,approximate,82,"self.assertEqual(self._vqe_uccsd_factory.expectation, expectation)"
task2results/qiskit-aqua-main/test/chemistry/test_vqe_uccsd_mes_factory.py,test_setters_getters,test_setters_getters,approximate,85,"self.assertEqual(self._vqe_uccsd_factory.include_custom, False)"
task2results/qiskit-aqua-main/test/chemistry/test_vqe_uccsd_mes_factory.py,test_setters_getters,test_setters_getters,approximate,87,"self.assertEqual(self._vqe_uccsd_factory.include_custom, True)"
task2results/qiskit-aqua-main/test/chemistry/test_vqe_uccsd_mes_factory.py,test_setters_getters,test_setters_getters,approximate,90,"self.assertEqual(self._vqe_uccsd_factory.method_singles, 'both')"
task2results/qiskit-aqua-main/test/chemistry/test_vqe_uccsd_mes_factory.py,test_setters_getters,test_setters_getters,approximate,92,"self.assertEqual(self._vqe_uccsd_factory.method_singles, 'alpha')"
task2results/qiskit-aqua-main/test/chemistry/test_vqe_uccsd_mes_factory.py,test_setters_getters,test_setters_getters,approximate,95,"self.assertEqual(self._vqe_uccsd_factory.method_doubles, 'ucc')"
task2results/qiskit-aqua-main/test/chemistry/test_vqe_uccsd_mes_factory.py,test_setters_getters,test_setters_getters,approximate,97,"self.assertEqual(self._vqe_uccsd_factory.method_doubles, 'succ')"
task2results/qiskit-aqua-main/test/chemistry/test_vqe_uccsd_mes_factory.py,test_setters_getters,test_setters_getters,approximate,100,"self.assertEqual(self._vqe_uccsd_factory.excitation_type, 'sd')"
task2results/qiskit-aqua-main/test/chemistry/test_vqe_uccsd_mes_factory.py,test_setters_getters,test_setters_getters,approximate,102,"self.assertEqual(self._vqe_uccsd_factory.excitation_type, 's')"
task2results/qiskit-aqua-main/test/chemistry/test_vqe_uccsd_mes_factory.py,test_setters_getters,test_setters_getters,approximate,105,"self.assertEqual(self._vqe_uccsd_factory.same_spin_doubles, True)"
task2results/qiskit-aqua-main/test/chemistry/test_vqe_uccsd_mes_factory.py,test_setters_getters,test_setters_getters,approximate,107,"self.assertEqual(self._vqe_uccsd_factory.same_spin_doubles, False)"
task2results/qiskit-aqua-main/test/chemistry/test_bosonic_operator.py,test_mapping,test_mapping,approximate,102,"self.assertAlmostEqual(gs_energy, self.reference_energy, places=4)"
task2results/qiskit-aqua-main/test/chemistry/test_driver_molecule.py,test_charge,test_charge,approximate,65,"self.assertEqual(mol.charge, 0)"
task2results/qiskit-aqua-main/test/chemistry/test_driver_molecule.py,test_charge,test_charge,approximate,67,"self.assertEqual(mol.charge, 1)"
task2results/qiskit-aqua-main/test/chemistry/test_driver_molecule.py,test_multiplicity,test_multiplicity,approximate,72,"self.assertEqual(mol.multiplicity, 1)"
task2results/qiskit-aqua-main/test/chemistry/test_driver_molecule.py,test_multiplicity,test_multiplicity,approximate,74,"self.assertEqual(mol.multiplicity, 0)"
task2results/qiskit-aqua-main/test/chemistry/test_uccsd_advanced.py,test_uccsd_hf_qpUCCD,test_uccsd_hf_qpUCCD,approximate,102,"self.assertAlmostEqual(result.total_energies[0], self.reference_energy_pUCCD, places=6)"
task2results/qiskit-aqua-main/test/chemistry/test_uccsd_advanced.py,test_uccsd_hf_qUCCD0,test_uccsd_hf_qUCCD0,approximate,135,"self.assertAlmostEqual(result.total_energies[0], self.reference_energy_UCCD0, places=6)"
task2results/qiskit-aqua-main/test/chemistry/test_uccsd_advanced.py,test_uccsd_hf_qUCCD0full,test_uccsd_hf_qUCCD0full,approximate,168,"self.assertAlmostEqual(result.total_energies[0], self.reference_energy_UCCD0full, places=6)"
task2results/qiskit-aqua-main/test/chemistry/test_uccsd_advanced.py,test_uccsd_hf_qUCCSD,test_uccsd_hf_qUCCSD,approximate,216,"self.assertAlmostEqual(result.total_energies[0], self.reference_energy_UCCSD, places=6)"
task2results/qiskit-aqua-main/test/chemistry/test_uccsd_advanced.py,test_uccsd_hf_excitations,test_uccsd_hf_excitations,approximate,247,"self.assertEqual(res, True)"
task2results/qiskit-aqua-main/test/chemistry/test_uccsd_advanced.py,test_uccsd_hf_excitations,test_uccsd_hf_excitations,approximate,267,"self.assertEqual(res_groups, True)"
task2results/qiskit-aqua-main/test/chemistry/test_swaprz.py,test_excitation_preserving,test_excitation_preserving,approximate,71,"self.assertAlmostEqual(result.total_energies[0], self.reference_energy, places=4)"
task2results/qiskit-aqua-main/test/chemistry/test_fermionic_transformation_orb_reduce.py,_validate_vars,_validate_vars,approximate,40,"self.assertAlmostEqual(fermionic_transformation._hf_energy, (- 7.862), places=3)"
task2results/qiskit-aqua-main/test/chemistry/test_fermionic_transformation_orb_reduce.py,_validate_vars,_validate_vars,approximate,41,"self.assertAlmostEqual(fermionic_transformation._energy_shift, energy_shift)"
task2results/qiskit-aqua-main/test/chemistry/test_fermionic_transformation_orb_reduce.py,_validate_vars,_validate_vars,approximate,42,"self.assertAlmostEqual(fermionic_transformation._ph_energy_shift, ph_energy_shift)"
task2results/qiskit-aqua-main/test/chemistry/test_fermionic_transformation_orb_reduce.py,_validate_info,_validate_info,approximate,48,"self.assertEqual(z2symmetries.is_empty(), True)"
task2results/qiskit-aqua-main/test/chemistry/test_fermionic_transformation_orb_reduce.py,_validate_info,_validate_info,approximate,49,"self.assertEqual(fermionic_transformation.molecule_info, {'num_particles': num_particles, 'num_orbitals': num_orbitals, 'two_qubit_reduction': actual_two_qubit_reduction})"
task2results/qiskit-aqua-main/test/chemistry/test_fermionic_transformation_orb_reduce.py,_validate_input_object,_validate_input_object,approximate,55,"self.assertTrue(isinstance(qubit_op, OperatorBase))"
task2results/qiskit-aqua-main/test/chemistry/test_fermionic_transformation_orb_reduce.py,_validate_input_object,_validate_input_object,approximate,56,self.assertIsNotNone(qubit_op)
task2results/qiskit-aqua-main/test/chemistry/test_fermionic_transformation_orb_reduce.py,_validate_input_object,_validate_input_object,approximate,57,"self.assertEqual(qubit_op.num_qubits, num_qubits)"
task2results/qiskit-aqua-main/test/chemistry/test_fermionic_transformation_orb_reduce.py,_validate_input_object,_validate_input_object,approximate,58,"self.assertEqual(len(qubit_op.oplist), num_paulis)"
task2results/qiskit-aqua-main/test/chemistry/test_core_hamiltonian_orb_reduce.py,_validate_vars,_validate_vars,approximate,41,"self.assertAlmostEqual(core._hf_energy, (- 7.862), places=3)"
task2results/qiskit-aqua-main/test/chemistry/test_core_hamiltonian_orb_reduce.py,_validate_vars,_validate_vars,approximate,42,"self.assertAlmostEqual(core._energy_shift, energy_shift)"
task2results/qiskit-aqua-main/test/chemistry/test_core_hamiltonian_orb_reduce.py,_validate_vars,_validate_vars,approximate,43,"self.assertAlmostEqual(core._ph_energy_shift, ph_energy_shift)"
task2results/qiskit-aqua-main/test/chemistry/test_core_hamiltonian_orb_reduce.py,_validate_info,_validate_info,approximate,49,"self.assertEqual(z2symmetries.is_empty(), True)"
task2results/qiskit-aqua-main/test/chemistry/test_core_hamiltonian_orb_reduce.py,_validate_info,_validate_info,approximate,50,"self.assertEqual(core.molecule_info, {'num_particles': num_particles, 'num_orbitals': num_orbitals, 'two_qubit_reduction': actual_two_qubit_reduction})"
task2results/qiskit-aqua-main/test/chemistry/test_core_hamiltonian_orb_reduce.py,_validate_input_object,_validate_input_object,approximate,55,"self.assertTrue(isinstance(qubit_op, WeightedPauliOperator))"
task2results/qiskit-aqua-main/test/chemistry/test_core_hamiltonian_orb_reduce.py,_validate_input_object,_validate_input_object,approximate,56,self.assertIsNotNone(qubit_op)
task2results/qiskit-aqua-main/test/chemistry/test_core_hamiltonian_orb_reduce.py,_validate_input_object,_validate_input_object,approximate,57,"self.assertEqual(qubit_op.num_qubits, num_qubits)"
task2results/qiskit-aqua-main/test/chemistry/test_core_hamiltonian_orb_reduce.py,_validate_input_object,_validate_input_object,approximate,58,"self.assertEqual(len(qubit_op.to_dict()['paulis']), num_paulis)"
task2results/qiskit-aqua-main/test/chemistry/test_fermionic_transformation.py,_validate_vars,_validate_vars,approximate,41,"self.assertAlmostEqual(fermionic_transformation._hf_energy, (- 1.117), places=3)"
task2results/qiskit-aqua-main/test/chemistry/test_fermionic_transformation.py,_validate_vars,_validate_vars,approximate,42,"self.assertAlmostEqual(fermionic_transformation._energy_shift, energy_shift)"
task2results/qiskit-aqua-main/test/chemistry/test_fermionic_transformation.py,_validate_vars,_validate_vars,approximate,43,"self.assertAlmostEqual(fermionic_transformation._ph_energy_shift, ph_energy_shift)"
task2results/qiskit-aqua-main/test/chemistry/test_fermionic_transformation.py,_validate_info,_validate_info,approximate,49,"self.assertEqual(z2symmetries.is_empty(), True)"
task2results/qiskit-aqua-main/test/chemistry/test_fermionic_transformation.py,_validate_info,_validate_info,approximate,50,"self.assertEqual(fermionic_transformation.molecule_info, {'num_particles': num_particles, 'num_orbitals': num_orbitals, 'two_qubit_reduction': actual_two_qubit_reduction})"
task2results/qiskit-aqua-main/test/chemistry/test_fermionic_transformation.py,_validate_input_object,_validate_input_object,approximate,56,"self.assertTrue(isinstance(qubit_op, OperatorBase))"
task2results/qiskit-aqua-main/test/chemistry/test_fermionic_transformation.py,_validate_input_object,_validate_input_object,approximate,57,self.assertIsNotNone(qubit_op)
task2results/qiskit-aqua-main/test/chemistry/test_fermionic_transformation.py,_validate_input_object,_validate_input_object,approximate,58,"self.assertEqual(qubit_op.num_qubits, num_qubits)"
task2results/qiskit-aqua-main/test/chemistry/test_fermionic_transformation.py,_validate_input_object,_validate_input_object,approximate,59,"self.assertEqual(len(qubit_op.oplist), num_paulis)"
task2results/qiskit-aqua-main/test/chemistry/test_fermionic_transformation.py,test_orbital_reduction,test_orbital_reduction,approximate,183,"self.assertEqual(aux_ops[6], expected)"
task2results/qiskit-aqua-main/test/chemistry/test_driver_methods_fcidump.py,test_lih_freeze_core,test_lih_freeze_core,approximate,45,"self.assertIn(warning, log.output)"
task2results/qiskit-aqua-main/test/chemistry/test_driver_methods_fcidump.py,test_oh_freeze_core,test_oh_freeze_core,approximate,55,"self.assertIn(warning, log.output)"
task2results/qiskit-aqua-main/test/chemistry/test_oovqe.py,test_orbital_rotations,test_orbital_rotations,approximate,78,"self.assertAlmostEqual(algo_result.computed_electronic_energy, self.energy1_rotation, 4)"
task2results/qiskit-aqua-main/test/chemistry/test_oovqe.py,test_oovqe,test_oovqe,approximate,95,"self.assertLessEqual(algo_result.computed_electronic_energy, self.energy1, 4)"
task2results/qiskit-aqua-main/test/chemistry/test_oovqe.py,test_iterative_oovqe,test_iterative_oovqe,approximate,111,"self.assertLessEqual(algo_result.computed_electronic_energy, self.energy1)"
task2results/qiskit-aqua-main/test/chemistry/test_oovqe.py,test_oovqe_with_frozen_core,test_oovqe_with_frozen_core,approximate,126,"self.assertLessEqual(((algo_result.computed_electronic_energy + self.transformation2._energy_shift) + self.transformation2._nuclear_repulsion_energy), self.energy2)"
task2results/qiskit-aqua-main/test/chemistry/test_oovqe.py,test_oovqe_with_unrestricted_hf,test_oovqe_with_unrestricted_hf,approximate,143,"self.assertLessEqual(algo_result.computed_electronic_energy, self.energy3)"
task2results/qiskit-aqua-main/test/chemistry/test_oovqe.py,test_oovqe_with_vqe_uccsd,test_oovqe_with_vqe_uccsd,approximate,173,"self.assertLessEqual(algo_result.computed_electronic_energy, self.energy1, 4)"
task2results/qiskit-aqua-main/test/chemistry/test_driver_fcidump.py,test_driver_inactive_energy,test_driver_inactive_energy,approximate,61,"self.assertAlmostEqual(self.qmolecule.nuclear_repulsion_energy, self.nuclear_repulsion_energy, places=3)"
task2results/qiskit-aqua-main/test/chemistry/test_driver_fcidump.py,test_driver_num_orbitals,test_driver_num_orbitals,approximate,67,"self.assertEqual(self.qmolecule.num_orbitals, self.num_orbitals)"
task2results/qiskit-aqua-main/test/chemistry/test_driver_fcidump.py,test_driver_num_alpha,test_driver_num_alpha,approximate,72,"self.assertEqual(self.qmolecule.num_alpha, self.num_alpha)"
task2results/qiskit-aqua-main/test/chemistry/test_driver_fcidump.py,test_driver_num_beta,test_driver_num_beta,approximate,77,"self.assertEqual(self.qmolecule.num_beta, self.num_beta)"
task2results/qiskit-aqua-main/test/chemistry/test_driver_fcidump.py,test_driver_mo_onee_ints,test_driver_mo_onee_ints,approximate,83,"self.assertEqual(self.qmolecule.mo_onee_ints.shape, self.mo_onee.shape)"
task2results/qiskit-aqua-main/test/chemistry/test_driver_fcidump.py,test_driver_mo_onee_b_ints,test_driver_mo_onee_b_ints,approximate,93,"self.assertEqual(self.qmolecule.mo_onee_ints_b.shape, self.mo_onee_b.shape)"
task2results/qiskit-aqua-main/test/chemistry/test_driver_fcidump.py,test_driver_mo_eri_ints,test_driver_mo_eri_ints,approximate,101,"self.assertEqual(self.qmolecule.mo_eri_ints.shape, self.mo_eri.shape)"
task2results/qiskit-aqua-main/test/chemistry/test_driver_fcidump.py,test_driver_mo_eri_ints_ba,test_driver_mo_eri_ints_ba,approximate,111,"self.assertEqual(self.qmolecule.mo_eri_ints_ba.shape, self.mo_eri_ba.shape)"
task2results/qiskit-aqua-main/test/chemistry/test_driver_fcidump.py,test_driver_mo_eri_ints_bb,test_driver_mo_eri_ints_bb,approximate,121,"self.assertEqual(self.qmolecule.mo_eri_ints_bb.shape, self.mo_eri_bb.shape)"
task2results/qiskit-aqua-main/test/chemistry/circuit/library/test_vscf.py,test_bitstring,test_bitstring,approximate,30,"self.assertTrue(all((bitstr[::(- 1)] == np.array([True, False, True, False]))))"
task2results/qiskit-aqua-main/test/chemistry/circuit/library/test_vscf.py,test_qubits_4,test_qubits_4,approximate,39,"self.assertEqual(ref, vscf)"
task2results/qiskit-aqua-main/test/chemistry/circuit/library/test_vscf.py,test_qubits_5,test_qubits_5,approximate,48,"self.assertEqual(ref, vscf)"
task2results/qiskit-aqua-main/test/chemistry/circuit/library/test_hartree_fock.py,test_bitstring,test_bitstring,approximate,30,"self.assertTrue(all((bitstr[::(- 1)] == np.array([True, False]))))"
task2results/qiskit-aqua-main/test/chemistry/circuit/library/test_hartree_fock.py,test_qubits_4_jw_h2,test_qubits_4_jw_h2,approximate,52,"self.assertEqual(state, ref)"
task2results/qiskit-aqua-main/test/chemistry/circuit/library/test_hartree_fock.py,test_qubits_4_py_h2,test_qubits_4_py_h2,approximate,59,"self.assertEqual(state, ref)"
task2results/qiskit-aqua-main/test/chemistry/circuit/library/test_hartree_fock.py,test_qubits_4_bk_h2,test_qubits_4_bk_h2,approximate,66,"self.assertEqual(state, ref)"
task2results/qiskit-aqua-main/test/chemistry/circuit/library/test_hartree_fock.py,test_qubits_2_py_h2,test_qubits_2_py_h2,approximate,73,"self.assertEqual(state, ref)"
task2results/qiskit-aqua-main/test/chemistry/circuit/library/test_hartree_fock.py,test_qubits_6_py_lih,test_qubits_6_py_lih,approximate,80,"self.assertEqual(state, ref)"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_constraint.py,test_init,test_init,approximate,33,"self.assertEqual(quadratic_program.get_num_quadratic_constraints(), 0)"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_constraint.py,test_init,test_init,approximate,44,"self.assertEqual(quadratic_program.get_num_quadratic_constraints(), 1)"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_constraint.py,test_init,test_init,approximate,45,"self.assertEqual(quadratic_program.quadratic_constraints[0].name, 'q0')"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_constraint.py,test_init,test_init,approximate,46,"self.assertEqual(len(quadratic_program.quadratic_constraints[0].linear.to_dict()), 0)"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_constraint.py,test_init,test_init,approximate,47,"self.assertEqual(len(quadratic_program.quadratic_constraints[0].quadratic.to_dict()), 0)"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_constraint.py,test_init,test_init,approximate,48,"self.assertEqual(quadratic_program.quadratic_constraints[0].sense, Constraint.Sense.EQ)"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_constraint.py,test_init,test_init,approximate,49,"self.assertEqual(quadratic_program.quadratic_constraints[0].rhs, 0.0)"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_constraint.py,test_init,test_init,approximate,50,"self.assertEqual(quadratic_program.quadratic_constraints[0], quadratic_program.get_quadratic_constraint('q0'))"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_constraint.py,test_init,test_init,approximate,52,"self.assertEqual(quadratic_program.quadratic_constraints[0], quadratic_program.get_quadratic_constraint(0))"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_constraint.py,test_init,test_init,approximate,55,"self.assertEqual(quadratic_program.quadratic_constraints[0].evaluate(linear_coeffs), 0.0)"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_constraint.py,test_init,test_init,approximate,61,"self.assertEqual(quadratic_program.get_num_quadratic_constraints(), 2)"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_constraint.py,test_init,test_init,approximate,62,"self.assertEqual(quadratic_program.quadratic_constraints[1].name, 'q1')"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_constraint.py,test_init,test_init,approximate,63,self.assertTrue((quadratic_program.quadratic_constraints[1].linear.to_array() == linear_coeffs).all())
task2results/qiskit-aqua-main/test/optimization/test_quadratic_constraint.py,test_init,test_init,approximate,65,self.assertTrue((quadratic_program.quadratic_constraints[1].quadratic.to_array() == quadratic_coeffs).all())
task2results/qiskit-aqua-main/test/optimization/test_quadratic_constraint.py,test_init,test_init,approximate,68,"self.assertEqual(quadratic_program.quadratic_constraints[1].sense, Constraint.Sense.EQ)"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_constraint.py,test_init,test_init,approximate,69,"self.assertEqual(quadratic_program.quadratic_constraints[1].rhs, 1.0)"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_constraint.py,test_init,test_init,approximate,70,"self.assertEqual(quadratic_program.quadratic_constraints[1], quadratic_program.get_quadratic_constraint('q1'))"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_constraint.py,test_init,test_init,approximate,72,"self.assertEqual(quadratic_program.quadratic_constraints[1], quadratic_program.get_quadratic_constraint(1))"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_constraint.py,test_init,test_init,approximate,75,"self.assertEqual(quadratic_program.quadratic_constraints[1].evaluate(linear_coeffs), 930.0)"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_constraint.py,test_init,test_init,approximate,79,"self.assertEqual(quadratic_program.get_num_quadratic_constraints(), 3)"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_constraint.py,test_init,test_init,approximate,80,"self.assertEqual(quadratic_program.quadratic_constraints[2].name, 'q2')"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_constraint.py,test_init,test_init,approximate,81,"self.assertEqual(len(quadratic_program.quadratic_constraints[2].linear.to_dict()), 0)"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_constraint.py,test_init,test_init,approximate,82,"self.assertEqual(len(quadratic_program.quadratic_constraints[2].quadratic.to_dict()), 0)"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_constraint.py,test_init,test_init,approximate,83,"self.assertEqual(quadratic_program.quadratic_constraints[2].sense, Constraint.Sense.GE)"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_constraint.py,test_init,test_init,approximate,84,"self.assertEqual(quadratic_program.quadratic_constraints[2].rhs, 0.0)"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_constraint.py,test_init,test_init,approximate,85,"self.assertEqual(quadratic_program.quadratic_constraints[2], quadratic_program.get_quadratic_constraint('q2'))"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_constraint.py,test_init,test_init,approximate,87,"self.assertEqual(quadratic_program.quadratic_constraints[2], quadratic_program.get_quadratic_constraint(2))"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_constraint.py,test_init,test_init,approximate,90,"self.assertEqual(quadratic_program.quadratic_constraints[2].evaluate(linear_coeffs), 0.0)"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_constraint.py,test_init,test_init,approximate,96,"self.assertEqual(quadratic_program.get_num_quadratic_constraints(), 4)"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_constraint.py,test_init,test_init,approximate,97,"self.assertEqual(quadratic_program.quadratic_constraints[3].name, 'q3')"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_constraint.py,test_init,test_init,approximate,98,self.assertTrue((quadratic_program.quadratic_constraints[3].linear.to_array() == linear_coeffs).all())
task2results/qiskit-aqua-main/test/optimization/test_quadratic_constraint.py,test_init,test_init,approximate,100,self.assertTrue((quadratic_program.quadratic_constraints[3].quadratic.to_array() == quadratic_coeffs).all())
task2results/qiskit-aqua-main/test/optimization/test_quadratic_constraint.py,test_init,test_init,approximate,102,"self.assertEqual(quadratic_program.quadratic_constraints[3].sense, Constraint.Sense.GE)"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_constraint.py,test_init,test_init,approximate,103,"self.assertEqual(quadratic_program.quadratic_constraints[3].rhs, 1.0)"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_constraint.py,test_init,test_init,approximate,104,"self.assertEqual(quadratic_program.quadratic_constraints[3], quadratic_program.get_quadratic_constraint('q3'))"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_constraint.py,test_init,test_init,approximate,106,"self.assertEqual(quadratic_program.quadratic_constraints[3], quadratic_program.get_quadratic_constraint(3))"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_constraint.py,test_init,test_init,approximate,109,"self.assertEqual(quadratic_program.quadratic_constraints[3].evaluate(linear_coeffs), 930.0)"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_constraint.py,test_init,test_init,approximate,113,"self.assertEqual(quadratic_program.get_num_quadratic_constraints(), 5)"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_constraint.py,test_init,test_init,approximate,114,"self.assertEqual(quadratic_program.quadratic_constraints[4].name, 'q4')"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_constraint.py,test_init,test_init,approximate,115,"self.assertEqual(len(quadratic_program.quadratic_constraints[4].linear.to_dict()), 0)"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_constraint.py,test_init,test_init,approximate,116,"self.assertEqual(quadratic_program.quadratic_constraints[4].sense, Constraint.Sense.LE)"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_constraint.py,test_init,test_init,approximate,117,"self.assertEqual(quadratic_program.quadratic_constraints[4].rhs, 0.0)"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_constraint.py,test_init,test_init,approximate,118,"self.assertEqual(quadratic_program.quadratic_constraints[4], quadratic_program.get_quadratic_constraint('q4'))"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_constraint.py,test_init,test_init,approximate,120,"self.assertEqual(quadratic_program.quadratic_constraints[4], quadratic_program.get_quadratic_constraint(4))"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_constraint.py,test_init,test_init,approximate,123,"self.assertEqual(quadratic_program.quadratic_constraints[4].evaluate(linear_coeffs), 0.0)"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_constraint.py,test_init,test_init,approximate,129,"self.assertEqual(quadratic_program.get_num_quadratic_constraints(), 6)"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_constraint.py,test_init,test_init,approximate,130,"self.assertEqual(quadratic_program.quadratic_constraints[5].name, 'q5')"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_constraint.py,test_init,test_init,approximate,131,self.assertTrue((quadratic_program.quadratic_constraints[5].linear.to_array() == linear_coeffs).all())
task2results/qiskit-aqua-main/test/optimization/test_quadratic_constraint.py,test_init,test_init,approximate,133,self.assertTrue((quadratic_program.quadratic_constraints[5].quadratic.to_array() == quadratic_coeffs).all())
task2results/qiskit-aqua-main/test/optimization/test_quadratic_constraint.py,test_init,test_init,approximate,135,"self.assertEqual(quadratic_program.quadratic_constraints[5].sense, Constraint.Sense.LE)"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_constraint.py,test_init,test_init,approximate,136,"self.assertEqual(quadratic_program.quadratic_constraints[5].rhs, 1.0)"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_constraint.py,test_init,test_init,approximate,137,"self.assertEqual(quadratic_program.quadratic_constraints[5], quadratic_program.get_quadratic_constraint('q5'))"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_constraint.py,test_init,test_init,approximate,139,"self.assertEqual(quadratic_program.quadratic_constraints[5], quadratic_program.get_quadratic_constraint(5))"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_constraint.py,test_init,test_init,approximate,142,"self.assertEqual(quadratic_program.quadratic_constraints[5].evaluate(linear_coeffs), 930.0)"
task2results/qiskit-aqua-main/test/optimization/test_converters.py,test_empty_problem,test_empty_problem,approximate,61,"self.assertEqual(shift, 0.0)"
task2results/qiskit-aqua-main/test/optimization/test_converters.py,test_inequality_binary,test_inequality_binary,approximate,96,"self.assertListEqual([v.name for v in op2.variables], ['x0', 'x1', 'x2', 'x1x2@int_slack', 'x0x2@int_slack', 'x0x1_x1x2LE@int_slack', 'x0x1_x1x2GE@int_slack'])"
task2results/qiskit-aqua-main/test/optimization/test_converters.py,test_inequality_binary,test_inequality_binary,approximate,100,"self.assertEqual(op.name, op2.name)"
task2results/qiskit-aqua-main/test/optimization/test_converters.py,test_inequality_binary,test_inequality_binary,approximate,101,"self.assertEqual(op.objective.sense, op2.objective.sense)"
task2results/qiskit-aqua-main/test/optimization/test_converters.py,test_inequality_binary,test_inequality_binary,approximate,107,"self.assertListEqual(lst, [1, 1])"
task2results/qiskit-aqua-main/test/optimization/test_converters.py,test_inequality_binary,test_inequality_binary,approximate,108,"self.assertEqual(op2.linear_constraints[0].sense, Constraint.Sense.EQ)"
task2results/qiskit-aqua-main/test/optimization/test_converters.py,test_inequality_binary,test_inequality_binary,approximate,114,"self.assertListEqual(lst, [1, (- 1), 1])"
task2results/qiskit-aqua-main/test/optimization/test_converters.py,test_inequality_binary,test_inequality_binary,approximate,116,"self.assertListEqual(lst, [0, 3])"
task2results/qiskit-aqua-main/test/optimization/test_converters.py,test_inequality_binary,test_inequality_binary,approximate,117,"self.assertEqual(op2.linear_constraints[1].sense, Constraint.Sense.EQ)"
task2results/qiskit-aqua-main/test/optimization/test_converters.py,test_inequality_binary,test_inequality_binary,approximate,123,"self.assertListEqual(lst, [1, 3, (- 1)])"
task2results/qiskit-aqua-main/test/optimization/test_converters.py,test_inequality_binary,test_inequality_binary,approximate,125,"self.assertListEqual(lst, [0, 2])"
task2results/qiskit-aqua-main/test/optimization/test_converters.py,test_inequality_binary,test_inequality_binary,approximate,126,"self.assertEqual(op2.linear_constraints[2].sense, Constraint.Sense.EQ)"
task2results/qiskit-aqua-main/test/optimization/test_converters.py,test_inequality_binary,test_inequality_binary,approximate,133,"self.assertListEqual(lst, [1, 2, 1])"
task2results/qiskit-aqua-main/test/optimization/test_converters.py,test_inequality_binary,test_inequality_binary,approximate,135,"self.assertListEqual(lst, [0, 3])"
task2results/qiskit-aqua-main/test/optimization/test_converters.py,test_inequality_binary,test_inequality_binary,approximate,141,"self.assertListEqual(lst, [3, 4, (- 1)])"
task2results/qiskit-aqua-main/test/optimization/test_converters.py,test_inequality_binary,test_inequality_binary,approximate,143,"self.assertListEqual(lst, [0, 4])"
task2results/qiskit-aqua-main/test/optimization/test_converters.py,test_inequality_integer,test_inequality_integer,approximate,167,"self.assertListEqual([v.name for v in op2.variables], ['x0', 'x1', 'x2', 'x1x2@int_slack', 'x0x2@int_slack', 'x0x1_x1x2LE@int_slack', 'x0x1_x1x2GE@int_slack'])"
task2results/qiskit-aqua-main/test/optimization/test_converters.py,test_inequality_integer,test_inequality_integer,approximate,175,"self.assertListEqual(lst, [1, 1])"
task2results/qiskit-aqua-main/test/optimization/test_converters.py,test_inequality_integer,test_inequality_integer,approximate,176,"self.assertEqual(op2.linear_constraints[0].sense, Constraint.Sense.EQ)"
task2results/qiskit-aqua-main/test/optimization/test_converters.py,test_inequality_integer,test_inequality_integer,approximate,182,"self.assertListEqual(lst, [1, (- 1), 1])"
task2results/qiskit-aqua-main/test/optimization/test_converters.py,test_inequality_integer,test_inequality_integer,approximate,184,"self.assertListEqual(lst, [0, 8])"
task2results/qiskit-aqua-main/test/optimization/test_converters.py,test_inequality_integer,test_inequality_integer,approximate,185,"self.assertEqual(op2.linear_constraints[1].sense, Constraint.Sense.EQ)"
task2results/qiskit-aqua-main/test/optimization/test_converters.py,test_inequality_integer,test_inequality_integer,approximate,191,"self.assertListEqual(lst, [1, 3, (- 1)])"
task2results/qiskit-aqua-main/test/optimization/test_converters.py,test_inequality_integer,test_inequality_integer,approximate,193,"self.assertListEqual(lst, [0, 10])"
task2results/qiskit-aqua-main/test/optimization/test_converters.py,test_inequality_integer,test_inequality_integer,approximate,194,"self.assertEqual(op2.linear_constraints[2].sense, Constraint.Sense.EQ)"
task2results/qiskit-aqua-main/test/optimization/test_converters.py,test_inequality_integer,test_inequality_integer,approximate,201,"self.assertListEqual(lst, [1, 2, 1])"
task2results/qiskit-aqua-main/test/optimization/test_converters.py,test_inequality_integer,test_inequality_integer,approximate,203,"self.assertListEqual(lst, [0, 30])"
task2results/qiskit-aqua-main/test/optimization/test_converters.py,test_inequality_integer,test_inequality_integer,approximate,209,"self.assertListEqual(lst, [3, 4, (- 1)])"
task2results/qiskit-aqua-main/test/optimization/test_converters.py,test_inequality_integer,test_inequality_integer,approximate,211,"self.assertListEqual(lst, [0, 60])"
task2results/qiskit-aqua-main/test/optimization/test_converters.py,test_inequality_mode_integer,test_inequality_mode_integer,approximate,231,"self.assertListEqual(lst, [Variable.Type.INTEGER, Variable.Type.INTEGER])"
task2results/qiskit-aqua-main/test/optimization/test_converters.py,test_inequality_mode_continuous,test_inequality_mode_continuous,approximate,248,"self.assertListEqual(lst, [Variable.Type.CONTINUOUS, Variable.Type.CONTINUOUS])"
task2results/qiskit-aqua-main/test/optimization/test_converters.py,test_inequality_mode_auto,test_inequality_mode_auto,approximate,265,"self.assertListEqual(lst, [Variable.Type.INTEGER, Variable.Type.CONTINUOUS])"
task2results/qiskit-aqua-main/test/optimization/test_converters.py,test_penalize_sense,test_penalize_sense,approximate,279,"self.assertEqual(op.get_num_linear_constraints(), 3)"
task2results/qiskit-aqua-main/test/optimization/test_converters.py,test_penalize_binary,test_penalize_binary,approximate,296,"self.assertEqual(op.get_num_linear_constraints(), 3)"
task2results/qiskit-aqua-main/test/optimization/test_converters.py,test_penalize_binary,test_penalize_binary,approximate,299,"self.assertEqual(op2.get_num_linear_constraints(), 0)"
task2results/qiskit-aqua-main/test/optimization/test_converters.py,test_penalize_integer,test_penalize_integer,approximate,317,"self.assertEqual(op.get_num_linear_constraints(), 3)"
task2results/qiskit-aqua-main/test/optimization/test_converters.py,test_penalize_integer,test_penalize_integer,approximate,320,"self.assertEqual(op2.get_num_linear_constraints(), 0)"
task2results/qiskit-aqua-main/test/optimization/test_converters.py,test_integer_to_binary,test_integer_to_binary,approximate,337,"self.assertEqual(op2.get_num_vars(), 5)"
task2results/qiskit-aqua-main/test/optimization/test_converters.py,test_integer_to_binary,test_integer_to_binary,approximate,338,"self.assertListEqual([x.vartype for x in op2.variables], ([Variable.Type.BINARY] * 5))"
task2results/qiskit-aqua-main/test/optimization/test_converters.py,test_integer_to_binary,test_integer_to_binary,approximate,339,"self.assertListEqual([x.name for x in op2.variables], ['x0', 'x1', 'x2@0', 'x2@1', 'x2@2'])"
task2results/qiskit-aqua-main/test/optimization/test_converters.py,test_integer_to_binary,test_integer_to_binary,approximate,341,"self.assertEqual(dct[2], 3)"
task2results/qiskit-aqua-main/test/optimization/test_converters.py,test_integer_to_binary,test_integer_to_binary,approximate,342,"self.assertEqual(dct[3], 6)"
task2results/qiskit-aqua-main/test/optimization/test_converters.py,test_integer_to_binary,test_integer_to_binary,approximate,343,"self.assertEqual(dct[4], 6)"
task2results/qiskit-aqua-main/test/optimization/test_converters.py,test_optimizationproblem_to_ising,test_optimizationproblem_to_ising,approximate,378,"self.assertEqual(qubitop, QUBIT_OP_MAXIMIZE_SAMPLE)"
task2results/qiskit-aqua-main/test/optimization/test_converters.py,test_optimizationproblem_to_ising,test_optimizationproblem_to_ising,approximate,379,"self.assertEqual(offset, OFFSET_MAXIMIZE_SAMPLE)"
task2results/qiskit-aqua-main/test/optimization/test_converters.py,test_ising_to_quadraticprogram_linear,test_ising_to_quadraticprogram_linear,approximate,389,"self.assertEqual(quadratic.get_num_vars(), 4)"
task2results/qiskit-aqua-main/test/optimization/test_converters.py,test_ising_to_quadraticprogram_linear,test_ising_to_quadraticprogram_linear,approximate,390,"self.assertEqual(quadratic.get_num_linear_constraints(), 0)"
task2results/qiskit-aqua-main/test/optimization/test_converters.py,test_ising_to_quadraticprogram_linear,test_ising_to_quadraticprogram_linear,approximate,391,"self.assertEqual(quadratic.get_num_quadratic_constraints(), 0)"
task2results/qiskit-aqua-main/test/optimization/test_converters.py,test_ising_to_quadraticprogram_linear,test_ising_to_quadraticprogram_linear,approximate,392,"self.assertEqual(quadratic.objective.sense, quadratic.objective.Sense.MINIMIZE)"
task2results/qiskit-aqua-main/test/optimization/test_converters.py,test_ising_to_quadraticprogram_linear,test_ising_to_quadraticprogram_linear,approximate,393,"self.assertAlmostEqual(quadratic.objective.constant, 900000)"
task2results/qiskit-aqua-main/test/optimization/test_converters.py,test_ising_to_quadraticprogram_quadratic,test_ising_to_quadraticprogram_quadratic,approximate,424,"self.assertEqual(quadratic.get_num_vars(), 4)"
task2results/qiskit-aqua-main/test/optimization/test_converters.py,test_ising_to_quadraticprogram_quadratic,test_ising_to_quadraticprogram_quadratic,approximate,425,"self.assertEqual(quadratic.get_num_linear_constraints(), 0)"
task2results/qiskit-aqua-main/test/optimization/test_converters.py,test_ising_to_quadraticprogram_quadratic,test_ising_to_quadraticprogram_quadratic,approximate,426,"self.assertEqual(quadratic.get_num_quadratic_constraints(), 0)"
task2results/qiskit-aqua-main/test/optimization/test_converters.py,test_ising_to_quadraticprogram_quadratic,test_ising_to_quadraticprogram_quadratic,approximate,427,"self.assertEqual(quadratic.objective.sense, quadratic.objective.Sense.MINIMIZE)"
task2results/qiskit-aqua-main/test/optimization/test_converters.py,test_ising_to_quadraticprogram_quadratic,test_ising_to_quadraticprogram_quadratic,approximate,428,"self.assertAlmostEqual(quadratic.objective.constant, 900000)"
task2results/qiskit-aqua-main/test/optimization/test_converters.py,test_auto_penalty,test_auto_penalty,approximate,487,"self.assertEqual(result.fval, result_auto.fval)"
task2results/qiskit-aqua-main/test/optimization/test_converters.py,test_auto_penalty_warning,test_auto_penalty_warning,approximate,507,"self.assertIn(warning, log.output)"
task2results/qiskit-aqua-main/test/optimization/test_converters.py,test_0var_range_inequality,test_0var_range_inequality,approximate,539,"self.assertEqual(new_op.get_num_vars(), 2)"
task2results/qiskit-aqua-main/test/optimization/test_converters.py,test_0var_range_inequality,test_0var_range_inequality,approximate,540,self.assertTrue(all(((l_const.sense == Constraint.Sense.EQ) for l_const in new_op.linear_constraints)))
task2results/qiskit-aqua-main/test/optimization/test_converters.py,test_0var_range_inequality,test_0var_range_inequality,approximate,542,self.assertTrue(all(((q_const.sense == Constraint.Sense.EQ) for q_const in new_op.quadratic_constraints)))
task2results/qiskit-aqua-main/test/optimization/test_converters.py,test_integer_to_binary2,test_integer_to_binary2,approximate,554,"self.assertListEqual([(e.name + '@0') for e in mod.variables], [e.name for e in mod2.variables])"
task2results/qiskit-aqua-main/test/optimization/test_converters.py,test_integer_to_binary2,test_integer_to_binary2,approximate,556,"self.assertDictEqual(mod.objective.linear.to_dict(), mod2.objective.linear.to_dict())"
task2results/qiskit-aqua-main/test/optimization/test_converters.py,test_integer_to_binary2,test_integer_to_binary2,approximate,558,"self.assertDictEqual(mod.objective.quadratic.to_dict(), mod2.objective.quadratic.to_dict())"
task2results/qiskit-aqua-main/test/optimization/test_converters.py,test_integer_to_binary2,test_integer_to_binary2,approximate,560,"self.assertEqual(mod.get_num_linear_constraints(), mod2.get_num_linear_constraints())"
task2results/qiskit-aqua-main/test/optimization/test_converters.py,test_integer_to_binary2,test_integer_to_binary2,approximate,565,"self.assertEqual(mod.get_num_quadratic_constraints(), mod2.get_num_quadratic_constraints())"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_objective.py,test_init,test_init,approximate,34,"self.assertEqual(quadratic_program.objective.constant, 0.0)"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_objective.py,test_init,test_init,approximate,35,"self.assertEqual(len(quadratic_program.objective.linear.to_dict()), 0)"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_objective.py,test_init,test_init,approximate,36,"self.assertEqual(len(quadratic_program.objective.quadratic.to_dict()), 0)"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_objective.py,test_init,test_init,approximate,37,"self.assertEqual(quadratic_program.objective.sense, QuadraticObjective.Sense.MINIMIZE)"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_objective.py,test_init,test_init,approximate,49,"self.assertEqual(quadratic_program.objective.constant, constant)"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_objective.py,test_init,test_init,approximate,50,self.assertTrue((quadratic_program.objective.linear.to_array() == linear_coeffs).all())
task2results/qiskit-aqua-main/test/optimization/test_quadratic_objective.py,test_init,test_init,approximate,51,self.assertTrue((quadratic_program.objective.quadratic.to_array() == quadratic_coeffs).all())
task2results/qiskit-aqua-main/test/optimization/test_quadratic_objective.py,test_init,test_init,approximate,53,"self.assertEqual(quadratic_program.objective.sense, QuadraticObjective.Sense.MINIMIZE)"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_objective.py,test_init,test_init,approximate,57,"self.assertEqual(quadratic_program.objective.constant, constant)"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_objective.py,test_init,test_init,approximate,58,self.assertTrue((quadratic_program.objective.linear.to_array() == linear_coeffs).all())
task2results/qiskit-aqua-main/test/optimization/test_quadratic_objective.py,test_init,test_init,approximate,59,self.assertTrue((quadratic_program.objective.quadratic.to_array() == quadratic_coeffs).all())
task2results/qiskit-aqua-main/test/optimization/test_quadratic_objective.py,test_init,test_init,approximate,61,"self.assertEqual(quadratic_program.objective.sense, QuadraticObjective.Sense.MAXIMIZE)"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_objective.py,test_init,test_init,approximate,63,"self.assertEqual(quadratic_program.objective.evaluate(linear_coeffs), 931.0)"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_objective.py,test_setters,test_setters,approximate,89,"self.assertEqual(quadratic_program.objective.constant, constant)"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_objective.py,test_setters,test_setters,approximate,90,self.assertTrue((quadratic_program.objective.linear.to_array() == linear_coeffs).all())
task2results/qiskit-aqua-main/test/optimization/test_quadratic_objective.py,test_setters,test_setters,approximate,91,self.assertTrue((quadratic_program.objective.quadratic.to_array() == quadratic_coeffs).all())
task2results/qiskit-aqua-main/test/optimization/test_quadratic_objective.py,test_setters,test_setters,approximate,94,"self.assertEqual(quadratic_program.objective.sense, QuadraticObjective.Sense.MINIMIZE)"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_objective.py,test_setters,test_setters,approximate,97,"self.assertEqual(quadratic_program.objective.sense, QuadraticObjective.Sense.MAXIMIZE)"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_objective.py,test_setters,test_setters,approximate,100,"self.assertEqual(quadratic_program.objective.sense, QuadraticObjective.Sense.MINIMIZE)"
task2results/qiskit-aqua-main/test/optimization/test_set_packing.py,test_set_packing,test_set_packing,approximate,64,"self.assertEqual(np.count_nonzero(ising_sol), oracle)"
task2results/qiskit-aqua-main/test/optimization/test_set_packing.py,test_set_packing_vqe,test_set_packing_vqe,approximate,87,"self.assertEqual(np.count_nonzero(ising_sol), oracle)"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_constructor,test_constructor,approximate,36,"self.assertEqual(quadratic_program.name, '')"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_constructor,test_constructor,approximate,37,"self.assertEqual(quadratic_program.status, QuadraticProgram.Status.VALID)"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_constructor,test_constructor,approximate,38,"self.assertEqual(quadratic_program.get_num_vars(), 0)"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_constructor,test_constructor,approximate,39,"self.assertEqual(quadratic_program.get_num_linear_constraints(), 0)"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_constructor,test_constructor,approximate,40,"self.assertEqual(quadratic_program.get_num_quadratic_constraints(), 0)"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_constructor,test_constructor,approximate,41,"self.assertEqual(quadratic_program.objective.constant, 0)"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_constructor,test_constructor,approximate,42,"self.assertDictEqual(quadratic_program.objective.linear.to_dict(), {})"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_constructor,test_constructor,approximate,43,"self.assertDictEqual(quadratic_program.objective.quadratic.to_dict(), {})"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_clear,test_clear,approximate,54,"self.assertEqual(q_p.name, '')"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_clear,test_clear,approximate,55,"self.assertEqual(q_p.status, QuadraticProgram.Status.VALID)"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_clear,test_clear,approximate,56,"self.assertEqual(q_p.get_num_vars(), 0)"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_clear,test_clear,approximate,57,"self.assertEqual(q_p.get_num_linear_constraints(), 0)"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_clear,test_clear,approximate,58,"self.assertEqual(q_p.get_num_quadratic_constraints(), 0)"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_clear,test_clear,approximate,59,"self.assertEqual(q_p.objective.constant, 0)"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_clear,test_clear,approximate,60,"self.assertDictEqual(q_p.objective.linear.to_dict(), {})"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_clear,test_clear,approximate,61,"self.assertDictEqual(q_p.objective.quadratic.to_dict(), {})"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_name_setter,test_name_setter,approximate,66,"self.assertEqual(q_p.name, '')"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_name_setter,test_name_setter,approximate,69,"self.assertEqual(q_p.name, name)"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,assert_equal,assert_equal,approximate,73,"self.assertEqual(x.name, y.name)"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,assert_equal,assert_equal,approximate,74,"self.assertEqual(x.lowerbound, y.lowerbound)"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,assert_equal,assert_equal,approximate,75,"self.assertEqual(x.upperbound, y.upperbound)"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,assert_equal,assert_equal,approximate,76,"self.assertEqual(x.vartype, y.vartype)"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_var_dict,test_var_dict,approximate,83,"self.assertSetEqual(set(d_0.keys()), {'a_0', 'a_1', 'a_2'})"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_var_dict,test_var_dict,approximate,84,"self.assertSetEqual({var.name for var in q_p.variables}, {'a_0', 'a_1', 'a_2'})"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_var_dict,test_var_dict,approximate,92,"self.assertSetEqual(set(d_1.keys()), {'b3', 'b4', 'b5', 'b6', 'b7'})"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_var_dict,test_var_dict,approximate,93,"self.assertSetEqual({var.name for var in q_p.variables}, {'a_0', 'a_1', 'a_2', 'b3', 'b4', 'b5', 'b6', 'b7'})"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_var_dict,test_var_dict,approximate,102,"self.assertSetEqual(set(d_2.keys()), {'x-8'})"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_var_dict,test_var_dict,approximate,103,"self.assertSetEqual({var.name for var in q_p.variables}, {'a_0', 'a_1', 'a_2', 'b3', 'b4', 'b5', 'b6', 'b7', 'x-8'})"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_var_dict,test_var_dict,approximate,112,"self.assertSetEqual(set(d_3.keys()), {'c0', 'c1', 'c2'})"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_var_dict,test_var_dict,approximate,113,"self.assertSetEqual({var.name for var in q_p.variables}, {'a_0', 'a_1', 'a_2', 'b3', 'b4', 'b5', 'b6', 'b7', 'x-8', 'c0', 'c1', 'c2'})"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_var_dict,test_var_dict,approximate,126,"self.assertSetEqual(set(d_4.keys()), {'x_'})"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_var_dict,test_var_dict,approximate,127,"self.assertSetEqual({var.name for var in q_p.variables}, {'a_0', 'a_1', 'a_2', 'b3', 'b4', 'b5', 'b6', 'b7', 'x-8', 'c0', 'c1', 'c2', 'x_'})"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_var_dict,test_var_dict,approximate,143,"self.assertSetEqual(set(d_5.keys()), {''})"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_var_dict,test_var_dict,approximate,144,"self.assertSetEqual({var.name for var in q_p.variables}, {'a_0', 'a_1', 'a_2', 'b3', 'b4', 'b5', 'b6', 'b7', 'x-8', 'c0', 'c1', 'c2', 'x_', ''})"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_var_list,test_var_list,approximate,185,"self.assertSetEqual({var.name for var in q_p.variables}, {'a_0', 'a_1', 'a_2'})"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_var_list,test_var_list,approximate,195,"self.assertSetEqual({var.name for var in q_p.variables}, {'a_0', 'a_1', 'a_2', 'b3', 'b4', 'b5', 'b6', 'b7'})"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_var_list,test_var_list,approximate,206,"self.assertSetEqual({var.name for var in q_p.variables}, {'a_0', 'a_1', 'a_2', 'b3', 'b4', 'b5', 'b6', 'b7', 'x-8'})"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_var_list,test_var_list,approximate,217,"self.assertSetEqual({var.name for var in q_p.variables}, {'a_0', 'a_1', 'a_2', 'b3', 'b4', 'b5', 'b6', 'b7', 'x-8', 'c0', 'c1', 'c2'})"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_var_list,test_var_list,approximate,232,"self.assertSetEqual({var.name for var in q_p.variables}, {'a_0', 'a_1', 'a_2', 'b3', 'b4', 'b5', 'b6', 'b7', 'x-8', 'c0', 'c1', 'c2', 'x_'})"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_var_list,test_var_list,approximate,250,"self.assertSetEqual({var.name for var in q_p.variables}, {'a_0', 'a_1', 'a_2', 'b3', 'b4', 'b5', 'b6', 'b7', 'x-8', 'c0', 'c1', 'c2', 'x_', ''})"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_variables_handling,test_variables_handling,approximate,290,"self.assertEqual(quadratic_program.get_num_vars(), 0)"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_variables_handling,test_variables_handling,approximate,291,"self.assertEqual(quadratic_program.get_num_continuous_vars(), 0)"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_variables_handling,test_variables_handling,approximate,292,"self.assertEqual(quadratic_program.get_num_binary_vars(), 0)"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_variables_handling,test_variables_handling,approximate,293,"self.assertEqual(quadratic_program.get_num_integer_vars(), 0)"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_variables_handling,test_variables_handling,approximate,296,"self.assertEqual(x_0.name, 'x0')"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_variables_handling,test_variables_handling,approximate,297,"self.assertEqual(x_0.lowerbound, 0)"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_variables_handling,test_variables_handling,approximate,298,"self.assertEqual(x_0.upperbound, INFINITY)"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_variables_handling,test_variables_handling,approximate,299,"self.assertEqual(x_0.vartype, Variable.Type.CONTINUOUS)"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_variables_handling,test_variables_handling,approximate,301,"self.assertEqual(quadratic_program.get_num_vars(), 1)"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_variables_handling,test_variables_handling,approximate,302,"self.assertEqual(quadratic_program.get_num_continuous_vars(), 1)"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_variables_handling,test_variables_handling,approximate,303,"self.assertEqual(quadratic_program.get_num_binary_vars(), 0)"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_variables_handling,test_variables_handling,approximate,304,"self.assertEqual(quadratic_program.get_num_integer_vars(), 0)"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_variables_handling,test_variables_handling,approximate,307,"self.assertEqual(x_1.name, 'x1')"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_variables_handling,test_variables_handling,approximate,308,"self.assertEqual(x_1.lowerbound, 5)"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_variables_handling,test_variables_handling,approximate,309,"self.assertEqual(x_1.upperbound, 10)"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_variables_handling,test_variables_handling,approximate,310,"self.assertEqual(x_1.vartype, Variable.Type.CONTINUOUS)"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_variables_handling,test_variables_handling,approximate,312,"self.assertEqual(quadratic_program.get_num_vars(), 2)"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_variables_handling,test_variables_handling,approximate,313,"self.assertEqual(quadratic_program.get_num_continuous_vars(), 2)"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_variables_handling,test_variables_handling,approximate,314,"self.assertEqual(quadratic_program.get_num_binary_vars(), 0)"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_variables_handling,test_variables_handling,approximate,315,"self.assertEqual(quadratic_program.get_num_integer_vars(), 0)"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_variables_handling,test_variables_handling,approximate,318,"self.assertEqual(x_2.name, 'x2')"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_variables_handling,test_variables_handling,approximate,319,"self.assertEqual(x_2.lowerbound, 0)"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_variables_handling,test_variables_handling,approximate,320,"self.assertEqual(x_2.upperbound, 1)"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_variables_handling,test_variables_handling,approximate,321,"self.assertEqual(x_2.vartype, Variable.Type.BINARY)"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_variables_handling,test_variables_handling,approximate,323,"self.assertEqual(quadratic_program.get_num_vars(), 3)"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_variables_handling,test_variables_handling,approximate,324,"self.assertEqual(quadratic_program.get_num_continuous_vars(), 2)"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_variables_handling,test_variables_handling,approximate,325,"self.assertEqual(quadratic_program.get_num_binary_vars(), 1)"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_variables_handling,test_variables_handling,approximate,326,"self.assertEqual(quadratic_program.get_num_integer_vars(), 0)"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_variables_handling,test_variables_handling,approximate,329,"self.assertEqual(x_3.name, 'x3')"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_variables_handling,test_variables_handling,approximate,330,"self.assertEqual(x_3.lowerbound, 0)"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_variables_handling,test_variables_handling,approximate,331,"self.assertEqual(x_3.upperbound, 1)"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_variables_handling,test_variables_handling,approximate,332,"self.assertEqual(x_3.vartype, Variable.Type.BINARY)"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_variables_handling,test_variables_handling,approximate,334,"self.assertEqual(quadratic_program.get_num_vars(), 4)"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_variables_handling,test_variables_handling,approximate,335,"self.assertEqual(quadratic_program.get_num_continuous_vars(), 2)"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_variables_handling,test_variables_handling,approximate,336,"self.assertEqual(quadratic_program.get_num_binary_vars(), 2)"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_variables_handling,test_variables_handling,approximate,337,"self.assertEqual(quadratic_program.get_num_integer_vars(), 0)"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_variables_handling,test_variables_handling,approximate,340,"self.assertEqual(x_4.name, 'x4')"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_variables_handling,test_variables_handling,approximate,341,"self.assertEqual(x_4.lowerbound, 0)"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_variables_handling,test_variables_handling,approximate,342,"self.assertEqual(x_4.upperbound, INFINITY)"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_variables_handling,test_variables_handling,approximate,343,"self.assertEqual(x_4.vartype, Variable.Type.INTEGER)"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_variables_handling,test_variables_handling,approximate,345,"self.assertEqual(quadratic_program.get_num_vars(), 5)"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_variables_handling,test_variables_handling,approximate,346,"self.assertEqual(quadratic_program.get_num_continuous_vars(), 2)"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_variables_handling,test_variables_handling,approximate,347,"self.assertEqual(quadratic_program.get_num_binary_vars(), 2)"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_variables_handling,test_variables_handling,approximate,348,"self.assertEqual(quadratic_program.get_num_integer_vars(), 1)"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_variables_handling,test_variables_handling,approximate,351,"self.assertEqual(x_5.name, 'x5')"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_variables_handling,test_variables_handling,approximate,352,"self.assertEqual(x_5.lowerbound, 5)"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_variables_handling,test_variables_handling,approximate,353,"self.assertEqual(x_5.upperbound, 10)"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_variables_handling,test_variables_handling,approximate,354,"self.assertEqual(x_5.vartype, Variable.Type.INTEGER)"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_variables_handling,test_variables_handling,approximate,356,"self.assertEqual(quadratic_program.get_num_vars(), 6)"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_variables_handling,test_variables_handling,approximate,357,"self.assertEqual(quadratic_program.get_num_continuous_vars(), 2)"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_variables_handling,test_variables_handling,approximate,358,"self.assertEqual(quadratic_program.get_num_binary_vars(), 2)"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_variables_handling,test_variables_handling,approximate,359,"self.assertEqual(quadratic_program.get_num_integer_vars(), 2)"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_variables_handling,test_variables_handling,approximate,376,"self.assertDictEqual(quadratic_program.variables_index, {('x' + str(i)): i for i in range(6)})"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_linear_constraints_handling,test_linear_constraints_handling,approximate,388,"self.assertEqual(q_p.get_num_linear_constraints(), 3)"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_linear_constraints_handling,test_linear_constraints_handling,approximate,390,"self.assertEqual(len(lin), 3)"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_linear_constraints_handling,test_linear_constraints_handling,approximate,392,"self.assertDictEqual(lin[0].linear.to_dict(), {0: 1})"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_linear_constraints_handling,test_linear_constraints_handling,approximate,393,"self.assertDictEqual(lin[0].linear.to_dict(use_name=True), {'x': 1})"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_linear_constraints_handling,test_linear_constraints_handling,approximate,394,"self.assertListEqual(lin[0].linear.to_array().tolist(), [1, 0, 0])"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_linear_constraints_handling,test_linear_constraints_handling,approximate,395,"self.assertEqual(lin[0].sense, Constraint.Sense.EQ)"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_linear_constraints_handling,test_linear_constraints_handling,approximate,396,"self.assertEqual(lin[0].rhs, 1)"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_linear_constraints_handling,test_linear_constraints_handling,approximate,397,"self.assertEqual(lin[0].name, 'c0')"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_linear_constraints_handling,test_linear_constraints_handling,approximate,398,"self.assertEqual(q_p.get_linear_constraint(0).name, 'c0')"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_linear_constraints_handling,test_linear_constraints_handling,approximate,399,"self.assertEqual(q_p.get_linear_constraint('c0').name, 'c0')"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_linear_constraints_handling,test_linear_constraints_handling,approximate,401,"self.assertDictEqual(lin[1].linear.to_dict(), {1: 1})"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_linear_constraints_handling,test_linear_constraints_handling,approximate,402,"self.assertDictEqual(lin[1].linear.to_dict(use_name=True), {'y': 1})"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_linear_constraints_handling,test_linear_constraints_handling,approximate,403,"self.assertListEqual(lin[1].linear.to_array().tolist(), [0, 1, 0])"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_linear_constraints_handling,test_linear_constraints_handling,approximate,404,"self.assertEqual(lin[1].sense, Constraint.Sense.LE)"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_linear_constraints_handling,test_linear_constraints_handling,approximate,405,"self.assertEqual(lin[1].rhs, 1)"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_linear_constraints_handling,test_linear_constraints_handling,approximate,406,"self.assertEqual(lin[1].name, 'c1')"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_linear_constraints_handling,test_linear_constraints_handling,approximate,407,"self.assertEqual(q_p.get_linear_constraint(1).name, 'c1')"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_linear_constraints_handling,test_linear_constraints_handling,approximate,408,"self.assertEqual(q_p.get_linear_constraint('c1').name, 'c1')"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_linear_constraints_handling,test_linear_constraints_handling,approximate,410,"self.assertDictEqual(lin[2].linear.to_dict(), {2: 1})"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_linear_constraints_handling,test_linear_constraints_handling,approximate,411,"self.assertDictEqual(lin[2].linear.to_dict(use_name=True), {'z': 1})"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_linear_constraints_handling,test_linear_constraints_handling,approximate,412,"self.assertListEqual(lin[2].linear.to_array().tolist(), [0, 0, 1])"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_linear_constraints_handling,test_linear_constraints_handling,approximate,413,"self.assertEqual(lin[2].sense, Constraint.Sense.GE)"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_linear_constraints_handling,test_linear_constraints_handling,approximate,414,"self.assertEqual(lin[2].rhs, 1)"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_linear_constraints_handling,test_linear_constraints_handling,approximate,415,"self.assertEqual(lin[2].name, 'c2')"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_linear_constraints_handling,test_linear_constraints_handling,approximate,416,"self.assertEqual(q_p.get_linear_constraint(2).name, 'c2')"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_linear_constraints_handling,test_linear_constraints_handling,approximate,417,"self.assertEqual(q_p.get_linear_constraint('c2').name, 'c2')"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_linear_constraints_handling,test_linear_constraints_handling,approximate,432,"self.assertEqual(len(lin), 2)"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_linear_constraints_handling,test_linear_constraints_handling,approximate,433,"self.assertDictEqual(lin[1].linear.to_dict(), {2: 1})"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_linear_constraints_handling,test_linear_constraints_handling,approximate,434,"self.assertDictEqual(lin[1].linear.to_dict(use_name=True), {'z': 1})"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_linear_constraints_handling,test_linear_constraints_handling,approximate,435,"self.assertListEqual(lin[1].linear.to_array().tolist(), [0, 0, 1])"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_linear_constraints_handling,test_linear_constraints_handling,approximate,436,"self.assertEqual(lin[1].sense, Constraint.Sense.GE)"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_linear_constraints_handling,test_linear_constraints_handling,approximate,437,"self.assertEqual(lin[1].rhs, 1)"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_linear_constraints_handling,test_linear_constraints_handling,approximate,438,"self.assertEqual(lin[1].name, 'c2')"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_linear_constraints_handling,test_linear_constraints_handling,approximate,439,"self.assertEqual(q_p.get_linear_constraint(1).name, 'c2')"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_linear_constraints_handling,test_linear_constraints_handling,approximate,440,"self.assertEqual(q_p.get_linear_constraint('c2').name, 'c2')"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_linear_constraints_handling,test_linear_constraints_handling,approximate,448,"self.assertEqual(q_p.linear_constraints[(- 1)].sense, Constraint.Sense.EQ)"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_linear_constraints_handling,test_linear_constraints_handling,approximate,450,"self.assertEqual(q_p.linear_constraints[(- 1)].sense, Constraint.Sense.GE)"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_linear_constraints_handling,test_linear_constraints_handling,approximate,452,"self.assertEqual(q_p.linear_constraints[(- 1)].sense, Constraint.Sense.LE)"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_linear_constraints_handling,test_linear_constraints_handling,approximate,454,"self.assertEqual(q_p.linear_constraints[(- 1)].sense, Constraint.Sense.EQ)"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_linear_constraints_handling,test_linear_constraints_handling,approximate,456,"self.assertEqual(q_p.linear_constraints[(- 1)].sense, Constraint.Sense.GE)"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_linear_constraints_handling,test_linear_constraints_handling,approximate,458,"self.assertEqual(q_p.linear_constraints[(- 1)].sense, Constraint.Sense.LE)"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_linear_constraints_handling,test_linear_constraints_handling,approximate,460,"self.assertEqual(q_p.linear_constraints[(- 1)].sense, Constraint.Sense.EQ)"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_linear_constraints_handling,test_linear_constraints_handling,approximate,462,"self.assertEqual(q_p.linear_constraints[(- 1)].sense, Constraint.Sense.GE)"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_quadratic_constraints_handling,test_quadratic_constraints_handling,approximate,477,"self.assertEqual(q_p.get_num_quadratic_constraints(), 3)"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_quadratic_constraints_handling,test_quadratic_constraints_handling,approximate,479,"self.assertEqual(len(quad), 3)"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_quadratic_constraints_handling,test_quadratic_constraints_handling,approximate,481,"self.assertDictEqual(quad[0].linear.to_dict(), {0: 1})"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_quadratic_constraints_handling,test_quadratic_constraints_handling,approximate,482,"self.assertDictEqual(quad[0].linear.to_dict(use_name=True), {'x': 1})"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_quadratic_constraints_handling,test_quadratic_constraints_handling,approximate,483,"self.assertListEqual(quad[0].linear.to_array().tolist(), [1, 0, 0])"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_quadratic_constraints_handling,test_quadratic_constraints_handling,approximate,484,"self.assertDictEqual(quad[0].quadratic.to_dict(), {(0, 1): 1})"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_quadratic_constraints_handling,test_quadratic_constraints_handling,approximate,485,"self.assertDictEqual(quad[0].quadratic.to_dict(symmetric=True), {(0, 1): 0.5, (1, 0): 0.5})"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_quadratic_constraints_handling,test_quadratic_constraints_handling,approximate,487,"self.assertDictEqual(quad[0].quadratic.to_dict(use_name=True), {('x', 'y'): 1})"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_quadratic_constraints_handling,test_quadratic_constraints_handling,approximate,488,"self.assertDictEqual(quad[0].quadratic.to_dict(use_name=True, symmetric=True), {('x', 'y'): 0.5, ('y', 'x'): 0.5})"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_quadratic_constraints_handling,test_quadratic_constraints_handling,approximate,490,"self.assertListEqual(quad[0].quadratic.to_array().tolist(), [[0, 1, 0], [0, 0, 0], [0, 0, 0]])"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_quadratic_constraints_handling,test_quadratic_constraints_handling,approximate,492,"self.assertListEqual(quad[0].quadratic.to_array(symmetric=True).tolist(), [[0, 0.5, 0], [0.5, 0, 0], [0, 0, 0]])"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_quadratic_constraints_handling,test_quadratic_constraints_handling,approximate,494,"self.assertEqual(quad[0].sense, Constraint.Sense.EQ)"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_quadratic_constraints_handling,test_quadratic_constraints_handling,approximate,495,"self.assertEqual(quad[0].rhs, 1)"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_quadratic_constraints_handling,test_quadratic_constraints_handling,approximate,496,"self.assertEqual(quad[0].name, 'q0')"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_quadratic_constraints_handling,test_quadratic_constraints_handling,approximate,497,"self.assertEqual(q_p.get_quadratic_constraint(0).name, 'q0')"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_quadratic_constraints_handling,test_quadratic_constraints_handling,approximate,498,"self.assertEqual(q_p.get_quadratic_constraint('q0').name, 'q0')"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_quadratic_constraints_handling,test_quadratic_constraints_handling,approximate,500,"self.assertDictEqual(quad[1].linear.to_dict(), {1: 1})"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_quadratic_constraints_handling,test_quadratic_constraints_handling,approximate,501,"self.assertDictEqual(quad[1].linear.to_dict(use_name=True), {'y': 1})"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_quadratic_constraints_handling,test_quadratic_constraints_handling,approximate,502,"self.assertListEqual(quad[1].linear.to_array().tolist(), [0, 1, 0])"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_quadratic_constraints_handling,test_quadratic_constraints_handling,approximate,503,"self.assertDictEqual(quad[1].quadratic.to_dict(), {(1, 2): 1})"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_quadratic_constraints_handling,test_quadratic_constraints_handling,approximate,504,"self.assertDictEqual(quad[1].quadratic.to_dict(symmetric=True), {(1, 2): 0.5, (2, 1): 0.5})"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_quadratic_constraints_handling,test_quadratic_constraints_handling,approximate,506,"self.assertDictEqual(quad[1].quadratic.to_dict(use_name=True), {('y', 'z'): 1})"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_quadratic_constraints_handling,test_quadratic_constraints_handling,approximate,507,"self.assertDictEqual(quad[1].quadratic.to_dict(use_name=True, symmetric=True), {('y', 'z'): 0.5, ('z', 'y'): 0.5})"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_quadratic_constraints_handling,test_quadratic_constraints_handling,approximate,509,"self.assertListEqual(quad[1].quadratic.to_array().tolist(), [[0, 0, 0], [0, 0, 1], [0, 0, 0]])"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_quadratic_constraints_handling,test_quadratic_constraints_handling,approximate,511,"self.assertListEqual(quad[1].quadratic.to_array(symmetric=True).tolist(), [[0, 0, 0], [0, 0, 0.5], [0, 0.5, 0]])"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_quadratic_constraints_handling,test_quadratic_constraints_handling,approximate,513,"self.assertEqual(quad[1].sense, Constraint.Sense.LE)"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_quadratic_constraints_handling,test_quadratic_constraints_handling,approximate,514,"self.assertEqual(quad[1].rhs, 1)"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_quadratic_constraints_handling,test_quadratic_constraints_handling,approximate,515,"self.assertEqual(quad[1].name, 'q1')"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_quadratic_constraints_handling,test_quadratic_constraints_handling,approximate,516,"self.assertEqual(q_p.get_quadratic_constraint(1).name, 'q1')"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_quadratic_constraints_handling,test_quadratic_constraints_handling,approximate,517,"self.assertEqual(q_p.get_quadratic_constraint('q1').name, 'q1')"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_quadratic_constraints_handling,test_quadratic_constraints_handling,approximate,519,"self.assertDictEqual(quad[2].linear.to_dict(), {2: 1})"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_quadratic_constraints_handling,test_quadratic_constraints_handling,approximate,520,"self.assertDictEqual(quad[2].linear.to_dict(use_name=True), {'z': 1})"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_quadratic_constraints_handling,test_quadratic_constraints_handling,approximate,521,"self.assertListEqual(quad[2].linear.to_array().tolist(), [0, 0, 1])"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_quadratic_constraints_handling,test_quadratic_constraints_handling,approximate,522,"self.assertDictEqual(quad[2].quadratic.to_dict(), {(0, 2): 1})"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_quadratic_constraints_handling,test_quadratic_constraints_handling,approximate,523,"self.assertDictEqual(quad[2].quadratic.to_dict(symmetric=True), {(0, 2): 0.5, (2, 0): 0.5})"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_quadratic_constraints_handling,test_quadratic_constraints_handling,approximate,525,"self.assertDictEqual(quad[2].quadratic.to_dict(use_name=True), {('x', 'z'): 1})"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_quadratic_constraints_handling,test_quadratic_constraints_handling,approximate,526,"self.assertDictEqual(quad[2].quadratic.to_dict(use_name=True, symmetric=True), {('x', 'z'): 0.5, ('z', 'x'): 0.5})"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_quadratic_constraints_handling,test_quadratic_constraints_handling,approximate,528,"self.assertListEqual(quad[2].quadratic.to_array().tolist(), [[0, 0, 1], [0, 0, 0], [0, 0, 0]])"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_quadratic_constraints_handling,test_quadratic_constraints_handling,approximate,530,"self.assertListEqual(quad[2].quadratic.to_array(symmetric=True).tolist(), [[0, 0, 0.5], [0, 0, 0], [0.5, 0, 0]])"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_quadratic_constraints_handling,test_quadratic_constraints_handling,approximate,532,"self.assertEqual(quad[2].sense, Constraint.Sense.GE)"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_quadratic_constraints_handling,test_quadratic_constraints_handling,approximate,533,"self.assertEqual(quad[2].rhs, 1)"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_quadratic_constraints_handling,test_quadratic_constraints_handling,approximate,534,"self.assertEqual(quad[2].name, 'q2')"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_quadratic_constraints_handling,test_quadratic_constraints_handling,approximate,535,"self.assertEqual(q_p.get_quadratic_constraint(2).name, 'q2')"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_quadratic_constraints_handling,test_quadratic_constraints_handling,approximate,536,"self.assertEqual(q_p.get_quadratic_constraint('q2').name, 'q2')"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_quadratic_constraints_handling,test_quadratic_constraints_handling,approximate,551,"self.assertEqual(len(quad), 2)"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_quadratic_constraints_handling,test_quadratic_constraints_handling,approximate,552,"self.assertDictEqual(quad[1].linear.to_dict(), {2: 1})"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_quadratic_constraints_handling,test_quadratic_constraints_handling,approximate,553,"self.assertDictEqual(quad[1].linear.to_dict(use_name=True), {'z': 1})"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_quadratic_constraints_handling,test_quadratic_constraints_handling,approximate,554,"self.assertListEqual(quad[1].linear.to_array().tolist(), [0, 0, 1])"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_quadratic_constraints_handling,test_quadratic_constraints_handling,approximate,555,"self.assertDictEqual(quad[1].quadratic.to_dict(), {(0, 2): 1})"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_quadratic_constraints_handling,test_quadratic_constraints_handling,approximate,556,"self.assertDictEqual(quad[1].quadratic.to_dict(symmetric=True), {(0, 2): 0.5, (2, 0): 0.5})"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_quadratic_constraints_handling,test_quadratic_constraints_handling,approximate,558,"self.assertDictEqual(quad[1].quadratic.to_dict(use_name=True), {('x', 'z'): 1})"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_quadratic_constraints_handling,test_quadratic_constraints_handling,approximate,559,"self.assertDictEqual(quad[1].quadratic.to_dict(use_name=True, symmetric=True), {('x', 'z'): 0.5, ('z', 'x'): 0.5})"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_quadratic_constraints_handling,test_quadratic_constraints_handling,approximate,561,"self.assertListEqual(quad[1].quadratic.to_array().tolist(), [[0, 0, 1], [0, 0, 0], [0, 0, 0]])"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_quadratic_constraints_handling,test_quadratic_constraints_handling,approximate,563,"self.assertListEqual(quad[1].quadratic.to_array(symmetric=True).tolist(), [[0, 0, 0.5], [0, 0, 0], [0.5, 0, 0]])"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_quadratic_constraints_handling,test_quadratic_constraints_handling,approximate,565,"self.assertEqual(quad[1].sense, Constraint.Sense.GE)"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_quadratic_constraints_handling,test_quadratic_constraints_handling,approximate,566,"self.assertEqual(quad[1].rhs, 1)"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_quadratic_constraints_handling,test_quadratic_constraints_handling,approximate,567,"self.assertEqual(quad[1].name, 'q2')"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_quadratic_constraints_handling,test_quadratic_constraints_handling,approximate,568,"self.assertEqual(q_p.get_quadratic_constraint(1).name, 'q2')"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_quadratic_constraints_handling,test_quadratic_constraints_handling,approximate,569,"self.assertEqual(q_p.get_quadratic_constraint('q2').name, 'q2')"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_objective_handling,test_objective_handling,approximate,584,"self.assertEqual(obj.sense, QuadraticObjective.Sense.MINIMIZE)"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_objective_handling,test_objective_handling,approximate,585,"self.assertEqual(obj.constant, 0)"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_objective_handling,test_objective_handling,approximate,586,"self.assertDictEqual(obj.linear.to_dict(), {})"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_objective_handling,test_objective_handling,approximate,587,"self.assertDictEqual(obj.quadratic.to_dict(), {})"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_objective_handling,test_objective_handling,approximate,590,"self.assertEqual(obj.sense, QuadraticObjective.Sense.MAXIMIZE)"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_objective_handling,test_objective_handling,approximate,591,"self.assertEqual(obj.constant, 1)"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_objective_handling,test_objective_handling,approximate,592,"self.assertDictEqual(obj.linear.to_dict(), {1: 1})"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_objective_handling,test_objective_handling,approximate,593,"self.assertDictEqual(obj.linear.to_dict(use_name=True), {'y': 1})"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_objective_handling,test_objective_handling,approximate,594,"self.assertListEqual(obj.linear.to_array().tolist(), [0, 1, 0])"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_objective_handling,test_objective_handling,approximate,595,"self.assertDictEqual(obj.quadratic.to_dict(), {(0, 2): 1, (1, 1): 1})"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_objective_handling,test_objective_handling,approximate,596,"self.assertDictEqual(obj.quadratic.to_dict(symmetric=True), {(0, 2): 0.5, (2, 0): 0.5, (1, 1): 1})"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_objective_handling,test_objective_handling,approximate,598,"self.assertDictEqual(obj.quadratic.to_dict(use_name=True), {('x', 'z'): 1, ('y', 'y'): 1})"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_objective_handling,test_objective_handling,approximate,600,"self.assertDictEqual(obj.quadratic.to_dict(use_name=True, symmetric=True), {('x', 'z'): 0.5, ('z', 'x'): 0.5, ('y', 'y'): 1})"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_objective_handling,test_objective_handling,approximate,602,"self.assertListEqual(obj.quadratic.to_array().tolist(), [[0, 0, 1], [0, 1, 0], [0, 0, 0]])"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_objective_handling,test_objective_handling,approximate,604,"self.assertListEqual(obj.quadratic.to_array(symmetric=True).tolist(), [[0, 0, 0.5], [0, 1, 0], [0.5, 0, 0]])"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_docplex,test_docplex,approximate,735,"self.assertEqual(q_p.export_as_lp_string(), q_p2.export_as_lp_string())"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_docplex,test_docplex,approximate,744,"self.assertEqual(q_p.export_as_lp_string(), mod.export_as_lp_string())"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_docplex,test_docplex,approximate,793,"self.assertListEqual(var_names, ['x0', 'x1', 'x2'])"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_substitute_variables,test_substitute_variables,approximate,817,"self.assertEqual(q_p2.status, QuadraticProgram.Status.INFEASIBLE)"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_substitute_variables,test_substitute_variables,approximate,819,"self.assertEqual(q_p2.status, QuadraticProgram.Status.INFEASIBLE)"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_substitute_variables,test_substitute_variables,approximate,821,"self.assertEqual(q_p2.status, QuadraticProgram.Status.INFEASIBLE)"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_substitute_variables,test_substitute_variables,approximate,823,"self.assertEqual(q_p2.status, QuadraticProgram.Status.VALID)"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_substitute_variables,test_substitute_variables,approximate,826,"self.assertEqual(q_p2.status, QuadraticProgram.Status.VALID)"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_substitute_variables,test_substitute_variables,approximate,827,"self.assertDictEqual(q_p2.objective.linear.to_dict(use_name=True), {'y': 2})"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_substitute_variables,test_substitute_variables,approximate,828,"self.assertDictEqual(q_p2.objective.quadratic.to_dict(use_name=True), {('z', 'z'): 2})"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_substitute_variables,test_substitute_variables,approximate,829,"self.assertEqual(q_p2.objective.constant, 1)"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_substitute_variables,test_substitute_variables,approximate,830,"self.assertEqual(len(q_p2.linear_constraints), 1)"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_substitute_variables,test_substitute_variables,approximate,831,"self.assertEqual(len(q_p2.quadratic_constraints), 1)"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_substitute_variables,test_substitute_variables,approximate,834,"self.assertDictEqual(cst.linear.to_dict(use_name=True), {'z': (- 1)})"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_substitute_variables,test_substitute_variables,approximate,835,"self.assertEqual(cst.sense.name, 'EQ')"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_substitute_variables,test_substitute_variables,approximate,836,"self.assertEqual(cst.rhs, 1)"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_substitute_variables,test_substitute_variables,approximate,839,"self.assertDictEqual(cst.linear.to_dict(use_name=True), {'z': (- 1)})"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_substitute_variables,test_substitute_variables,approximate,840,"self.assertDictEqual(cst.quadratic.to_dict(use_name=True), {('y', 'z'): 3})"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_substitute_variables,test_substitute_variables,approximate,841,"self.assertEqual(cst.sense.name, 'LE')"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_substitute_variables,test_substitute_variables,approximate,842,"self.assertEqual(cst.rhs, (- 1))"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_substitute_variables,test_substitute_variables,approximate,845,"self.assertEqual(q_p2.status, QuadraticProgram.Status.VALID)"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_substitute_variables,test_substitute_variables,approximate,846,"self.assertDictEqual(q_p2.objective.linear.to_dict(use_name=True), {'x': 1, 'y': 2})"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_substitute_variables,test_substitute_variables,approximate,847,"self.assertDictEqual(q_p2.objective.quadratic.to_dict(use_name=True), {('x', 'y'): (- 1)})"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_substitute_variables,test_substitute_variables,approximate,848,"self.assertEqual(q_p2.objective.constant, 3)"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_substitute_variables,test_substitute_variables,approximate,849,"self.assertEqual(len(q_p2.linear_constraints), 2)"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_substitute_variables,test_substitute_variables,approximate,850,"self.assertEqual(len(q_p2.quadratic_constraints), 0)"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_substitute_variables,test_substitute_variables,approximate,853,"self.assertDictEqual(cst.linear.to_dict(use_name=True), {'x': 2})"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_substitute_variables,test_substitute_variables,approximate,854,"self.assertEqual(cst.sense.name, 'EQ')"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_substitute_variables,test_substitute_variables,approximate,855,"self.assertEqual(cst.rhs, 0)"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_substitute_variables,test_substitute_variables,approximate,858,"self.assertDictEqual(cst.linear.to_dict(use_name=True), {'x': 2, 'y': (- 3)})"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_substitute_variables,test_substitute_variables,approximate,859,"self.assertEqual(cst.sense.name, 'LE')"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_substitute_variables,test_substitute_variables,approximate,860,"self.assertEqual(cst.rhs, (- 2))"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_substitute_variables,test_substitute_variables,approximate,863,"self.assertEqual(q_p2.status, QuadraticProgram.Status.VALID)"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_substitute_variables,test_substitute_variables,approximate,864,"self.assertDictEqual(q_p2.objective.linear.to_dict(use_name=True), {})"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_substitute_variables,test_substitute_variables,approximate,865,"self.assertDictEqual(q_p2.objective.quadratic.to_dict(use_name=True), {('x', 'x'): 0.5, ('z', 'z'): 2})"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_substitute_variables,test_substitute_variables,approximate,867,"self.assertEqual(q_p2.objective.constant, 1)"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_substitute_variables,test_substitute_variables,approximate,868,"self.assertEqual(len(q_p2.linear_constraints), 1)"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_substitute_variables,test_substitute_variables,approximate,869,"self.assertEqual(len(q_p2.quadratic_constraints), 1)"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_substitute_variables,test_substitute_variables,approximate,872,"self.assertDictEqual(cst.linear.to_dict(use_name=True), {'x': 2, 'z': (- 1)})"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_substitute_variables,test_substitute_variables,approximate,873,"self.assertEqual(cst.sense.name, 'EQ')"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_substitute_variables,test_substitute_variables,approximate,874,"self.assertEqual(cst.rhs, 1)"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_substitute_variables,test_substitute_variables,approximate,877,"self.assertDictEqual(cst.linear.to_dict(use_name=True), {'x': 2, 'z': (- 1)})"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_substitute_variables,test_substitute_variables,approximate,878,"self.assertDictEqual(cst.quadratic.to_dict(use_name=True), {('x', 'z'): (- 1.5)})"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_substitute_variables,test_substitute_variables,approximate,879,"self.assertEqual(cst.sense.name, 'LE')"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_substitute_variables,test_substitute_variables,approximate,880,"self.assertEqual(cst.rhs, (- 1))"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_feasibility,test_feasibility,approximate,898,"self.assertTrue(q_p.is_feasible([0, 5]))"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_feasibility,test_feasibility,approximate,899,"self.assertFalse(q_p.is_feasible([1, 10]))"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_feasibility,test_feasibility,approximate,900,"self.assertFalse(q_p.is_feasible([1, (- 12)]))"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_feasibility,test_feasibility,approximate,901,"self.assertFalse(q_p.is_feasible([1, 5]))"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_feasibility,test_feasibility,approximate,902,"self.assertFalse(q_p.is_feasible([5, 0]))"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_feasibility,test_feasibility,approximate,903,"self.assertFalse(q_p.is_feasible([1, 1]))"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_feasibility,test_feasibility,approximate,904,"self.assertFalse(q_p.is_feasible([0, 0]))"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_feasibility,test_feasibility,approximate,907,self.assertFalse(feasible)
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_feasibility,test_feasibility,approximate,908,self.assertIsNotNone(variables)
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_feasibility,test_feasibility,approximate,909,"self.assertEqual(1, len(variables))"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_feasibility,test_feasibility,approximate,910,"self.assertEqual('x', variables[0].name)"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_feasibility,test_feasibility,approximate,912,self.assertIsNotNone(constraints)
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_feasibility,test_feasibility,approximate,913,"self.assertEqual(3, len(constraints))"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_feasibility,test_feasibility,approximate,914,"self.assertEqual('c2', constraints[0].name)"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_feasibility,test_feasibility,approximate,915,"self.assertEqual('c3', constraints[1].name)"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_program.py,test_feasibility,test_feasibility,approximate,916,"self.assertEqual('c5', constraints[2].name)"
task2results/qiskit-aqua-main/test/optimization/test_cplex_optimizer.py,test_cplex_optimizer,test_cplex_optimizer,approximate,54,"self.assertAlmostEqual(result.fval, fval)"
task2results/qiskit-aqua-main/test/optimization/test_admm.py,test_admm_maximization,test_admm_maximization,approximate,40,self.assertIsNotNone(solution)
task2results/qiskit-aqua-main/test/optimization/test_admm.py,test_admm_maximization,test_admm_maximization,approximate,41,"self.assertIsInstance(solution, ADMMOptimizationResult)"
task2results/qiskit-aqua-main/test/optimization/test_admm.py,test_admm_maximization,test_admm_maximization,approximate,43,self.assertIsNotNone(solution.x)
task2results/qiskit-aqua-main/test/optimization/test_admm.py,test_admm_maximization,test_admm_maximization,approximate,45,self.assertIsNotNone(solution.fval)
task2results/qiskit-aqua-main/test/optimization/test_admm.py,test_admm_maximization,test_admm_maximization,approximate,47,self.assertIsNotNone(solution.state)
task2results/qiskit-aqua-main/test/optimization/test_admm.py,test_admm_maximization,test_admm_maximization,approximate,48,"self.assertIsInstance(solution.state, ADMMState)"
task2results/qiskit-aqua-main/test/optimization/test_admm.py,test_admm_maximization,test_admm_maximization,approximate,49,"self.assertEqual(len(solution.samples), 1)"
task2results/qiskit-aqua-main/test/optimization/test_admm.py,test_admm_maximization,test_admm_maximization,approximate,50,"self.assertAlmostEqual(solution.fval, solution.samples[0].fval)"
task2results/qiskit-aqua-main/test/optimization/test_admm.py,test_admm_maximization,test_admm_maximization,approximate,52,"self.assertEqual(solution.status, solution.samples[0].status)"
task2results/qiskit-aqua-main/test/optimization/test_admm.py,test_admm_maximization,test_admm_maximization,approximate,53,"self.assertAlmostEqual(solution.samples[0].probability, 1.0)"
task2results/qiskit-aqua-main/test/optimization/test_admm.py,test_admm_ex4,test_admm_ex4,approximate,84,self.assertIsNotNone(solution)
task2results/qiskit-aqua-main/test/optimization/test_admm.py,test_admm_ex4,test_admm_ex4,approximate,85,"self.assertIsInstance(solution, ADMMOptimizationResult)"
task2results/qiskit-aqua-main/test/optimization/test_admm.py,test_admm_ex4,test_admm_ex4,approximate,86,self.assertIsNotNone(solution.x)
task2results/qiskit-aqua-main/test/optimization/test_admm.py,test_admm_ex4,test_admm_ex4,approximate,88,self.assertIsNotNone(solution.fval)
task2results/qiskit-aqua-main/test/optimization/test_admm.py,test_admm_ex4,test_admm_ex4,approximate,90,self.assertIsNotNone(solution.state)
task2results/qiskit-aqua-main/test/optimization/test_admm.py,test_admm_ex4,test_admm_ex4,approximate,91,"self.assertIsInstance(solution.state, ADMMState)"
task2results/qiskit-aqua-main/test/optimization/test_admm.py,test_admm_ex4_no_bin_var_in_objective,test_admm_ex4_no_bin_var_in_objective,approximate,122,self.assertIsNotNone(solution)
task2results/qiskit-aqua-main/test/optimization/test_admm.py,test_admm_ex4_no_bin_var_in_objective,test_admm_ex4_no_bin_var_in_objective,approximate,123,"self.assertIsInstance(solution, ADMMOptimizationResult)"
task2results/qiskit-aqua-main/test/optimization/test_admm.py,test_admm_ex4_no_bin_var_in_objective,test_admm_ex4_no_bin_var_in_objective,approximate,124,self.assertIsNotNone(solution.x)
task2results/qiskit-aqua-main/test/optimization/test_admm.py,test_admm_ex4_no_bin_var_in_objective,test_admm_ex4_no_bin_var_in_objective,approximate,126,self.assertIsNotNone(solution.fval)
task2results/qiskit-aqua-main/test/optimization/test_admm.py,test_admm_ex4_no_bin_var_in_objective,test_admm_ex4_no_bin_var_in_objective,approximate,128,self.assertIsNotNone(solution.state)
task2results/qiskit-aqua-main/test/optimization/test_admm.py,test_admm_ex4_no_bin_var_in_objective,test_admm_ex4_no_bin_var_in_objective,approximate,129,"self.assertIsInstance(solution.state, ADMMState)"
task2results/qiskit-aqua-main/test/optimization/test_admm.py,test_admm_ex5,test_admm_ex5,approximate,160,self.assertIsNotNone(solution)
task2results/qiskit-aqua-main/test/optimization/test_admm.py,test_admm_ex5,test_admm_ex5,approximate,161,"self.assertIsInstance(solution, ADMMOptimizationResult)"
task2results/qiskit-aqua-main/test/optimization/test_admm.py,test_admm_ex5,test_admm_ex5,approximate,162,self.assertIsNotNone(solution.x)
task2results/qiskit-aqua-main/test/optimization/test_admm.py,test_admm_ex5,test_admm_ex5,approximate,164,self.assertIsNotNone(solution.fval)
task2results/qiskit-aqua-main/test/optimization/test_admm.py,test_admm_ex5,test_admm_ex5,approximate,166,self.assertIsNotNone(solution.state)
task2results/qiskit-aqua-main/test/optimization/test_admm.py,test_admm_ex5,test_admm_ex5,approximate,167,"self.assertIsInstance(solution.state, ADMMState)"
task2results/qiskit-aqua-main/test/optimization/test_admm.py,test_admm_ex5_warm_start,test_admm_ex5_warm_start,approximate,194,self.assertIsNotNone(solution)
task2results/qiskit-aqua-main/test/optimization/test_admm.py,test_admm_ex5_warm_start,test_admm_ex5_warm_start,approximate,195,"self.assertIsInstance(solution, ADMMOptimizationResult)"
task2results/qiskit-aqua-main/test/optimization/test_admm.py,test_admm_ex5_warm_start,test_admm_ex5_warm_start,approximate,196,self.assertIsNotNone(solution.x)
task2results/qiskit-aqua-main/test/optimization/test_admm.py,test_admm_ex5_warm_start,test_admm_ex5_warm_start,approximate,198,self.assertIsNotNone(solution.fval)
task2results/qiskit-aqua-main/test/optimization/test_admm.py,test_admm_ex5_warm_start,test_admm_ex5_warm_start,approximate,200,self.assertIsNotNone(solution.state)
task2results/qiskit-aqua-main/test/optimization/test_admm.py,test_admm_ex5_warm_start,test_admm_ex5_warm_start,approximate,201,"self.assertIsInstance(solution.state, ADMMState)"
task2results/qiskit-aqua-main/test/optimization/test_admm.py,test_admm_ex6,test_admm_ex6,approximate,233,self.assertIsNotNone(solution)
task2results/qiskit-aqua-main/test/optimization/test_admm.py,test_admm_ex6,test_admm_ex6,approximate,234,"self.assertIsInstance(solution, ADMMOptimizationResult)"
task2results/qiskit-aqua-main/test/optimization/test_admm.py,test_admm_ex6,test_admm_ex6,approximate,235,self.assertIsNotNone(solution.x)
task2results/qiskit-aqua-main/test/optimization/test_admm.py,test_admm_ex6,test_admm_ex6,approximate,237,self.assertIsNotNone(solution.fval)
task2results/qiskit-aqua-main/test/optimization/test_admm.py,test_admm_ex6,test_admm_ex6,approximate,239,self.assertIsNotNone(solution.state)
task2results/qiskit-aqua-main/test/optimization/test_admm.py,test_admm_ex6,test_admm_ex6,approximate,240,"self.assertIsInstance(solution.state, ADMMState)"
task2results/qiskit-aqua-main/test/optimization/test_admm.py,test_admm_ex6_max,test_admm_ex6_max,approximate,269,self.assertIsNotNone(solution)
task2results/qiskit-aqua-main/test/optimization/test_admm.py,test_admm_ex6_max,test_admm_ex6_max,approximate,270,"self.assertIsInstance(solution, ADMMOptimizationResult)"
task2results/qiskit-aqua-main/test/optimization/test_admm.py,test_admm_ex6_max,test_admm_ex6_max,approximate,271,self.assertIsNotNone(solution.x)
task2results/qiskit-aqua-main/test/optimization/test_admm.py,test_admm_ex6_max,test_admm_ex6_max,approximate,273,self.assertIsNotNone(solution.fval)
task2results/qiskit-aqua-main/test/optimization/test_admm.py,test_admm_ex6_max,test_admm_ex6_max,approximate,275,self.assertIsNotNone(solution.state)
task2results/qiskit-aqua-main/test/optimization/test_admm.py,test_admm_ex6_max,test_admm_ex6_max,approximate,276,"self.assertIsInstance(solution.state, ADMMState)"
task2results/qiskit-aqua-main/test/optimization/test_admm.py,test_equality_constraints_with_continuous_variables,test_equality_constraints_with_continuous_variables,approximate,302,self.assertIsNotNone(solution)
task2results/qiskit-aqua-main/test/optimization/test_admm.py,test_equality_constraints_with_continuous_variables,test_equality_constraints_with_continuous_variables,approximate,303,"self.assertIsInstance(solution, ADMMOptimizationResult)"
task2results/qiskit-aqua-main/test/optimization/test_admm.py,test_equality_constraints_with_continuous_variables,test_equality_constraints_with_continuous_variables,approximate,304,self.assertIsNotNone(solution.x)
task2results/qiskit-aqua-main/test/optimization/test_admm.py,test_equality_constraints_with_continuous_variables,test_equality_constraints_with_continuous_variables,approximate,306,self.assertIsNotNone(solution.fval)
task2results/qiskit-aqua-main/test/optimization/test_admm.py,test_equality_constraints_with_continuous_variables,test_equality_constraints_with_continuous_variables,approximate,308,self.assertIsNotNone(solution.state)
task2results/qiskit-aqua-main/test/optimization/test_admm.py,test_equality_constraints_with_continuous_variables,test_equality_constraints_with_continuous_variables,approximate,309,"self.assertIsInstance(solution.state, ADMMState)"
task2results/qiskit-aqua-main/test/optimization/test_admm.py,test_quad_constraints,test_quad_constraints,approximate,333,self.assertIsNotNone(solution)
task2results/qiskit-aqua-main/test/optimization/test_admm.py,test_quad_constraints,test_quad_constraints,approximate,334,"self.assertIsInstance(solution, ADMMOptimizationResult)"
task2results/qiskit-aqua-main/test/optimization/test_admm.py,test_quad_constraints,test_quad_constraints,approximate,335,self.assertIsNotNone(solution.x)
task2results/qiskit-aqua-main/test/optimization/test_admm.py,test_quad_constraints,test_quad_constraints,approximate,337,self.assertIsNotNone(solution.fval)
task2results/qiskit-aqua-main/test/optimization/test_admm.py,test_quad_constraints,test_quad_constraints,approximate,339,self.assertIsNotNone(solution.state)
task2results/qiskit-aqua-main/test/optimization/test_admm.py,test_quad_constraints,test_quad_constraints,approximate,340,"self.assertIsInstance(solution.state, ADMMState)"
task2results/qiskit-aqua-main/test/optimization/test_admm.py,test_admm_setters_getters,test_admm_setters_getters,approximate,345,"self.assertEqual(optimizer.parameters.maxiter, 10)"
task2results/qiskit-aqua-main/test/optimization/test_admm.py,test_admm_setters_getters,test_admm_setters_getters,approximate,348,"self.assertEqual(optimizer.parameters.maxiter, 11)"
task2results/qiskit-aqua-main/test/optimization/test_admm.py,test_admm_setters_getters,test_admm_setters_getters,approximate,352,"self.assertEqual(optimizer.parameters.maxiter, 12)"
task2results/qiskit-aqua-main/test/optimization/test_admm.py,test_integer_variables,test_integer_variables,approximate,368,self.assertIsNotNone(solution)
task2results/qiskit-aqua-main/test/optimization/test_admm.py,test_integer_variables,test_integer_variables,approximate,369,"self.assertIsInstance(solution, ADMMOptimizationResult)"
task2results/qiskit-aqua-main/test/optimization/test_admm.py,test_integer_variables,test_integer_variables,approximate,370,self.assertIsNotNone(solution.x)
task2results/qiskit-aqua-main/test/optimization/test_admm.py,test_integer_variables,test_integer_variables,approximate,372,self.assertIsNotNone(solution.fval)
task2results/qiskit-aqua-main/test/optimization/test_admm.py,test_integer_variables,test_integer_variables,approximate,374,self.assertIsNotNone(solution.state)
task2results/qiskit-aqua-main/test/optimization/test_admm.py,test_integer_variables,test_integer_variables,approximate,375,"self.assertIsInstance(solution.state, ADMMState)"
task2results/qiskit-aqua-main/test/optimization/test_linear_constraint.py,test_init,test_init,approximate,33,"self.assertEqual(quadratic_program.get_num_linear_constraints(), 0)"
task2results/qiskit-aqua-main/test/optimization/test_linear_constraint.py,test_init,test_init,approximate,39,"self.assertEqual(quadratic_program.get_num_linear_constraints(), 1)"
task2results/qiskit-aqua-main/test/optimization/test_linear_constraint.py,test_init,test_init,approximate,40,"self.assertEqual(quadratic_program.linear_constraints[0].name, 'c0')"
task2results/qiskit-aqua-main/test/optimization/test_linear_constraint.py,test_init,test_init,approximate,41,"self.assertEqual(len(quadratic_program.linear_constraints[0].linear.to_dict()), 0)"
task2results/qiskit-aqua-main/test/optimization/test_linear_constraint.py,test_init,test_init,approximate,42,"self.assertEqual(quadratic_program.linear_constraints[0].sense, Constraint.Sense.EQ)"
task2results/qiskit-aqua-main/test/optimization/test_linear_constraint.py,test_init,test_init,approximate,43,"self.assertEqual(quadratic_program.linear_constraints[0].rhs, 0.0)"
task2results/qiskit-aqua-main/test/optimization/test_linear_constraint.py,test_init,test_init,approximate,44,"self.assertEqual(quadratic_program.linear_constraints[0], quadratic_program.get_linear_constraint('c0'))"
task2results/qiskit-aqua-main/test/optimization/test_linear_constraint.py,test_init,test_init,approximate,46,"self.assertEqual(quadratic_program.linear_constraints[0], quadratic_program.get_linear_constraint(0))"
task2results/qiskit-aqua-main/test/optimization/test_linear_constraint.py,test_init,test_init,approximate,53,"self.assertEqual(quadratic_program.get_num_linear_constraints(), 2)"
task2results/qiskit-aqua-main/test/optimization/test_linear_constraint.py,test_init,test_init,approximate,54,"self.assertEqual(quadratic_program.linear_constraints[1].name, 'c1')"
task2results/qiskit-aqua-main/test/optimization/test_linear_constraint.py,test_init,test_init,approximate,55,self.assertTrue((quadratic_program.linear_constraints[1].linear.to_array() == coefficients).all())
task2results/qiskit-aqua-main/test/optimization/test_linear_constraint.py,test_init,test_init,approximate,57,"self.assertEqual(quadratic_program.linear_constraints[1].sense, Constraint.Sense.EQ)"
task2results/qiskit-aqua-main/test/optimization/test_linear_constraint.py,test_init,test_init,approximate,58,"self.assertEqual(quadratic_program.linear_constraints[1].rhs, 1.0)"
task2results/qiskit-aqua-main/test/optimization/test_linear_constraint.py,test_init,test_init,approximate,59,"self.assertEqual(quadratic_program.linear_constraints[1], quadratic_program.get_linear_constraint('c1'))"
task2results/qiskit-aqua-main/test/optimization/test_linear_constraint.py,test_init,test_init,approximate,61,"self.assertEqual(quadratic_program.linear_constraints[1], quadratic_program.get_linear_constraint(1))"
task2results/qiskit-aqua-main/test/optimization/test_linear_constraint.py,test_init,test_init,approximate,66,"self.assertEqual(quadratic_program.get_num_linear_constraints(), 3)"
task2results/qiskit-aqua-main/test/optimization/test_linear_constraint.py,test_init,test_init,approximate,67,"self.assertEqual(quadratic_program.linear_constraints[2].name, 'c2')"
task2results/qiskit-aqua-main/test/optimization/test_linear_constraint.py,test_init,test_init,approximate,68,"self.assertEqual(len(quadratic_program.linear_constraints[2].linear.to_dict()), 0)"
task2results/qiskit-aqua-main/test/optimization/test_linear_constraint.py,test_init,test_init,approximate,70,"self.assertEqual(quadratic_program.linear_constraints[2].sense, Constraint.Sense.GE)"
task2results/qiskit-aqua-main/test/optimization/test_linear_constraint.py,test_init,test_init,approximate,71,"self.assertEqual(quadratic_program.linear_constraints[2].rhs, 0.0)"
task2results/qiskit-aqua-main/test/optimization/test_linear_constraint.py,test_init,test_init,approximate,72,"self.assertEqual(quadratic_program.linear_constraints[2], quadratic_program.get_linear_constraint('c2'))"
task2results/qiskit-aqua-main/test/optimization/test_linear_constraint.py,test_init,test_init,approximate,74,"self.assertEqual(quadratic_program.linear_constraints[2], quadratic_program.get_linear_constraint(2))"
task2results/qiskit-aqua-main/test/optimization/test_linear_constraint.py,test_init,test_init,approximate,81,"self.assertEqual(quadratic_program.get_num_linear_constraints(), 4)"
task2results/qiskit-aqua-main/test/optimization/test_linear_constraint.py,test_init,test_init,approximate,82,"self.assertEqual(quadratic_program.linear_constraints[3].name, 'c3')"
task2results/qiskit-aqua-main/test/optimization/test_linear_constraint.py,test_init,test_init,approximate,83,self.assertTrue((quadratic_program.linear_constraints[3].linear.to_array() == coefficients).all())
task2results/qiskit-aqua-main/test/optimization/test_linear_constraint.py,test_init,test_init,approximate,85,"self.assertEqual(quadratic_program.linear_constraints[3].sense, Constraint.Sense.GE)"
task2results/qiskit-aqua-main/test/optimization/test_linear_constraint.py,test_init,test_init,approximate,86,"self.assertEqual(quadratic_program.linear_constraints[3].rhs, 1.0)"
task2results/qiskit-aqua-main/test/optimization/test_linear_constraint.py,test_init,test_init,approximate,87,"self.assertEqual(quadratic_program.linear_constraints[3], quadratic_program.get_linear_constraint('c3'))"
task2results/qiskit-aqua-main/test/optimization/test_linear_constraint.py,test_init,test_init,approximate,89,"self.assertEqual(quadratic_program.linear_constraints[3], quadratic_program.get_linear_constraint(3))"
task2results/qiskit-aqua-main/test/optimization/test_linear_constraint.py,test_init,test_init,approximate,94,"self.assertEqual(quadratic_program.get_num_linear_constraints(), 5)"
task2results/qiskit-aqua-main/test/optimization/test_linear_constraint.py,test_init,test_init,approximate,95,"self.assertEqual(quadratic_program.linear_constraints[4].name, 'c4')"
task2results/qiskit-aqua-main/test/optimization/test_linear_constraint.py,test_init,test_init,approximate,96,"self.assertEqual(len(quadratic_program.linear_constraints[4].linear.to_dict()), 0)"
task2results/qiskit-aqua-main/test/optimization/test_linear_constraint.py,test_init,test_init,approximate,97,"self.assertEqual(quadratic_program.linear_constraints[4].sense, Constraint.Sense.LE)"
task2results/qiskit-aqua-main/test/optimization/test_linear_constraint.py,test_init,test_init,approximate,98,"self.assertEqual(quadratic_program.linear_constraints[4].rhs, 0.0)"
task2results/qiskit-aqua-main/test/optimization/test_linear_constraint.py,test_init,test_init,approximate,99,"self.assertEqual(quadratic_program.linear_constraints[4], quadratic_program.get_linear_constraint('c4'))"
task2results/qiskit-aqua-main/test/optimization/test_linear_constraint.py,test_init,test_init,approximate,101,"self.assertEqual(quadratic_program.linear_constraints[4], quadratic_program.get_linear_constraint(4))"
task2results/qiskit-aqua-main/test/optimization/test_linear_constraint.py,test_init,test_init,approximate,108,"self.assertEqual(quadratic_program.get_num_linear_constraints(), 6)"
task2results/qiskit-aqua-main/test/optimization/test_linear_constraint.py,test_init,test_init,approximate,109,"self.assertEqual(quadratic_program.linear_constraints[5].name, 'c5')"
task2results/qiskit-aqua-main/test/optimization/test_linear_constraint.py,test_init,test_init,approximate,110,self.assertTrue((quadratic_program.linear_constraints[5].linear.to_array() == coefficients).all())
task2results/qiskit-aqua-main/test/optimization/test_linear_constraint.py,test_init,test_init,approximate,112,"self.assertEqual(quadratic_program.linear_constraints[5].sense, Constraint.Sense.LE)"
task2results/qiskit-aqua-main/test/optimization/test_linear_constraint.py,test_init,test_init,approximate,113,"self.assertEqual(quadratic_program.linear_constraints[5].rhs, 1.0)"
task2results/qiskit-aqua-main/test/optimization/test_linear_constraint.py,test_init,test_init,approximate,114,"self.assertEqual(quadratic_program.linear_constraints[5], quadratic_program.get_linear_constraint('c5'))"
task2results/qiskit-aqua-main/test/optimization/test_linear_constraint.py,test_init,test_init,approximate,116,"self.assertEqual(quadratic_program.linear_constraints[5], quadratic_program.get_linear_constraint(5))"
task2results/qiskit-aqua-main/test/optimization/test_vertex_cover.py,test_vertex_cover,test_vertex_cover,approximate,67,"self.assertEqual(np.count_nonzero(sol), oracle)"
task2results/qiskit-aqua-main/test/optimization/test_vertex_cover.py,test_vertex_cover_vqe,test_vertex_cover_vqe,approximate,84,"self.assertEqual(np.count_nonzero(sol), oracle)"
task2results/qiskit-aqua-main/test/optimization/test_grover_optimizer.py,validate_results,validate_results,approximate,53,"self.assertEqual(comp_result.fval, results.fval)"
task2results/qiskit-aqua-main/test/optimization/test_grover_optimizer.py,validate_results,validate_results,approximate,54,"self.assertAlmostEqual(results.fval, results.intermediate_fval)"
task2results/qiskit-aqua-main/test/optimization/test_grover_optimizer.py,test_qubo_gas_int_zero,test_qubo_gas_int_zero,approximate,71,"self.assertEqual(results.fval, 0.0)"
task2results/qiskit-aqua-main/test/optimization/test_grover_optimizer.py,test_qubo_gas_int_zero,test_qubo_gas_int_zero,approximate,72,"self.assertAlmostEqual(results.fval, results.intermediate_fval)"
task2results/qiskit-aqua-main/test/optimization/test_grover_optimizer.py,test_qubo_gas_int_simple,test_qubo_gas_int_simple,approximate,91,self.assertIsNotNone(results.operation_counts)
task2results/qiskit-aqua-main/test/optimization/test_grover_optimizer.py,test_qubo_gas_int_simple,test_qubo_gas_int_simple,approximate,92,"self.assertEqual(results.n_input_qubits, 2)"
task2results/qiskit-aqua-main/test/optimization/test_grover_optimizer.py,test_qubo_gas_int_simple,test_qubo_gas_int_simple,approximate,93,"self.assertEqual(results.n_output_qubits, 4)"
task2results/qiskit-aqua-main/test/optimization/test_min_eigen_optimizer.py,test_converter_list,test_converter_list,approximate,148,"self.assertEqual(result.fval, 4)"
task2results/qiskit-aqua-main/test/optimization/test_min_eigen_optimizer.py,test_converter_list,test_converter_list,approximate,156,"self.assertEqual(result.fval, 4)"
task2results/qiskit-aqua-main/test/optimization/test_min_eigen_optimizer.py,test_samples,test_samples,approximate,181,"self.assertEqual(result.fval, opt_sol)"
task2results/qiskit-aqua-main/test/optimization/test_min_eigen_optimizer.py,test_samples,test_samples,approximate,182,"self.assertEqual(len(result.samples), 1)"
task2results/qiskit-aqua-main/test/optimization/test_min_eigen_optimizer.py,test_samples,test_samples,approximate,184,"self.assertAlmostEqual(result.samples[0].fval, opt_sol)"
task2results/qiskit-aqua-main/test/optimization/test_min_eigen_optimizer.py,test_samples,test_samples,approximate,185,"self.assertAlmostEqual(result.samples[0].probability, 1.0)"
task2results/qiskit-aqua-main/test/optimization/test_min_eigen_optimizer.py,test_samples,test_samples,approximate,186,"self.assertEqual(result.samples[0].status, SUCCESS)"
task2results/qiskit-aqua-main/test/optimization/test_min_eigen_optimizer.py,test_samples,test_samples,approximate,187,"self.assertEqual(len(result.raw_samples), 1)"
task2results/qiskit-aqua-main/test/optimization/test_min_eigen_optimizer.py,test_samples,test_samples,approximate,189,"self.assertAlmostEqual(result.raw_samples[0].fval, opt_sol)"
task2results/qiskit-aqua-main/test/optimization/test_min_eigen_optimizer.py,test_samples,test_samples,approximate,190,"self.assertAlmostEqual(result.raw_samples[0].probability, 1.0)"
task2results/qiskit-aqua-main/test/optimization/test_min_eigen_optimizer.py,test_samples,test_samples,approximate,191,"self.assertEqual(result.raw_samples[0].status, SUCCESS)"
task2results/qiskit-aqua-main/test/optimization/test_min_eigen_optimizer.py,test_samples,test_samples,approximate,196,"self.assertEqual(len(result.samples), 8)"
task2results/qiskit-aqua-main/test/optimization/test_min_eigen_optimizer.py,test_samples,test_samples,approximate,197,"self.assertEqual(len(result.raw_samples), 32)"
task2results/qiskit-aqua-main/test/optimization/test_min_eigen_optimizer.py,test_samples,test_samples,approximate,198,"self.assertAlmostEqual(sum((s.probability for s in result.samples)), 1)"
task2results/qiskit-aqua-main/test/optimization/test_min_eigen_optimizer.py,test_samples,test_samples,approximate,199,"self.assertAlmostEqual(sum((s.probability for s in result.raw_samples)), 1)"
task2results/qiskit-aqua-main/test/optimization/test_min_eigen_optimizer.py,test_samples,test_samples,approximate,200,"self.assertAlmostEqual(min((s.fval for s in result.samples)), 0)"
task2results/qiskit-aqua-main/test/optimization/test_min_eigen_optimizer.py,test_samples,test_samples,approximate,201,"self.assertAlmostEqual(min((s.fval for s in result.samples if (s.status == SUCCESS))), opt_sol)"
task2results/qiskit-aqua-main/test/optimization/test_min_eigen_optimizer.py,test_samples,test_samples,approximate,202,"self.assertAlmostEqual(min((s.fval for s in result.raw_samples)), opt_sol)"
task2results/qiskit-aqua-main/test/optimization/test_min_eigen_optimizer.py,test_samples,test_samples,approximate,206,"self.assertAlmostEqual(result.fval, result.samples[0].fval)"
task2results/qiskit-aqua-main/test/optimization/test_min_eigen_optimizer.py,test_samples,test_samples,approximate,207,"self.assertEqual(result.status, result.samples[0].status)"
task2results/qiskit-aqua-main/test/optimization/test_min_eigen_optimizer.py,test_samples,test_samples,approximate,220,"self.assertEqual(result.fval, opt_sol)"
task2results/qiskit-aqua-main/test/optimization/test_min_eigen_optimizer.py,test_samples,test_samples,approximate,221,"self.assertEqual(len(result.samples), 1)"
task2results/qiskit-aqua-main/test/optimization/test_min_eigen_optimizer.py,test_samples,test_samples,approximate,223,"self.assertAlmostEqual(result.samples[0].fval, opt_sol)"
task2results/qiskit-aqua-main/test/optimization/test_min_eigen_optimizer.py,test_samples,test_samples,approximate,224,"self.assertAlmostEqual(result.samples[0].probability, 1.0)"
task2results/qiskit-aqua-main/test/optimization/test_min_eigen_optimizer.py,test_samples,test_samples,approximate,225,"self.assertEqual(result.samples[0].status, SUCCESS)"
task2results/qiskit-aqua-main/test/optimization/test_min_eigen_optimizer.py,test_samples,test_samples,approximate,226,"self.assertEqual(len(result.raw_samples), 1)"
task2results/qiskit-aqua-main/test/optimization/test_min_eigen_optimizer.py,test_samples,test_samples,approximate,228,"self.assertAlmostEqual(result.raw_samples[0].fval, opt_sol)"
task2results/qiskit-aqua-main/test/optimization/test_min_eigen_optimizer.py,test_samples,test_samples,approximate,229,"self.assertAlmostEqual(result.raw_samples[0].probability, 1.0)"
task2results/qiskit-aqua-main/test/optimization/test_min_eigen_optimizer.py,test_samples,test_samples,approximate,230,"self.assertEqual(result.raw_samples[0].status, SUCCESS)"
task2results/qiskit-aqua-main/test/optimization/test_min_eigen_optimizer.py,test_samples,test_samples,approximate,235,"self.assertEqual(len(result.samples), 8)"
task2results/qiskit-aqua-main/test/optimization/test_min_eigen_optimizer.py,test_samples,test_samples,approximate,236,"self.assertEqual(len(result.raw_samples), 16)"
task2results/qiskit-aqua-main/test/optimization/test_min_eigen_optimizer.py,test_samples,test_samples,approximate,237,"self.assertAlmostEqual(sum((s.probability for s in result.samples)), 1)"
task2results/qiskit-aqua-main/test/optimization/test_min_eigen_optimizer.py,test_samples,test_samples,approximate,238,"self.assertAlmostEqual(sum((s.probability for s in result.raw_samples)), 1)"
task2results/qiskit-aqua-main/test/optimization/test_min_eigen_optimizer.py,test_samples,test_samples,approximate,239,"self.assertAlmostEqual(max((s.fval for s in result.samples)), 5)"
task2results/qiskit-aqua-main/test/optimization/test_min_eigen_optimizer.py,test_samples,test_samples,approximate,240,"self.assertAlmostEqual(max((s.fval for s in result.samples if (s.status == SUCCESS))), opt_sol)"
task2results/qiskit-aqua-main/test/optimization/test_min_eigen_optimizer.py,test_samples,test_samples,approximate,241,"self.assertAlmostEqual(max((s.fval for s in result.raw_samples)), opt_sol)"
task2results/qiskit-aqua-main/test/optimization/test_min_eigen_optimizer.py,test_samples,test_samples,approximate,245,"self.assertAlmostEqual(result.fval, result.samples[0].fval)"
task2results/qiskit-aqua-main/test/optimization/test_min_eigen_optimizer.py,test_samples,test_samples,approximate,246,"self.assertEqual(result.status, result.samples[0].status)"
task2results/qiskit-aqua-main/test/optimization/test_partition.py,test_partition_vqe,test_partition_vqe,approximate,56,"self.assertNotEqual(x[0], x[1])"
task2results/qiskit-aqua-main/test/optimization/test_partition.py,test_partition_vqe,test_partition_vqe,approximate,57,"self.assertNotEqual(x[2], x[1])"
task2results/qiskit-aqua-main/test/optimization/test_docplex.py,test_auto_define_penalty,test_auto_define_penalty,approximate,157,"self.assertEqual(actual, expected)"
task2results/qiskit-aqua-main/test/optimization/test_docplex.py,test_docplex_maxcut,test_docplex_maxcut,approximate,185,"self.assertAlmostEqual((result.eigenvalue.real + offset), (expected_result.eigenvalue.real + OFFSET_MAXCUT))"
task2results/qiskit-aqua-main/test/optimization/test_docplex.py,test_docplex_tsp,test_docplex_tsp,approximate,219,"self.assertAlmostEqual((result.eigenvalue.real + offset), (expected_result.eigenvalue.real + OFFSET_TSP))"
task2results/qiskit-aqua-main/test/optimization/test_docplex.py,test_docplex_integer_constraints,test_docplex_integer_constraints,approximate,238,"self.assertAlmostEqual((result.eigenvalue.real + offset), expected_result)"
task2results/qiskit-aqua-main/test/optimization/test_docplex.py,test_docplex_constant_and_quadratic_terms_in_object_function,test_docplex_constant_and_quadratic_terms_in_object_function,approximate,267,"self.assertAlmostEqual((result.eigenvalue.real + offset), expected_result)"
task2results/qiskit-aqua-main/test/optimization/test_docplex.py,test_constants_in_left_side_and_variables_in_right_side,test_constants_in_left_side_and_variables_in_right_side,approximate,283,"self.assertEqual((result['eigenvalue'] + offset), (- 2))"
task2results/qiskit-aqua-main/test/optimization/test_docplex.py,test_constants_in_left_side_and_variables_in_right_side,test_constants_in_left_side_and_variables_in_right_side,approximate,285,"self.assertListEqual(actual_sol, [0, 0, 0, 1])"
task2results/qiskit-aqua-main/test/optimization/test_exact_cover.py,test_exact_cover,test_exact_cover,approximate,64,"self.assertEqual(exact_cover.check_solution_satisfiability(ising_sol, self.list_of_subsets), oracle)"
task2results/qiskit-aqua-main/test/optimization/test_exact_cover.py,test_exact_cover_vqe,test_exact_cover_vqe,approximate,80,"self.assertEqual(exact_cover.check_solution_satisfiability(ising_sol, self.list_of_subsets), oracle)"
task2results/qiskit-aqua-main/test/optimization/test_clique.py,test_clique,test_clique,approximate,65,"self.assertEqual(clique.satisfy_or_not(ising_sol, self.w, self.k), oracle)"
task2results/qiskit-aqua-main/test/optimization/test_clique.py,test_clique_vqe,test_clique_vqe,approximate,81,"self.assertEqual(clique.satisfy_or_not(ising_sol, self.w, self.k), oracle)"
task2results/qiskit-aqua-main/test/optimization/test_variable.py,test_init,test_init,approximate,36,"self.assertEqual(variable.name, name)"
task2results/qiskit-aqua-main/test/optimization/test_variable.py,test_init,test_init,approximate,37,"self.assertEqual(variable.lowerbound, lowerbound)"
task2results/qiskit-aqua-main/test/optimization/test_variable.py,test_init,test_init,approximate,38,"self.assertEqual(variable.upperbound, upperbound)"
task2results/qiskit-aqua-main/test/optimization/test_variable.py,test_init,test_init,approximate,39,"self.assertEqual(variable.vartype, Variable.Type.INTEGER)"
task2results/qiskit-aqua-main/test/optimization/test_variable.py,test_init_default,test_init_default,approximate,49,"self.assertEqual(variable.name, name)"
task2results/qiskit-aqua-main/test/optimization/test_variable.py,test_init_default,test_init_default,approximate,50,"self.assertEqual(variable.lowerbound, 0)"
task2results/qiskit-aqua-main/test/optimization/test_variable.py,test_init_default,test_init_default,approximate,51,"self.assertEqual(variable.upperbound, INFINITY)"
task2results/qiskit-aqua-main/test/optimization/test_variable.py,test_init_default,test_init_default,approximate,52,"self.assertEqual(variable.vartype, Variable.Type.CONTINUOUS)"
task2results/qiskit-aqua-main/test/optimization/test_qaoa.py,test_qaoa,test_qaoa,approximate,91,"self.assertIn(''.join([str(int(i)) for i in graph_solution]), solutions)"
task2results/qiskit-aqua-main/test/optimization/test_qaoa.py,test_qaoa_qc_mixer,test_qaoa_qc_mixer,approximate,125,"self.assertIn(''.join([str(int(i)) for i in graph_solution]), solutions)"
task2results/qiskit-aqua-main/test/optimization/test_qaoa.py,test_qaoa_qc_mixer_many_parameters,test_qaoa_qc_mixer_many_parameters,approximate,149,"self.assertIn(''.join([str(int(i)) for i in graph_solution]), S1)"
task2results/qiskit-aqua-main/test/optimization/test_qaoa.py,test_qaoa_qc_mixer_no_parameters,test_qaoa_qc_mixer_no_parameters,approximate,169,self.assertIsNotNone(result.eigenstate)
task2results/qiskit-aqua-main/test/optimization/test_qaoa.py,test_qaoa_initial_state,test_qaoa_initial_state,approximate,281,"self.assertEqual(len(zero_circuits), len(custom_circuits))"
task2results/qiskit-aqua-main/test/optimization/test_slsqp.py,test_slsqp_optimizer,test_slsqp_optimizer,approximate,41,"self.assertAlmostEqual(result.fval, 5.875)"
task2results/qiskit-aqua-main/test/optimization/test_slsqp.py,test_slsqp_optimizer_full_output,test_slsqp_optimizer_full_output,approximate,56,"self.assertAlmostEqual(result.fval, 5.875)"
task2results/qiskit-aqua-main/test/optimization/test_slsqp.py,test_slsqp_optimizer_full_output,test_slsqp_optimizer_full_output,approximate,58,"self.assertAlmostEqual(result.fx, 5.875)"
task2results/qiskit-aqua-main/test/optimization/test_slsqp.py,test_slsqp_optimizer_full_output,test_slsqp_optimizer_full_output,approximate,59,"self.assertGreaterEqual(result.its, 1)"
task2results/qiskit-aqua-main/test/optimization/test_slsqp.py,test_slsqp_optimizer_full_output,test_slsqp_optimizer_full_output,approximate,60,"self.assertEqual(result.imode, 0)"
task2results/qiskit-aqua-main/test/optimization/test_slsqp.py,test_slsqp_optimizer_full_output,test_slsqp_optimizer_full_output,approximate,61,self.assertIsNotNone(result.smode)
task2results/qiskit-aqua-main/test/optimization/test_slsqp.py,test_slsqp_optimizer_full_output,test_slsqp_optimizer_full_output,approximate,62,"self.assertEqual(len(result.samples), 1)"
task2results/qiskit-aqua-main/test/optimization/test_slsqp.py,test_slsqp_optimizer_full_output,test_slsqp_optimizer_full_output,approximate,63,"self.assertAlmostEqual(result.fval, result.samples[0].fval)"
task2results/qiskit-aqua-main/test/optimization/test_slsqp.py,test_slsqp_optimizer_full_output,test_slsqp_optimizer_full_output,approximate,65,"self.assertEqual(result.status, result.samples[0].status)"
task2results/qiskit-aqua-main/test/optimization/test_slsqp.py,test_slsqp_optimizer_full_output,test_slsqp_optimizer_full_output,approximate,66,"self.assertAlmostEqual(result.samples[0].probability, 1.0)"
task2results/qiskit-aqua-main/test/optimization/test_slsqp.py,test_slsqp_unbounded,test_slsqp_unbounded,approximate,78,self.assertIsNotNone(solution)
task2results/qiskit-aqua-main/test/optimization/test_slsqp.py,test_slsqp_unbounded,test_slsqp_unbounded,approximate,79,self.assertIsNotNone(solution.x)
task2results/qiskit-aqua-main/test/optimization/test_slsqp.py,test_slsqp_unbounded,test_slsqp_unbounded,approximate,81,self.assertIsNotNone(solution.fval)
task2results/qiskit-aqua-main/test/optimization/test_slsqp.py,test_slsqp_unbounded_with_trials,test_slsqp_unbounded_with_trials,approximate,94,self.assertIsNotNone(solution)
task2results/qiskit-aqua-main/test/optimization/test_slsqp.py,test_slsqp_unbounded_with_trials,test_slsqp_unbounded_with_trials,approximate,95,self.assertIsNotNone(solution.x)
task2results/qiskit-aqua-main/test/optimization/test_slsqp.py,test_slsqp_unbounded_with_trials,test_slsqp_unbounded_with_trials,approximate,97,self.assertIsNotNone(solution.fval)
task2results/qiskit-aqua-main/test/optimization/test_slsqp.py,test_slsqp_bounded,test_slsqp_bounded,approximate,110,self.assertIsNotNone(solution)
task2results/qiskit-aqua-main/test/optimization/test_slsqp.py,test_slsqp_bounded,test_slsqp_bounded,approximate,111,self.assertIsNotNone(solution.x)
task2results/qiskit-aqua-main/test/optimization/test_slsqp.py,test_slsqp_bounded,test_slsqp_bounded,approximate,113,self.assertIsNotNone(solution.fval)
task2results/qiskit-aqua-main/test/optimization/test_slsqp.py,test_slsqp_equality,test_slsqp_equality,approximate,127,self.assertIsNotNone(solution)
task2results/qiskit-aqua-main/test/optimization/test_slsqp.py,test_slsqp_equality,test_slsqp_equality,approximate,128,self.assertIsNotNone(solution.x)
task2results/qiskit-aqua-main/test/optimization/test_slsqp.py,test_slsqp_equality,test_slsqp_equality,approximate,130,self.assertIsNotNone(solution.fval)
task2results/qiskit-aqua-main/test/optimization/test_slsqp.py,test_slsqp_inequality,test_slsqp_inequality,approximate,144,self.assertIsNotNone(solution)
task2results/qiskit-aqua-main/test/optimization/test_slsqp.py,test_slsqp_inequality,test_slsqp_inequality,approximate,145,self.assertIsNotNone(solution.x)
task2results/qiskit-aqua-main/test/optimization/test_slsqp.py,test_slsqp_inequality,test_slsqp_inequality,approximate,147,self.assertIsNotNone(solution.fval)
task2results/qiskit-aqua-main/test/optimization/test_slsqp.py,test_slsqp_optimizer_with_quadratic_constraint,test_slsqp_optimizer_with_quadratic_constraint,approximate,165,self.assertIsNotNone(solution)
task2results/qiskit-aqua-main/test/optimization/test_slsqp.py,test_slsqp_optimizer_with_quadratic_constraint,test_slsqp_optimizer_with_quadratic_constraint,approximate,166,self.assertIsNotNone(solution.x)
task2results/qiskit-aqua-main/test/optimization/test_slsqp.py,test_slsqp_optimizer_with_quadratic_constraint,test_slsqp_optimizer_with_quadratic_constraint,approximate,168,self.assertIsNotNone(solution.fval)
task2results/qiskit-aqua-main/test/optimization/test_slsqp.py,test_multistart_properties,test_multistart_properties,approximate,180,"self.assertEqual(trials, slsqp.trials)"
task2results/qiskit-aqua-main/test/optimization/test_slsqp.py,test_multistart_properties,test_multistart_properties,approximate,181,"self.assertAlmostEqual(clip, slsqp.clip)"
task2results/qiskit-aqua-main/test/optimization/test_slsqp.py,test_multistart_properties,test_multistart_properties,approximate,187,"self.assertEqual(trials, slsqp.trials)"
task2results/qiskit-aqua-main/test/optimization/test_slsqp.py,test_multistart_properties,test_multistart_properties,approximate,188,"self.assertAlmostEqual(clip, slsqp.clip)"
task2results/qiskit-aqua-main/test/optimization/test_graph_partition.py,test_graph_partition,test_graph_partition,approximate,66,"self.assertEqual(graph_partition.objective_value(np.array([0, 1, 0, 1]), self.w), graph_partition.objective_value(ising_sol, self.w))"
task2results/qiskit-aqua-main/test/optimization/test_graph_partition.py,test_graph_partition,test_graph_partition,approximate,69,"self.assertEqual(graph_partition.objective_value(x, self.w), oracle)"
task2results/qiskit-aqua-main/test/optimization/test_graph_partition.py,test_graph_partition_vqe,test_graph_partition_vqe,approximate,87,"self.assertEqual(graph_partition.objective_value(np.array([0, 1, 0, 1]), self.w), graph_partition.objective_value(ising_sol, self.w))"
task2results/qiskit-aqua-main/test/optimization/test_graph_partition.py,test_graph_partition_vqe,test_graph_partition_vqe,approximate,90,"self.assertEqual(graph_partition.objective_value(x, self.w), oracle)"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_expression.py,test_symmetric_set,test_symmetric_set,approximate,155,"self.assertDictEqual(quad.to_dict(use_name=True), {('x', 'y'): 1, ('x', 'z'): 3})"
task2results/qiskit-aqua-main/test/optimization/test_quadratic_expression.py,test_symmetric_set,test_symmetric_set,approximate,156,"self.assertDictEqual(quad.to_dict(symmetric=True, use_name=True), {('x', 'y'): 0.5, ('y', 'x'): 0.5, ('x', 'z'): 1.5, ('z', 'x'): 1.5})"
task2results/qiskit-aqua-main/test/optimization/test_tsp.py,test_tsp_get_solution,test_tsp_get_solution,approximate,49,"self.assertListEqual(tsp.get_tsp_solution(feasible), [0, 1, 2])"
task2results/qiskit-aqua-main/test/optimization/test_tsp.py,test_tsp_get_solution,test_tsp_get_solution,approximate,51,"self.assertListEqual(tsp.get_tsp_solution(infeasible), [[0, 1], 1, []])"
task2results/qiskit-aqua-main/test/optimization/test_stable_set.py,test_stable_set,test_stable_set,approximate,41,"self.assertAlmostEqual(result.eigenvalue.real, (- 2.5))"
task2results/qiskit-aqua-main/test/optimization/test_stable_set.py,test_stable_set,test_stable_set,approximate,42,"self.assertAlmostEqual((result.eigenvalue.real + self.offset), (- 3))"
task2results/qiskit-aqua-main/test/optimization/test_stable_set.py,test_stable_set,test_stable_set,approximate,45,"self.assertEqual(stable_set.stable_set_value(x, self.w), (3, True))"
task2results/qiskit-aqua-main/test/optimization/test_cobyla_optimizer.py,test_cobyla_optimizer,test_cobyla_optimizer,approximate,43,"self.assertAlmostEqual(result.fval, 5.875)"
task2results/qiskit-aqua-main/test/optimization/test_cobyla_optimizer.py,test_cobyla_optimizer_with_quadratic_constraint,test_cobyla_optimizer_with_quadratic_constraint,approximate,63,"self.assertAlmostEqual(result.fval, 1.0, places=2)"
task2results/qiskit-aqua-main/test/optimization/test_cobyla_optimizer.py,test_cobyla_optimizer_with_variable_bounds,test_cobyla_optimizer_with_variable_bounds,approximate,85,"self.assertAlmostEqual(result.x[0], (- 1.0), places=6)"
task2results/qiskit-aqua-main/test/optimization/test_cobyla_optimizer.py,test_cobyla_optimizer_with_variable_bounds,test_cobyla_optimizer_with_variable_bounds,approximate,86,"self.assertAlmostEqual(result.x[1], (- 2.0), places=6)"
task2results/qiskit-aqua-main/test/optimization/test_cobyla_optimizer.py,test_cobyla_optimizer_with_variable_bounds,test_cobyla_optimizer_with_variable_bounds,approximate,95,"self.assertAlmostEqual(result.x[0], 1.0, places=6)"
task2results/qiskit-aqua-main/test/optimization/test_cobyla_optimizer.py,test_cobyla_optimizer_with_variable_bounds,test_cobyla_optimizer_with_variable_bounds,approximate,96,"self.assertAlmostEqual(result.x[1], 2.0, places=6)"
task2results/qiskit-aqua-main/test/optimization/test_cobyla_optimizer.py,test_cobyla_optimizer_with_trials,test_cobyla_optimizer_with_trials,approximate,113,"self.assertAlmostEqual(result.fval, 5.875)"
task2results/qiskit-aqua-main/test/optimization/test_recursive_optimization.py,test_converter_list,test_converter_list,approximate,135,"self.assertEqual(result.fval, 4)"
task2results/qiskit-aqua-main/test/optimization/test_recursive_optimization.py,test_converter_list,test_converter_list,approximate,145,"self.assertEqual(result.fval, 4)"
task2results/qiskit-aqua-main/test/ml/test_ad_hoc_data.py,test_ad_hoc_data,test_ad_hoc_data,approximate,38,"self.assertDictEqual(class_to_label, {'A': 0, 'B': 1})"
task2results/qiskit-aqua-main/test/ml/test_wine.py,test_wine,test_wine,approximate,55,"self.assertDictEqual(class_to_label, {'A': 0, 'B': 1, 'C': 2})"
task2results/qiskit-aqua-main/test/ml/test_readme_sample.py,test_readme_sample,test_readme_sample,approximate,67,"self.assertGreater(result['testing_accuracy'], 0.8)"
task2results/qiskit-aqua-main/test/ml/circuit/library/test_raw_feature_vector.py,test_fully_bound,test_fully_bound,approximate,61,"self.assertEqual(bound, ref)"
task2results/qiskit-aqua-main/test/ml/circuit/library/test_raw_feature_vector.py,test_usage_in_vqc,test_usage_in_vqc,approximate,99,self.assertTrue((result['eval_count'] > 0))
task2results/qiskit-aqua-main/test/aqua/test_shor.py,test_shor_factoring,test_shor_factoring,approximate,36,"self.assertListEqual(result_dict['factors'][0], factors)"
task2results/qiskit-aqua-main/test/aqua/test_shor.py,test_shor_factoring,test_shor_factoring,approximate,37,self.assertTrue((result_dict['total_counts'] >= result_dict['successful_counts']))
task2results/qiskit-aqua-main/test/aqua/test_shor.py,test_shor_no_factors,test_shor_no_factors,approximate,46,self.assertTrue((ret['factors'] == []))
task2results/qiskit-aqua-main/test/aqua/test_shor.py,test_shor_no_factors,test_shor_no_factors,approximate,47,self.assertTrue((ret['successful_counts'] == 0))
task2results/qiskit-aqua-main/test/aqua/test_shor.py,test_shor_power,test_shor_power,approximate,61,self.assertTrue((ret['factors'] == [base]))
task2results/qiskit-aqua-main/test/aqua/test_shor.py,test_shor_power,test_shor_power,approximate,62,self.assertTrue((ret['total_counts'] >= ret['successful_counts']))
task2results/qiskit-aqua-main/test/aqua/test_shor.py,test_shor_modinv,test_shor_modinv,approximate,75,self.assertTrue((modinv == expected))
task2results/qiskit-aqua-main/test/aqua/test_qgan.py,test_qgan_training_cg,test_qgan_training_cg,approximate,123,"self.assertAlmostEqual(trained_qasm['rel_entr'], trained_statevector['rel_entr'], delta=0.1)"
task2results/qiskit-aqua-main/test/aqua/test_qgan.py,test_qgan_training_cobyla,test_qgan_training_cobyla,approximate,132,"self.assertAlmostEqual(trained_qasm['rel_entr'], trained_statevector['rel_entr'], delta=0.1)"
task2results/qiskit-aqua-main/test/aqua/test_qgan.py,test_qgan_training,test_qgan_training,approximate,142,"self.assertAlmostEqual(trained_qasm['rel_entr'], trained_statevector['rel_entr'], delta=0.1)"
task2results/qiskit-aqua-main/test/aqua/test_qgan.py,test_qgan_training_run_algo_numpy,test_qgan_training_run_algo_numpy,approximate,235,"self.assertAlmostEqual(trained_qasm['rel_entr'], trained_statevector['rel_entr'], delta=0.1)"
task2results/qiskit-aqua-main/test/aqua/test_qgan.py,test_qgan_save_model,test_qgan_save_model,approximate,262,"self.assertAlmostEqual(trained_qasm['rel_entr'], trained_statevector['rel_entr'], delta=0.1)"
task2results/qiskit-aqua-main/test/aqua/test_qgan.py,test_qgan_training_run_algo_numpy_multivariate,test_qgan_training_run_algo_numpy_multivariate,approximate,295,"self.assertAlmostEqual(trained_qasm['rel_entr'], trained_statevector['rel_entr'], delta=0.1)"
task2results/qiskit-aqua-main/test/aqua/test_qgan.py,test_qgan_training_analytic_gradients,test_qgan_training_analytic_gradients,approximate,304,"self.assertAlmostEqual(numeric_results['rel_entr'], analytic_results['rel_entr'], delta=0.1)"
task2results/qiskit-aqua-main/test/aqua/test_initial_state_custom.py,test_qubits_2_zero_circuit,test_qubits_2_zero_circuit,approximate,55,"self.assertEqual(cct.qasm(), 'OPENQASM 2.0;\ninclude ""qelib1.inc"";\nqreg q[2];\n')"
task2results/qiskit-aqua-main/test/aqua/test_initial_state_custom.py,test_qubits_5_zero_circuit,test_qubits_5_zero_circuit,approximate,61,"self.assertEqual(cct.qasm(), 'OPENQASM 2.0;\ninclude ""qelib1.inc"";\nqreg q[5];\n')"
task2results/qiskit-aqua-main/test/aqua/test_initial_state_custom.py,test_qubits_2_uniform_circuit,test_qubits_2_uniform_circuit,approximate,79,"self.assertEqual(cct.qasm(), 'OPENQASM 2.0;\ninclude ""qelib1.inc"";\nqreg q[2];\nh q[0];\nh q[1];\n')"
task2results/qiskit-aqua-main/test/aqua/test_initial_state_custom.py,test_qubits_2_random_vector,test_qubits_2_random_vector,approximate,88,"self.assertAlmostEqual(prob, 1.0)"
task2results/qiskit-aqua-main/test/aqua/test_initial_state_custom.py,test_qubits_5_random_vector,test_qubits_5_random_vector,approximate,95,"self.assertAlmostEqual(prob, 1.0)"
task2results/qiskit-aqua-main/test/aqua/test_initial_state_custom.py,test_qubits_5_randgiven_vector,test_qubits_5_randgiven_vector,approximate,115,"self.assertAlmostEqual(prob, 1.0)"
task2results/qiskit-aqua-main/test/aqua/test_rmg.py,test_random_unitary,test_random_unitary,approximate,32,"self.assertAlmostEqual(distance, 0, places=10)"
task2results/qiskit-aqua-main/test/aqua/test_rmg.py,test_random_hermitian,test_random_hermitian,approximate,40,"self.assertAlmostEqual(distance, 0, places=10)"
task2results/qiskit-aqua-main/test/aqua/test_custom_circuit_oracle.py,test_using_dj_with_constant_func,test_using_dj_with_constant_func,approximate,37,"self.assertEqual(result['result'], 'constant')"
task2results/qiskit-aqua-main/test/aqua/test_custom_circuit_oracle.py,test_using_dj_with_balanced_func,test_using_dj_with_balanced_func,approximate,50,"self.assertEqual(result['result'], 'balanced')"
task2results/qiskit-aqua-main/test/aqua/test_custom_circuit_oracle.py,test_using_grover_for_ccx,test_using_grover_for_ccx,approximate,72,"self.assertEqual(result.assignment, [1, 2])"
task2results/qiskit-aqua-main/test/aqua/test_grover.py,test_old_signature,test_old_signature,approximate,104,"self.assertEqual(ret.top_measurement, '11')"
task2results/qiskit-aqua-main/test/aqua/test_grover.py,test_oracle_quantumcircuit,test_oracle_quantumcircuit,approximate,122,self.assertTrue(Operator(grover_op).equiv(Operator(self._expected_grover_op)))
task2results/qiskit-aqua-main/test/aqua/test_grover.py,test_oracle_statevector,test_oracle_statevector,approximate,129,self.assertTrue(Operator(grover_op).equiv(Operator(self._expected_grover_op)))
task2results/qiskit-aqua-main/test/aqua/test_grover.py,test_state_preparation_quantumcircuit,test_state_preparation_quantumcircuit,approximate,141,self.assertTrue(Operator(grover_op).equiv(Operator(expected_grover_op)))
task2results/qiskit-aqua-main/test/aqua/test_grover.py,test_is_good_state_list,test_is_good_state_list,approximate,165,"self.assertListEqual(grover._is_good_state, ['11', '00'])"
task2results/qiskit-aqua-main/test/aqua/test_grover.py,test_is_good_state_statevector,test_is_good_state_statevector,approximate,173,self.assertTrue(grover._is_good_state.equiv(Statevector.from_label('11')))
task2results/qiskit-aqua-main/test/aqua/test_grover.py,test_grover_operator,test_grover_operator,approximate,183,self.assertTrue(Operator(grover_op).equiv(Operator(self._expected_grover_op)))
task2results/qiskit-aqua-main/test/aqua/test_grover.py,test_is_good_state,test_is_good_state,approximate,195,self.assertTrue(grover.is_good_state('11'))
task2results/qiskit-aqua-main/test/aqua/test_grover.py,test_is_good_state,test_is_good_state,approximate,199,self.assertTrue(grover.is_good_state('11'))
task2results/qiskit-aqua-main/test/aqua/test_grover.py,test_is_good_state,test_is_good_state,approximate,203,self.assertTrue(grover.is_good_state('11'))
task2results/qiskit-aqua-main/test/aqua/test_grover.py,test_is_good_state,test_is_good_state,approximate,211,self.assertTrue(grover.is_good_state('11'))
task2results/qiskit-aqua-main/test/aqua/test_grover.py,test_construct_circuit,test_construct_circuit,approximate,223,self.assertTrue(Operator(constructed).equiv(Operator(expected)))
task2results/qiskit-aqua-main/test/aqua/test_grover.py,test_post_processing,test_post_processing,approximate,235,"self.assertListEqual(grover.post_processing('11'), [1, 2])"
task2results/qiskit-aqua-main/test/aqua/test_grover.py,test_post_processing,test_post_processing,approximate,242,"self.assertEqual(grover.post_processing('11'), [0, 1])"
task2results/qiskit-aqua-main/test/aqua/test_grover.py,test_post_processing,test_post_processing,approximate,245,"self.assertEqual(grover.post_processing('11'), '11')"
task2results/qiskit-aqua-main/test/aqua/test_grover.py,test_grover_operator_getter,test_grover_operator_getter,approximate,254,self.assertTrue(Operator(constructed).equiv(Operator(expected)))
task2results/qiskit-aqua-main/test/aqua/test_grover.py,test_num_iteration,test_num_iteration,approximate,283,self.assertTrue(Operator(ret['circuit']).equiv(Operator(self._expected)))
task2results/qiskit-aqua-main/test/aqua/test_grover.py,test_iterations,test_iterations,approximate,289,self.assertTrue(Operator(ret['circuit']).equiv(Operator(self._expected)))
task2results/qiskit-aqua-main/test/aqua/test_grover.py,test_iterations,test_iterations,approximate,293,self.assertTrue(ret.oracle_evaluation)
task2results/qiskit-aqua-main/test/aqua/test_grover.py,test_iterations,test_iterations,approximate,294,"self.assertIn(ret.top_measurement, ['111'])"
task2results/qiskit-aqua-main/test/aqua/test_grover.py,test_run_circuit_oracle,test_run_circuit_oracle,approximate,312,"self.assertIn(ret['top_measurement'], list_good_state)"
task2results/qiskit-aqua-main/test/aqua/test_grover.py,test_run_state_vector_oracle,test_run_state_vector_oracle,approximate,319,"self.assertIn(ret['top_measurement'], ['11'])"
task2results/qiskit-aqua-main/test/aqua/test_grover.py,test_run_grover_operator_oracle,test_run_grover_operator_oracle,approximate,329,"self.assertIn(ret['top_measurement'], ['11'])"
task2results/qiskit-aqua-main/test/aqua/test_vqc.py,test_basic_aer_qasm,test_basic_aer_qasm,approximate,105,self.assertSimpleClassificationIsCorrect(vqc)
task2results/qiskit-aqua-main/test/aqua/test_vqc.py,test_plain_circuits,test_plain_circuits,approximate,113,self.assertSimpleClassificationIsCorrect(vqc)
task2results/qiskit-aqua-main/test/aqua/test_vqc.py,test_max_evals_grouped,test_max_evals_grouped,approximate,123,self.assertSimpleClassificationIsCorrect(vqc)
task2results/qiskit-aqua-main/test/aqua/test_vqc.py,test_minibatching_gradient_free,test_minibatching_gradient_free,approximate,157,"self.assertAlmostEqual(result['testing_accuracy'], 0.3333333333333333)"
task2results/qiskit-aqua-main/test/aqua/test_vqc.py,test_minibatching_gradient_based,test_minibatching_gradient_based,approximate,176,"self.assertAlmostEqual(result['testing_accuracy'], 0.75, places=3)"
task2results/qiskit-aqua-main/test/aqua/test_vqc.py,test_wine,test_wine,approximate,296,"self.assertGreater(result['testing_accuracy'], 0.3)"
task2results/qiskit-aqua-main/test/aqua/test_vqc.py,test_raw_feature_vector_on_wine,test_raw_feature_vector_on_wine,approximate,325,"self.assertGreater(result['testing_accuracy'], 0.7)"
task2results/qiskit-aqua-main/test/aqua/test_entangler_map.py,test_validate_entangler_map,test_validate_entangler_map,approximate,43,"self.assertTrue(validate_entangler_map(valid_map, 4))"
task2results/qiskit-aqua-main/test/aqua/test_entangler_map.py,test_validate_entangler_map,test_validate_entangler_map,approximate,46,"self.assertTrue(validate_entangler_map(valid_map_2, 4, True))"
task2results/qiskit-aqua-main/test/aqua/test_optimizers.py,test_adam,test_adam,approximate,43,"self.assertLessEqual(res[2], 10000)"
task2results/qiskit-aqua-main/test/aqua/test_optimizers.py,test_cg,test_cg,approximate,49,"self.assertLessEqual(res[2], 10000)"
task2results/qiskit-aqua-main/test/aqua/test_optimizers.py,test_cobyla,test_cobyla,approximate,55,"self.assertLessEqual(res[2], 100000)"
task2results/qiskit-aqua-main/test/aqua/test_optimizers.py,test_l_bfgs_b,test_l_bfgs_b,approximate,61,"self.assertLessEqual(res[2], 10000)"
task2results/qiskit-aqua-main/test/aqua/test_optimizers.py,test_p_bfgs,test_p_bfgs,approximate,67,"self.assertLessEqual(res[2], 10000)"
task2results/qiskit-aqua-main/test/aqua/test_optimizers.py,test_nelder_mead,test_nelder_mead,approximate,73,"self.assertLessEqual(res[2], 10000)"
task2results/qiskit-aqua-main/test/aqua/test_optimizers.py,test_powell,test_powell,approximate,79,"self.assertLessEqual(res[2], 10000)"
task2results/qiskit-aqua-main/test/aqua/test_optimizers.py,test_slsqp,test_slsqp,approximate,85,"self.assertLessEqual(res[2], 10000)"
task2results/qiskit-aqua-main/test/aqua/test_optimizers.py,test_spsa,test_spsa,approximate,92,"self.assertLessEqual(res[2], 100000)"
task2results/qiskit-aqua-main/test/aqua/test_optimizers.py,test_tnc,test_tnc,approximate,98,"self.assertLessEqual(res[2], 10000)"
task2results/qiskit-aqua-main/test/aqua/test_optimizers.py,test_gsls,test_gsls,approximate,108,"self.assertLessEqual(x_value, 0.01)"
task2results/qiskit-aqua-main/test/aqua/test_optimizers.py,test_gsls,test_gsls,approximate,109,"self.assertLessEqual(n_evals, 10000)"
task2results/qiskit-aqua-main/test/aqua/test_optimizer_nft.py,test_nft,test_nft,approximate,51,"self.assertAlmostEqual(result.eigenvalue.real, (- 1.857275), places=6)"
task2results/qiskit-aqua-main/test/aqua/test_sklearn_svm.py,test_multiclass_one_against_all,test_multiclass_one_against_all,approximate,210,"self.assertEqual(result['testing_accuracy'], 1.0)"
task2results/qiskit-aqua-main/test/aqua/test_sklearn_svm.py,test_multiclass_one_against_all,test_multiclass_one_against_all,approximate,211,"self.assertEqual(result['predicted_classes'], ['A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C'])"
task2results/qiskit-aqua-main/test/aqua/test_sklearn_svm.py,test_multiclass_all_pairs,test_multiclass_all_pairs,approximate,318,"self.assertEqual(result['testing_accuracy'], 1.0)"
task2results/qiskit-aqua-main/test/aqua/test_sklearn_svm.py,test_multiclass_all_pairs,test_multiclass_all_pairs,approximate,319,"self.assertEqual(result['predicted_classes'], ['A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C'])"
task2results/qiskit-aqua-main/test/aqua/test_sklearn_svm.py,test_multiclass_error_correcting_code,test_multiclass_error_correcting_code,approximate,426,"self.assertEqual(result['testing_accuracy'], 1.0)"
task2results/qiskit-aqua-main/test/aqua/test_sklearn_svm.py,test_multiclass_error_correcting_code,test_multiclass_error_correcting_code,approximate,427,"self.assertEqual(result['predicted_classes'], ['A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C'])"
task2results/qiskit-aqua-main/test/aqua/test_initial_state_zero.py,test_qubits_2_circuit,test_qubits_2_circuit,approximate,53,"self.assertEqual(cct.qasm(), 'OPENQASM 2.0;\ninclude ""qelib1.inc"";\nqreg q[2];\n')"
task2results/qiskit-aqua-main/test/aqua/test_initial_state_zero.py,test_qubits_5_circuit,test_qubits_5_circuit,approximate,60,"self.assertEqual(cct.qasm(), 'OPENQASM 2.0;\ninclude ""qelib1.inc"";\nqreg q[5];\n')"
task2results/qiskit-aqua-main/test/aqua/test_vqe.py,test_circuit_input,test_circuit_input,approximate,86,"self.assertAlmostEqual(result.eigenvalue.real, self.h2_energy, places=5)"
task2results/qiskit-aqua-main/test/aqua/test_vqe.py,test_construct_circuit,test_construct_circuit,approximate,101,"self.assertEqual(len(circuits), num_circuits)"
task2results/qiskit-aqua-main/test/aqua/test_vqe.py,test_legacy_operator,test_legacy_operator,approximate,117,"self.assertEqual(vqe.operator, self.h2_op)"
task2results/qiskit-aqua-main/test/aqua/test_vqe.py,test_max_evals_grouped,test_max_evals_grouped,approximate,137,"self.assertAlmostEqual(result.eigenvalue.real, self.h2_energy, places=places)"
task2results/qiskit-aqua-main/test/aqua/test_vqe.py,test_basic_aer_qasm,test_basic_aer_qasm,approximate,148,"self.assertAlmostEqual(result.eigenvalue.real, (- 1.86823), places=2)"
task2results/qiskit-aqua-main/test/aqua/test_vqe.py,test_with_aer_statevector,test_with_aer_statevector,approximate,168,"self.assertAlmostEqual(result.eigenvalue.real, self.h2_energy, places=6)"
task2results/qiskit-aqua-main/test/aqua/test_vqe.py,test_with_aer_qasm,test_with_aer_qasm,approximate,188,"self.assertAlmostEqual(result.eigenvalue.real, (- 1.86305), places=2)"
task2results/qiskit-aqua-main/test/aqua/test_vqe.py,test_with_aer_qasm_snapshot_mode,test_with_aer_qasm_snapshot_mode,approximate,208,"self.assertAlmostEqual(result.eigenvalue.real, self.h2_energy, places=6)"
task2results/qiskit-aqua-main/test/aqua/test_vqe.py,test_callback,test_callback,approximate,226,"self.assertTrue(all((isinstance(count, int) for count in history['eval_count'])))"
task2results/qiskit-aqua-main/test/aqua/test_vqe.py,test_callback,test_callback,approximate,227,"self.assertTrue(all((isinstance(mean, float) for mean in history['mean'])))"
task2results/qiskit-aqua-main/test/aqua/test_vqe.py,test_callback,test_callback,approximate,228,"self.assertTrue(all((isinstance(std, float) for std in history['std'])))"
task2results/qiskit-aqua-main/test/aqua/test_vqe.py,test_ibmq,test_ibmq,approximate,318,"self.assertAlmostEqual(result.eigenvalue.real, self.h2_energy)"
task2results/qiskit-aqua-main/test/aqua/test_vqe.py,test_ibmq,test_ibmq,approximate,320,"self.assertEqual(len(result.optimal_point), 16)"
task2results/qiskit-aqua-main/test/aqua/test_vqe.py,test_ibmq,test_ibmq,approximate,321,self.assertIsNotNone(result.cost_function_evals)
task2results/qiskit-aqua-main/test/aqua/test_vqe.py,test_ibmq,test_ibmq,approximate,322,self.assertIsNotNone(result.optimizer_time)
task2results/qiskit-aqua-main/test/aqua/test_vqe.py,run_check,run_check,approximate,271,"self.assertAlmostEqual(result.eigenvalue.real, (- 1.85727503), places=5)"
task2results/qiskit-aqua-main/test/aqua/test_optimizers_scikitquant.py,_optimize,_optimize,approximate,51,"self.assertAlmostEqual(result.eigenvalue.real, (- 1.857), places=1)"
task2results/qiskit-aqua-main/test/aqua/test_weighted_sum_operator.py,test_weighted_sum_operator,test_weighted_sum_operator,approximate,92,"self.assertEqual(num_results, 1)"
task2results/qiskit-aqua-main/test/aqua/test_weighted_sum_operator.py,test_weighted_sum_operator,test_weighted_sum_operator,approximate,95,"self.assertEqual(value, result)"
task2results/qiskit-aqua-main/test/aqua/test_readme_sample.py,test_readme_sample,test_readme_sample,approximate,71,"self.assertTrue(found, 'Result {} is not in valid set {}'.format(result.assignment, valid_set))"
task2results/qiskit-aqua-main/test/aqua/test_optimizer_aqgd.py,test_simple,test_simple,approximate,50,"self.assertAlmostEqual(result.eigenvalue.real, (- 1.857), places=3)"
task2results/qiskit-aqua-main/test/aqua/test_optimizer_aqgd.py,test_list,test_list,approximate,60,"self.assertAlmostEqual(result.eigenvalue.real, (- 1.857), places=3)"
task2results/qiskit-aqua-main/test/aqua/test_optimizer_aqgd.py,test_raises_exception,test_raises_exception,approximate,64,"self.assertRaises(AquaError, AQGD, maxiter=[1000], eta=[1.0, 0.5], momentum=[0.0, 0.5])"
task2results/qiskit-aqua-main/test/aqua/test_optimizer_aqgd.py,test_int_values,test_int_values,approximate,74,"self.assertAlmostEqual(result.eigenvalue.real, (- 1.857), places=3)"
task2results/qiskit-aqua-main/test/aqua/test_hhl.py,test_hhl_negative_eigs,test_hhl_negative_eigs,approximate,308,"self.assertTrue(np.any((matrix < 0)), 'Random matrix has no negative values')"
task2results/qiskit-aqua-main/test/aqua/test_hhl.py,test_hhl_non_hermitian,test_hhl_non_hermitian,approximate,429,"self.assertGreater(fidelity, 0.8)"
task2results/qiskit-aqua-main/test/aqua/test_simon.py,test_simon,test_simon,approximate,63,"self.assertEqual(result['result'], hidden)"
task2results/qiskit-aqua-main/test/aqua/test_amplitude_estimation_circuitfactory.py,test_operators,test_operators,approximate,360,self.assertIsNone(qae.a_factory)
task2results/qiskit-aqua-main/test/aqua/test_amplitude_estimation_circuitfactory.py,test_operators,test_operators,approximate,361,self.assertIsNone(qae.q_factory)
task2results/qiskit-aqua-main/test/aqua/test_amplitude_estimation_circuitfactory.py,test_operators,test_operators,approximate,362,self.assertIsNone(qae.i_objective)
task2results/qiskit-aqua-main/test/aqua/test_amplitude_estimation_circuitfactory.py,test_operators,test_operators,approximate,363,self.assertIsNone(qae._a_factory)
task2results/qiskit-aqua-main/test/aqua/test_amplitude_estimation_circuitfactory.py,test_operators,test_operators,approximate,364,self.assertIsNone(qae._q_factory)
task2results/qiskit-aqua-main/test/aqua/test_amplitude_estimation_circuitfactory.py,test_operators,test_operators,approximate,365,self.assertIsNone(qae._i_objective)
task2results/qiskit-aqua-main/test/aqua/test_amplitude_estimation_circuitfactory.py,test_operators,test_operators,approximate,368,self.assertIsNotNone(qae.a_factory)
task2results/qiskit-aqua-main/test/aqua/test_amplitude_estimation_circuitfactory.py,test_operators,test_operators,approximate,369,self.assertIsNotNone(qae.q_factory)
task2results/qiskit-aqua-main/test/aqua/test_amplitude_estimation_circuitfactory.py,test_operators,test_operators,approximate,370,self.assertIsNotNone(qae.i_objective)
task2results/qiskit-aqua-main/test/aqua/test_amplitude_estimation_circuitfactory.py,test_operators,test_operators,approximate,371,self.assertIsNotNone(qae._a_factory)
task2results/qiskit-aqua-main/test/aqua/test_amplitude_estimation_circuitfactory.py,test_operators,test_operators,approximate,372,self.assertIsNone(qae._q_factory)
task2results/qiskit-aqua-main/test/aqua/test_amplitude_estimation_circuitfactory.py,test_operators,test_operators,approximate,373,self.assertIsNone(qae._i_objective)
task2results/qiskit-aqua-main/test/aqua/test_amplitude_estimation_circuitfactory.py,test_operators,test_operators,approximate,376,self.assertIsNotNone(qae.a_factory)
task2results/qiskit-aqua-main/test/aqua/test_amplitude_estimation_circuitfactory.py,test_operators,test_operators,approximate,377,self.assertIsNotNone(qae.q_factory)
task2results/qiskit-aqua-main/test/aqua/test_amplitude_estimation_circuitfactory.py,test_operators,test_operators,approximate,378,self.assertIsNotNone(qae.i_objective)
task2results/qiskit-aqua-main/test/aqua/test_amplitude_estimation_circuitfactory.py,test_operators,test_operators,approximate,379,self.assertIsNotNone(qae._a_factory)
task2results/qiskit-aqua-main/test/aqua/test_amplitude_estimation_circuitfactory.py,test_operators,test_operators,approximate,380,self.assertIsNotNone(qae._q_factory)
task2results/qiskit-aqua-main/test/aqua/test_amplitude_estimation_circuitfactory.py,test_operators,test_operators,approximate,381,self.assertIsNone(qae._i_objective)
task2results/qiskit-aqua-main/test/aqua/test_amplitude_estimation_circuitfactory.py,test_operators,test_operators,approximate,384,self.assertIsNotNone(qae.a_factory)
task2results/qiskit-aqua-main/test/aqua/test_amplitude_estimation_circuitfactory.py,test_operators,test_operators,approximate,385,self.assertIsNotNone(qae.q_factory)
task2results/qiskit-aqua-main/test/aqua/test_amplitude_estimation_circuitfactory.py,test_operators,test_operators,approximate,386,self.assertIsNotNone(qae.i_objective)
task2results/qiskit-aqua-main/test/aqua/test_amplitude_estimation_circuitfactory.py,test_operators,test_operators,approximate,387,self.assertIsNotNone(qae._a_factory)
task2results/qiskit-aqua-main/test/aqua/test_amplitude_estimation_circuitfactory.py,test_operators,test_operators,approximate,388,self.assertIsNotNone(qae._q_factory)
task2results/qiskit-aqua-main/test/aqua/test_amplitude_estimation_circuitfactory.py,test_operators,test_operators,approximate,389,self.assertIsNotNone(qae._i_objective)
task2results/qiskit-aqua-main/test/aqua/test_amplitude_estimation_circuitfactory.py,test_a_factory_update,test_a_factory_update,approximate,402,"self.assertIsInstance(qae.q_factory.a_factory, BernoulliAFactory)"
task2results/qiskit-aqua-main/test/aqua/test_amplitude_estimation_circuitfactory.py,test_a_factory_update,test_a_factory_update,approximate,403,"self.assertEqual(qae.i_objective, self.i_bernoulli)"
task2results/qiskit-aqua-main/test/aqua/test_amplitude_estimation_circuitfactory.py,test_a_factory_update,test_a_factory_update,approximate,407,"self.assertIsInstance(qae.q_factory.a_factory, SineIntegralAFactory)"
task2results/qiskit-aqua-main/test/aqua/test_amplitude_estimation_circuitfactory.py,test_a_factory_update,test_a_factory_update,approximate,408,"self.assertEqual(qae.i_objective, self.i_integral)"
task2results/qiskit-aqua-main/test/aqua/test_amplitude_estimation_circuitfactory.py,test_a_factory_update,test_a_factory_update,approximate,413,"self.assertIsInstance(qae.q_factory, BernoulliQFactory)"
task2results/qiskit-aqua-main/test/aqua/test_amplitude_estimation_circuitfactory.py,test_a_factory_update,test_a_factory_update,approximate,414,"self.assertEqual(qae.i_objective, self.i_bernoulli)"
task2results/qiskit-aqua-main/test/aqua/test_amplitude_estimation_circuitfactory.py,test_a_factory_update,test_a_factory_update,approximate,419,"self.assertIsInstance(qae.q_factory, BernoulliQFactory)"
task2results/qiskit-aqua-main/test/aqua/test_amplitude_estimation_circuitfactory.py,test_a_factory_update,test_a_factory_update,approximate,420,"self.assertEqual(qae.i_objective, self.i_bernoulli)"
task2results/qiskit-aqua-main/test/aqua/test_amplitude_estimation_circuitfactory.py,test_iqae_confidence_intervals,test_iqae_confidence_intervals,approximate,533,"self.assertAlmostEqual((confint[1] - confint[0]), 0.0)"
task2results/qiskit-aqua-main/test/aqua/test_amplitude_estimation_circuitfactory.py,test_iqae_confidence_intervals,test_iqae_confidence_intervals,approximate,534,"self.assertAlmostEqual(confint[0], result['estimation'])"
task2results/qiskit-aqua-main/test/aqua/test_amplitude_estimation_circuitfactory.py,test_iqae_confidence_intervals,test_iqae_confidence_intervals,approximate,541,self.assertTrue((confint[0] <= result['estimation'] <= confint[1]))
task2results/qiskit-aqua-main/test/aqua/test_amplitude_estimation_circuitfactory.py,test_conditional_value_at_risk,test_conditional_value_at_risk,approximate,633,"self.assertEqual(0.0, np.round((normalized_value - 3.3796), decimals=4))"
task2results/qiskit-aqua-main/test/aqua/test_numpy_minimum_eigen_solver.py,test_cme,test_cme,approximate,55,"self.assertAlmostEqual(result.eigenvalue, ((- 1.85727503) + 0j))"
task2results/qiskit-aqua-main/test/aqua/test_numpy_minimum_eigen_solver.py,test_cme,test_cme,approximate,56,"self.assertEqual(len(result.aux_operator_eigenvalues), 2)"
task2results/qiskit-aqua-main/test/aqua/test_numpy_minimum_eigen_solver.py,test_cme_reuse,test_cme_reuse,approximate,71,"self.assertAlmostEqual(result.eigenvalue, ((- 1.85727503) + 0j))"
task2results/qiskit-aqua-main/test/aqua/test_numpy_minimum_eigen_solver.py,test_cme_reuse,test_cme_reuse,approximate,72,"self.assertEqual(self.qubit_op.to_opflow(), algo.operator)"
task2results/qiskit-aqua-main/test/aqua/test_numpy_minimum_eigen_solver.py,test_cme_reuse,test_cme_reuse,approximate,73,self.assertIsNone(result.aux_operator_eigenvalues)
task2results/qiskit-aqua-main/test/aqua/test_numpy_minimum_eigen_solver.py,test_cme_reuse,test_cme_reuse,approximate,83,"self.assertAlmostEqual(result.eigenvalue, ((- 1.85727503) + 0j))"
task2results/qiskit-aqua-main/test/aqua/test_numpy_minimum_eigen_solver.py,test_cme_reuse,test_cme_reuse,approximate,84,self.assertIsNone(result.aux_operator_eigenvalues)
task2results/qiskit-aqua-main/test/aqua/test_numpy_minimum_eigen_solver.py,test_cme_reuse,test_cme_reuse,approximate,88,"self.assertAlmostEqual(result.eigenvalue, ((- 1.85727503) + 0j))"
task2results/qiskit-aqua-main/test/aqua/test_numpy_minimum_eigen_solver.py,test_cme_reuse,test_cme_reuse,approximate,89,"self.assertEqual(len(result.aux_operator_eigenvalues), 2)"
task2results/qiskit-aqua-main/test/aqua/test_numpy_minimum_eigen_solver.py,test_cme_reuse,test_cme_reuse,approximate,95,"self.assertAlmostEqual(result.eigenvalue, ((- 1.85727503) + 0j))"
task2results/qiskit-aqua-main/test/aqua/test_numpy_minimum_eigen_solver.py,test_cme_reuse,test_cme_reuse,approximate,96,self.assertIsNone(result.aux_operator_eigenvalues)
task2results/qiskit-aqua-main/test/aqua/test_numpy_minimum_eigen_solver.py,test_cme_reuse,test_cme_reuse,approximate,101,"self.assertAlmostEqual(result.eigenvalue, ((- 1.85727503) + 0j))"
task2results/qiskit-aqua-main/test/aqua/test_numpy_minimum_eigen_solver.py,test_cme_reuse,test_cme_reuse,approximate,102,"self.assertEqual(len(result.aux_operator_eigenvalues), 2)"
task2results/qiskit-aqua-main/test/aqua/test_numpy_minimum_eigen_solver.py,test_cme_reuse,test_cme_reuse,approximate,108,"self.assertAlmostEqual(result.eigenvalue, (2 + 0j))"
task2results/qiskit-aqua-main/test/aqua/test_numpy_minimum_eigen_solver.py,test_cme_reuse,test_cme_reuse,approximate,109,self.assertIsNone(result.aux_operator_eigenvalues)
task2results/qiskit-aqua-main/test/aqua/test_numpy_minimum_eigen_solver.py,test_cme_filter,test_cme_filter,approximate,123,"self.assertAlmostEqual(result.eigenvalue, ((- 0.22491125) + 0j))"
task2results/qiskit-aqua-main/test/aqua/test_numpy_minimum_eigen_solver.py,test_cme_filter,test_cme_filter,approximate,124,"self.assertEqual(len(result.aux_operator_eigenvalues), 2)"
task2results/qiskit-aqua-main/test/aqua/test_numpy_minimum_eigen_solver.py,test_cme_filter_empty,test_cme_filter_empty,approximate,139,"self.assertEqual(result.eigenvalue, None)"
task2results/qiskit-aqua-main/test/aqua/test_numpy_minimum_eigen_solver.py,test_cme_filter_empty,test_cme_filter_empty,approximate,140,"self.assertEqual(result.eigenstate, None)"
task2results/qiskit-aqua-main/test/aqua/test_numpy_minimum_eigen_solver.py,test_cme_filter_empty,test_cme_filter_empty,approximate,141,"self.assertEqual(result.aux_operator_eigenvalues, None)"
task2results/qiskit-aqua-main/test/aqua/test_qpe.py,test_qpe,test_qpe,approximate,117,"self.assertAlmostEqual(result.eigenvalue.real, ref_eigenval.real, delta=0.02)"
task2results/qiskit-aqua-main/test/aqua/test_bernstein_vazirani.py,test_bernstein_vazirani,test_bernstein_vazirani,approximate,53,"self.assertEqual(result['result'], parameter)"
task2results/qiskit-aqua-main/test/aqua/test_bernstein_vazirani.py,test_with_pass_manager,test_with_pass_manager,approximate,64,"self.assertEqual(result['result'], '011')"
task2results/qiskit-aqua-main/test/aqua/test_numpy_eigen_solver.py,test_ce,test_ce,approximate,42,"self.assertEqual(len(result.eigenvalues), 1)"
task2results/qiskit-aqua-main/test/aqua/test_numpy_eigen_solver.py,test_ce,test_ce,approximate,43,"self.assertEqual(len(result.eigenstates), 1)"
task2results/qiskit-aqua-main/test/aqua/test_numpy_eigen_solver.py,test_ce,test_ce,approximate,44,"self.assertAlmostEqual(result.eigenvalues[0], ((- 1.85727503) + 0j))"
task2results/qiskit-aqua-main/test/aqua/test_numpy_eigen_solver.py,test_ce_k4,test_ce_k4,approximate,50,"self.assertEqual(len(result.eigenvalues), 4)"
task2results/qiskit-aqua-main/test/aqua/test_numpy_eigen_solver.py,test_ce_k4,test_ce_k4,approximate,51,"self.assertEqual(len(result.eigenstates), 4)"
task2results/qiskit-aqua-main/test/aqua/test_numpy_eigen_solver.py,test_ce_k4_filtered,test_ce_k4_filtered,approximate,71,"self.assertEqual(len(result.eigenvalues), 2)"
task2results/qiskit-aqua-main/test/aqua/test_numpy_eigen_solver.py,test_ce_k4_filtered,test_ce_k4_filtered,approximate,72,"self.assertEqual(len(result.eigenstates), 2)"
task2results/qiskit-aqua-main/test/aqua/test_numpy_eigen_solver.py,test_ce_k4_filtered_empty,test_ce_k4_filtered_empty,approximate,85,"self.assertEqual(len(result.eigenvalues), 0)"
task2results/qiskit-aqua-main/test/aqua/test_numpy_eigen_solver.py,test_ce_k4_filtered_empty,test_ce_k4_filtered_empty,approximate,86,"self.assertEqual(len(result.eigenstates), 0)"
task2results/qiskit-aqua-main/test/aqua/test_skip_qobj_validation.py,test_wo_backend_options,test_wo_backend_options,approximate,62,"self.assertGreater(quantum_instance.time_taken, 0.0)"
task2results/qiskit-aqua-main/test/aqua/test_skip_qobj_validation.py,test_wo_backend_options,test_wo_backend_options,approximate,66,"self.assertGreater(quantum_instance.time_taken, 0.0)"
task2results/qiskit-aqua-main/test/aqua/test_skip_qobj_validation.py,test_wo_backend_options,test_wo_backend_options,approximate,68,"self.assertTrue(_compare_dict(res_wo_bo, res_wo_bo_skip_validation))"
task2results/qiskit-aqua-main/test/aqua/test_skip_qobj_validation.py,test_w_backend_options,test_w_backend_options,approximate,78,"self.assertGreater(quantum_instance.time_taken, 0.0)"
task2results/qiskit-aqua-main/test/aqua/test_skip_qobj_validation.py,test_w_backend_options,test_w_backend_options,approximate,82,"self.assertGreater(quantum_instance.time_taken, 0.0)"
task2results/qiskit-aqua-main/test/aqua/test_skip_qobj_validation.py,test_w_backend_options,test_w_backend_options,approximate,84,"self.assertTrue(_compare_dict(res_w_bo, res_w_bo_skip_validation))"
task2results/qiskit-aqua-main/test/aqua/test_skip_qobj_validation.py,test_w_noise,test_w_noise,approximate,111,"self.assertTrue(_compare_dict(res_w_noise, res_w_noise_skip_validation))"
task2results/qiskit-aqua-main/test/aqua/test_subsystem.py,test_get_subsystems_counts,test_get_subsystems_counts,approximate,29,"self.assertDictEqual(result[0], {'11': 2, '01': 1})"
task2results/qiskit-aqua-main/test/aqua/test_subsystem.py,test_get_subsystems_counts,test_get_subsystems_counts,approximate,30,"self.assertDictEqual(result[1], {'010': 1, '011': 2})"
task2results/qiskit-aqua-main/test/aqua/test_subsystem.py,test_get_subsystems_post_selected,test_get_subsystems_post_selected,approximate,37,"self.assertDictEqual(result[0], {'11': 2})"
task2results/qiskit-aqua-main/test/aqua/test_subsystem.py,test_get_subsystems_post_selected,test_get_subsystems_post_selected,approximate,38,"self.assertDictEqual(result[1], {'010': 1, '011': 1})"
task2results/qiskit-aqua-main/test/aqua/test_amplitude_estimation.py,test_statevector,test_statevector,approximate,114,"self.assertGreater(self._statevector.time_taken, 0.0)"
task2results/qiskit-aqua-main/test/aqua/test_amplitude_estimation.py,test_operators,test_operators,approximate,295,self.assertIsNone(qae.state_preparation)
task2results/qiskit-aqua-main/test/aqua/test_amplitude_estimation.py,test_operators,test_operators,approximate,296,self.assertIsNone(qae.grover_operator)
task2results/qiskit-aqua-main/test/aqua/test_amplitude_estimation.py,test_operators,test_operators,approximate,297,self.assertIsNone(qae.objective_qubits)
task2results/qiskit-aqua-main/test/aqua/test_amplitude_estimation.py,test_operators,test_operators,approximate,298,self.assertIsNone(qae._state_preparation)
task2results/qiskit-aqua-main/test/aqua/test_amplitude_estimation.py,test_operators,test_operators,approximate,299,self.assertIsNone(qae._grover_operator)
task2results/qiskit-aqua-main/test/aqua/test_amplitude_estimation.py,test_operators,test_operators,approximate,300,self.assertIsNone(qae._objective_qubits)
task2results/qiskit-aqua-main/test/aqua/test_amplitude_estimation.py,test_operators,test_operators,approximate,303,self.assertIsNotNone(qae.state_preparation)
task2results/qiskit-aqua-main/test/aqua/test_amplitude_estimation.py,test_operators,test_operators,approximate,304,self.assertIsNotNone(qae.grover_operator)
task2results/qiskit-aqua-main/test/aqua/test_amplitude_estimation.py,test_operators,test_operators,approximate,305,self.assertIsNotNone(qae.objective_qubits)
task2results/qiskit-aqua-main/test/aqua/test_amplitude_estimation.py,test_operators,test_operators,approximate,306,self.assertIsNotNone(qae._state_preparation)
task2results/qiskit-aqua-main/test/aqua/test_amplitude_estimation.py,test_operators,test_operators,approximate,307,self.assertIsNone(qae._grover_operator)
task2results/qiskit-aqua-main/test/aqua/test_amplitude_estimation.py,test_operators,test_operators,approximate,308,self.assertIsNone(qae._objective_qubits)
task2results/qiskit-aqua-main/test/aqua/test_amplitude_estimation.py,test_operators,test_operators,approximate,311,self.assertIsNotNone(qae.state_preparation)
task2results/qiskit-aqua-main/test/aqua/test_amplitude_estimation.py,test_operators,test_operators,approximate,312,self.assertIsNotNone(qae.grover_operator)
task2results/qiskit-aqua-main/test/aqua/test_amplitude_estimation.py,test_operators,test_operators,approximate,313,self.assertIsNotNone(qae.objective_qubits)
task2results/qiskit-aqua-main/test/aqua/test_amplitude_estimation.py,test_operators,test_operators,approximate,314,self.assertIsNotNone(qae._state_preparation)
task2results/qiskit-aqua-main/test/aqua/test_amplitude_estimation.py,test_operators,test_operators,approximate,315,self.assertIsNotNone(qae._grover_operator)
task2results/qiskit-aqua-main/test/aqua/test_amplitude_estimation.py,test_operators,test_operators,approximate,316,self.assertIsNone(qae._objective_qubits)
task2results/qiskit-aqua-main/test/aqua/test_amplitude_estimation.py,test_operators,test_operators,approximate,319,self.assertIsNotNone(qae.state_preparation)
task2results/qiskit-aqua-main/test/aqua/test_amplitude_estimation.py,test_operators,test_operators,approximate,320,self.assertIsNotNone(qae.grover_operator)
task2results/qiskit-aqua-main/test/aqua/test_amplitude_estimation.py,test_operators,test_operators,approximate,321,self.assertIsNotNone(qae.objective_qubits)
task2results/qiskit-aqua-main/test/aqua/test_amplitude_estimation.py,test_operators,test_operators,approximate,322,self.assertIsNotNone(qae._state_preparation)
task2results/qiskit-aqua-main/test/aqua/test_amplitude_estimation.py,test_operators,test_operators,approximate,323,self.assertIsNotNone(qae._grover_operator)
task2results/qiskit-aqua-main/test/aqua/test_amplitude_estimation.py,test_operators,test_operators,approximate,324,self.assertIsNotNone(qae._objective_qubits)
task2results/qiskit-aqua-main/test/aqua/test_amplitude_estimation.py,test_statevector,test_statevector,approximate,361,"self.assertGreater(self._statevector.time_taken, 0.0)"
task2results/qiskit-aqua-main/test/aqua/test_amplitude_estimation.py,test_confidence_intervals,test_confidence_intervals,approximate,402,"self.assertGreater(self._statevector.time_taken, 0.0)"
task2results/qiskit-aqua-main/test/aqua/test_amplitude_estimation.py,test_iqae_confidence_intervals,test_iqae_confidence_intervals,approximate,429,"self.assertGreater(self._statevector.time_taken, 0.0)"
task2results/qiskit-aqua-main/test/aqua/test_amplitude_estimation.py,test_iqae_confidence_intervals,test_iqae_confidence_intervals,approximate,433,"self.assertAlmostEqual((confint[1] - confint[0]), 0.0)"
task2results/qiskit-aqua-main/test/aqua/test_amplitude_estimation.py,test_iqae_confidence_intervals,test_iqae_confidence_intervals,approximate,434,"self.assertAlmostEqual(confint[0], result.estimation)"
task2results/qiskit-aqua-main/test/aqua/test_amplitude_estimation.py,test_iqae_confidence_intervals,test_iqae_confidence_intervals,approximate,441,self.assertTrue((confint[0] <= result.estimation <= confint[1]))
task2results/qiskit-aqua-main/test/aqua/test_vqe2iqpe.py,test_vqe_2_iqpe,test_vqe_2_iqpe,approximate,97,"self.assertAlmostEqual(result.eigenvalue.real, ref_eigenval.real, delta=0.01)"
task2results/qiskit-aqua-main/test/aqua/test_measure_error_mitigation.py,test_measurement_error_mitigation,test_measurement_error_mitigation,approximate,73,"self.assertGreater(quantum_instance.time_taken, 0.0)"
task2results/qiskit-aqua-main/test/aqua/test_measure_error_mitigation.py,test_measurement_error_mitigation,test_measurement_error_mitigation,approximate,82,"self.assertGreaterEqual(prob_top_meas_w_mitigation, prob_top_meas_wo_mitigation)"
task2results/qiskit-aqua-main/test/aqua/test_measure_error_mitigation.py,test_measurement_error_mitigation_auto_refresh,test_measurement_error_mitigation_auto_refresh,approximate,111,"self.assertGreater(quantum_instance.time_taken, 0.0)"
task2results/qiskit-aqua-main/test/aqua/test_measure_error_mitigation.py,test_measurement_error_mitigation_auto_refresh,test_measurement_error_mitigation_auto_refresh,approximate,124,"self.assertGreater(total_diff, 0.0)"
task2results/qiskit-aqua-main/test/aqua/test_measure_error_mitigation.py,test_measurement_error_mitigation_auto_refresh,test_measurement_error_mitigation_auto_refresh,approximate,125,"self.assertGreater(timestamp_2, timestamp_1)"
task2results/qiskit-aqua-main/test/aqua/test_measure_error_mitigation.py,test_measurement_error_mitigation_with_dedicated_shots,test_measurement_error_mitigation_with_dedicated_shots,approximate,155,"self.assertGreater(quantum_instance.time_taken, 0.0)"
task2results/qiskit-aqua-main/test/aqua/test_measure_error_mitigation.py,test_measurement_error_mitigation_with_dedicated_shots,test_measurement_error_mitigation_with_dedicated_shots,approximate,166,"self.assertGreater(total_diff, 0.0)"
task2results/qiskit-aqua-main/test/aqua/test_measure_error_mitigation.py,test_measurement_error_mitigation_with_dedicated_shots,test_measurement_error_mitigation_with_dedicated_shots,approximate,167,"self.assertGreater(timestamp_2, timestamp_1)"
task2results/qiskit-aqua-main/test/aqua/test_measure_error_mitigation.py,test_measurement_error_mitigation_with_diff_qubit_order,test_measurement_error_mitigation_with_diff_qubit_order,approximate,208,"self.assertGreater(quantum_instance.time_taken, 0.0)"
task2results/qiskit-aqua-main/test/aqua/test_measure_error_mitigation.py,test_measurement_error_mitigation_with_diff_qubit_order,test_measurement_error_mitigation_with_diff_qubit_order,approximate,218,"self.assertRaises(AquaError, quantum_instance.execute, [qc1, qc3])"
task2results/qiskit-aqua-main/test/aqua/test_measure_error_mitigation.py,test_measurement_error_mitigation_with_vqe,test_measurement_error_mitigation_with_vqe,approximate,262,"self.assertGreater(quantum_instance.time_taken, 0.0)"
task2results/qiskit-aqua-main/test/aqua/test_measure_error_mitigation.py,test_measurement_error_mitigation_with_vqe,test_measurement_error_mitigation_with_vqe,approximate,264,"self.assertAlmostEqual(result.eigenvalue.real, (- 1.86), places=2)"
task2results/qiskit-aqua-main/test/aqua/operators/test_op_construction.py,test_pauli_primitives,test_pauli_primitives,approximate,50,"self.assertEqual(newop.primitive, Pauli(label='XYZI'))"
task2results/qiskit-aqua-main/test/aqua/operators/test_op_construction.py,test_pauli_primitives,test_pauli_primitives,approximate,53,"self.assertEqual(kpower_op.primitive, Pauli(label='YYYYYIII'))"
task2results/qiskit-aqua-main/test/aqua/operators/test_op_construction.py,test_pauli_primitives,test_pauli_primitives,approximate,56,"self.assertEqual(kpower_op2.primitive, Pauli(label='YIYIYIYI'))"
task2results/qiskit-aqua-main/test/aqua/operators/test_op_construction.py,test_pauli_primitives,test_pauli_primitives,approximate,59,"self.assertEqual(X.primitive, Pauli(label='X'))"
task2results/qiskit-aqua-main/test/aqua/operators/test_op_construction.py,test_pauli_primitives,test_pauli_primitives,approximate,60,"self.assertEqual(Y.primitive, Pauli(label='Y'))"
task2results/qiskit-aqua-main/test/aqua/operators/test_op_construction.py,test_pauli_primitives,test_pauli_primitives,approximate,61,"self.assertEqual(Z.primitive, Pauli(label='Z'))"
task2results/qiskit-aqua-main/test/aqua/operators/test_op_construction.py,test_pauli_primitives,test_pauli_primitives,approximate,62,"self.assertEqual(I.primitive, Pauli(label='I'))"
task2results/qiskit-aqua-main/test/aqua/operators/test_op_construction.py,test_composed_eval,test_composed_eval,approximate,66,"self.assertAlmostEqual(Minus.eval('1'), (- (0.5 ** 0.5)))"
task2results/qiskit-aqua-main/test/aqua/operators/test_op_construction.py,test_evals,test_evals,approximate,72,"self.assertEqual(Z.eval('0').eval('0'), 1)"
task2results/qiskit-aqua-main/test/aqua/operators/test_op_construction.py,test_evals,test_evals,approximate,73,"self.assertEqual(Z.eval('1').eval('0'), 0)"
task2results/qiskit-aqua-main/test/aqua/operators/test_op_construction.py,test_evals,test_evals,approximate,74,"self.assertEqual(Z.eval('0').eval('1'), 0)"
task2results/qiskit-aqua-main/test/aqua/operators/test_op_construction.py,test_evals,test_evals,approximate,75,"self.assertEqual(Z.eval('1').eval('1'), (- 1))"
task2results/qiskit-aqua-main/test/aqua/operators/test_op_construction.py,test_evals,test_evals,approximate,76,"self.assertEqual(X.eval('0').eval('0'), 0)"
task2results/qiskit-aqua-main/test/aqua/operators/test_op_construction.py,test_evals,test_evals,approximate,77,"self.assertEqual(X.eval('1').eval('0'), 1)"
task2results/qiskit-aqua-main/test/aqua/operators/test_op_construction.py,test_evals,test_evals,approximate,78,"self.assertEqual(X.eval('0').eval('1'), 1)"
task2results/qiskit-aqua-main/test/aqua/operators/test_op_construction.py,test_evals,test_evals,approximate,79,"self.assertEqual(X.eval('1').eval('1'), 0)"
task2results/qiskit-aqua-main/test/aqua/operators/test_op_construction.py,test_evals,test_evals,approximate,80,"self.assertEqual(Y.eval('0').eval('0'), 0)"
task2results/qiskit-aqua-main/test/aqua/operators/test_op_construction.py,test_evals,test_evals,approximate,81,"self.assertEqual(Y.eval('1').eval('0'), (- 1j))"
task2results/qiskit-aqua-main/test/aqua/operators/test_op_construction.py,test_evals,test_evals,approximate,82,"self.assertEqual(Y.eval('0').eval('1'), 1j)"
task2results/qiskit-aqua-main/test/aqua/operators/test_op_construction.py,test_evals,test_evals,approximate,83,"self.assertEqual(Y.eval('1').eval('1'), 0)"
task2results/qiskit-aqua-main/test/aqua/operators/test_op_construction.py,test_evals,test_evals,approximate,95,"self.assertEqual(PrimitiveOp(Z.to_matrix()).eval('0').eval('0'), 1)"
task2results/qiskit-aqua-main/test/aqua/operators/test_op_construction.py,test_evals,test_evals,approximate,96,"self.assertEqual(PrimitiveOp(Z.to_matrix()).eval('1').eval('0'), 0)"
task2results/qiskit-aqua-main/test/aqua/operators/test_op_construction.py,test_evals,test_evals,approximate,97,"self.assertEqual(PrimitiveOp(Z.to_matrix()).eval('0').eval('1'), 0)"
task2results/qiskit-aqua-main/test/aqua/operators/test_op_construction.py,test_evals,test_evals,approximate,98,"self.assertEqual(PrimitiveOp(Z.to_matrix()).eval('1').eval('1'), (- 1))"
task2results/qiskit-aqua-main/test/aqua/operators/test_op_construction.py,test_evals,test_evals,approximate,99,"self.assertEqual(PrimitiveOp(X.to_matrix()).eval('0').eval('0'), 0)"
task2results/qiskit-aqua-main/test/aqua/operators/test_op_construction.py,test_evals,test_evals,approximate,100,"self.assertEqual(PrimitiveOp(X.to_matrix()).eval('1').eval('0'), 1)"
task2results/qiskit-aqua-main/test/aqua/operators/test_op_construction.py,test_evals,test_evals,approximate,101,"self.assertEqual(PrimitiveOp(X.to_matrix()).eval('0').eval('1'), 1)"
task2results/qiskit-aqua-main/test/aqua/operators/test_op_construction.py,test_evals,test_evals,approximate,102,"self.assertEqual(PrimitiveOp(X.to_matrix()).eval('1').eval('1'), 0)"
task2results/qiskit-aqua-main/test/aqua/operators/test_op_construction.py,test_evals,test_evals,approximate,103,"self.assertEqual(PrimitiveOp(Y.to_matrix()).eval('0').eval('0'), 0)"
task2results/qiskit-aqua-main/test/aqua/operators/test_op_construction.py,test_evals,test_evals,approximate,104,"self.assertEqual(PrimitiveOp(Y.to_matrix()).eval('1').eval('0'), (- 1j))"
task2results/qiskit-aqua-main/test/aqua/operators/test_op_construction.py,test_evals,test_evals,approximate,105,"self.assertEqual(PrimitiveOp(Y.to_matrix()).eval('0').eval('1'), 1j)"
task2results/qiskit-aqua-main/test/aqua/operators/test_op_construction.py,test_evals,test_evals,approximate,106,"self.assertEqual(PrimitiveOp(Y.to_matrix()).eval('1').eval('1'), 0)"
task2results/qiskit-aqua-main/test/aqua/operators/test_op_construction.py,test_io_consistency,test_io_consistency,approximate,141,"self.assertEqual(str(new_op.primitive), label)"
task2results/qiskit-aqua-main/test/aqua/operators/test_op_construction.py,test_io_consistency,test_io_consistency,approximate,144,"self.assertEqual(new_op.primitive, Pauli(label=label))"
task2results/qiskit-aqua-main/test/aqua/operators/test_op_construction.py,test_primitive_strings,test_primitive_strings,approximate,251,"self.assertEqual(X.primitive_strings(), {'Pauli'})"
task2results/qiskit-aqua-main/test/aqua/operators/test_op_construction.py,test_primitive_strings,test_primitive_strings,approximate,255,"self.assertEqual(gnarly_op.primitive_strings(), {'QuantumCircuit', 'Matrix'})"
task2results/qiskit-aqua-main/test/aqua/operators/test_op_construction.py,test_to_pauli_op,test_to_pauli_op,approximate,263,"self.assertIsInstance(pauli_op, SummedOp)"
task2results/qiskit-aqua-main/test/aqua/operators/test_op_construction.py,test_circuit_permute,test_circuit_permute,approximate,277,"self.assertNotEqual(c_op, c_op_perm)"
task2results/qiskit-aqua-main/test/aqua/operators/test_op_construction.py,test_circuit_permute,test_circuit_permute,approximate,279,"self.assertEqual(c_op, c_op_id)"
task2results/qiskit-aqua-main/test/aqua/operators/test_op_construction.py,test_compose_op_of_different_dim,test_compose_op_of_different_dim,approximate,389,"self.assertEqual(pauli_op, expected_result)"
task2results/qiskit-aqua-main/test/aqua/operators/test_op_construction.py,test_compose_op_of_different_dim,test_compose_op_of_different_dim,approximate,396,"self.assertEqual(matrix_op, expected_result.to_matrix_op())"
task2results/qiskit-aqua-main/test/aqua/operators/test_op_construction.py,test_compose_op_of_different_dim,test_compose_op_of_different_dim,approximate,404,"self.assertTrue(np.array_equal(pauli_op.to_matrix(), matrix_op.to_matrix()))"
task2results/qiskit-aqua-main/test/aqua/operators/test_op_construction.py,test_compose_op_of_different_dim,test_compose_op_of_different_dim,approximate,405,"self.assertTrue(np.allclose(pauli_op.to_matrix(), circuit_op.to_matrix(), rtol=1e-14))"
task2results/qiskit-aqua-main/test/aqua/operators/test_op_construction.py,test_compose_op_of_different_dim,test_compose_op_of_different_dim,approximate,406,"self.assertTrue(np.allclose(matrix_op.to_matrix(), circuit_op.to_matrix(), rtol=1e-14))"
task2results/qiskit-aqua-main/test/aqua/operators/test_op_construction.py,test_permute_on_primitive_op,test_permute_on_primitive_op,approximate,417,"self.assertEqual(permuted_pauli_op, expected_pauli_op)"
task2results/qiskit-aqua-main/test/aqua/operators/test_op_construction.py,test_permute_on_primitive_op,test_permute_on_primitive_op,approximate,424,"self.assertEqual(permuted_circuit_op.primitive.__str__(), expected_circuit_op.primitive.__str__())"
task2results/qiskit-aqua-main/test/aqua/operators/test_op_construction.py,test_permute_on_primitive_op,test_permute_on_primitive_op,approximate,433,self.assertTrue(equal)
task2results/qiskit-aqua-main/test/aqua/operators/test_op_construction.py,test_permute_on_list_op,test_permute_on_list_op,approximate,453,self.assertTrue(equal)
task2results/qiskit-aqua-main/test/aqua/operators/test_op_construction.py,test_permute_on_list_op,test_permute_on_list_op,approximate,471,self.assertTrue(equal)
task2results/qiskit-aqua-main/test/aqua/operators/test_op_construction.py,test_permute_on_list_op,test_permute_on_list_op,approximate,486,self.assertTrue(equal)
task2results/qiskit-aqua-main/test/aqua/operators/test_op_construction.py,test_expand_on_list_op,test_expand_on_list_op,approximate,495,"self.assertEqual((composed_op.num_qubits + add_qubits), expanded.num_qubits)"
task2results/qiskit-aqua-main/test/aqua/operators/test_op_construction.py,test_expand_on_list_op,test_expand_on_list_op,approximate,500,"self.assertEqual((tensored_op.num_qubits + add_qubits), expanded.num_qubits)"
task2results/qiskit-aqua-main/test/aqua/operators/test_op_construction.py,test_expand_on_list_op,test_expand_on_list_op,approximate,505,"self.assertEqual((summed_op.num_qubits + add_qubits), expanded.num_qubits)"
task2results/qiskit-aqua-main/test/aqua/operators/test_op_construction.py,test_expand_on_state_fn,test_expand_on_state_fn,approximate,519,"self.assertEqual(cfn_exp.num_qubits, (add_qubits + num_qubits))"
task2results/qiskit-aqua-main/test/aqua/operators/test_op_construction.py,test_expand_on_state_fn,test_expand_on_state_fn,approximate,525,"self.assertEqual(osfn_exp.num_qubits, (add_qubits + num_qubits))"
task2results/qiskit-aqua-main/test/aqua/operators/test_op_construction.py,test_expand_on_state_fn,test_expand_on_state_fn,approximate,529,"self.assertEqual(dsfn.num_qubits, num_qubits)"
task2results/qiskit-aqua-main/test/aqua/operators/test_op_construction.py,test_expand_on_state_fn,test_expand_on_state_fn,approximate,532,"self.assertEqual(dsfn_exp.num_qubits, (num_qubits + add_qubits))"
task2results/qiskit-aqua-main/test/aqua/operators/test_op_construction.py,test_expand_on_state_fn,test_expand_on_state_fn,approximate,536,"self.assertEqual(vsfn.num_qubits, num_qubits)"
task2results/qiskit-aqua-main/test/aqua/operators/test_op_construction.py,test_expand_on_state_fn,test_expand_on_state_fn,approximate,539,"self.assertEqual(vsfn_exp.num_qubits, (num_qubits + add_qubits))"
task2results/qiskit-aqua-main/test/aqua/operators/test_op_construction.py,test_permute_on_state_fn,test_permute_on_state_fn,approximate,554,self.assertTrue(equivalent)
task2results/qiskit-aqua-main/test/aqua/operators/test_op_construction.py,test_permute_on_state_fn,test_permute_on_state_fn,approximate,562,self.assertTrue(equivalent)
task2results/qiskit-aqua-main/test/aqua/operators/test_op_construction.py,test_compose_consistency,test_compose_consistency,approximate,574,"self.assertListEqual(comp1.oplist, list(reversed(comp2.oplist)))"
task2results/qiskit-aqua-main/test/aqua/operators/test_op_construction.py,test_compose_consistency,test_compose_consistency,approximate,583,"self.assertListEqual(comp1.oplist, list(reversed(comp2.oplist)))"
task2results/qiskit-aqua-main/test/aqua/operators/test_op_construction.py,test_compose_consistency,test_compose_consistency,approximate,592,"self.assertListEqual(comp1.oplist, list(reversed(comp2.oplist)))"
task2results/qiskit-aqua-main/test/aqua/operators/test_op_construction.py,test_compose_with_indices,test_compose_with_indices,approximate,606,"self.assertEqual(primitive_op.num_qubits, num_qubits)"
task2results/qiskit-aqua-main/test/aqua/operators/test_op_construction.py,test_compose_with_indices,test_compose_with_indices,approximate,607,"self.assertEqual(composed_op.num_qubits, num_qubits)"
task2results/qiskit-aqua-main/test/aqua/operators/test_op_construction.py,test_compose_with_indices,test_compose_with_indices,approximate,616,"self.assertTrue(np.allclose(permuted_primitive_op.to_matrix(), composed_primitive_op.to_matrix()))"
task2results/qiskit-aqua-main/test/aqua/operators/test_op_construction.py,test_compose_with_indices,test_compose_with_indices,approximate,618,"self.assertEqual(num_qubits, permuted_primitive_op.num_qubits)"
task2results/qiskit-aqua-main/test/aqua/operators/test_op_construction.py,test_compose_with_indices,test_compose_with_indices,approximate,628,"self.assertEqual(num_qubits, list_op.num_qubits)"
task2results/qiskit-aqua-main/test/aqua/operators/test_op_construction.py,test_compose_with_indices,test_compose_with_indices,approximate,635,"self.assertEqual(no_perm_op.num_qubits, num_qubits)"
task2results/qiskit-aqua-main/test/aqua/operators/test_op_construction.py,test_compose_with_indices,test_compose_with_indices,approximate,639,"self.assertEqual(perm_op.num_qubits, (max(indices) + 1))"
task2results/qiskit-aqua-main/test/aqua/operators/test_op_construction.py,test_compose_with_indices,test_compose_with_indices,approximate,654,"self.assertEqual(composed_op.num_qubits, op_state_fn.num_qubits)"
task2results/qiskit-aqua-main/test/aqua/operators/test_op_construction.py,test_compose_with_indices,test_compose_with_indices,approximate,661,"self.assertEqual(composed.num_qubits, (max(perm) + 1))"
task2results/qiskit-aqua-main/test/aqua/operators/test_op_construction.py,test_circuit_compose_register_independent,test_circuit_compose_register_independent,approximate,712,"self.assertEqual(composed.num_qubits, 2)"
task2results/qiskit-aqua-main/test/aqua/operators/test_op_construction.py,test_list_op_to_circuit,test_list_op_to_circuit,approximate,758,"self.assertTrue(operator.equiv(circuit), 'ListOp.to_circuit() outputs wrong circuit!')"
task2results/qiskit-aqua-main/test/aqua/operators/test_op_construction.py,test_composed_op_to_circuit,test_composed_op_to_circuit,approximate,778,"self.assertRaises(ExtensionError, pm1.to_circuit)"
task2results/qiskit-aqua-main/test/aqua/operators/test_op_construction.py,test_composed_op_to_circuit,test_composed_op_to_circuit,approximate,779,"self.assertRaises(ExtensionError, pm2.to_circuit)"
task2results/qiskit-aqua-main/test/aqua/operators/test_op_construction.py,test_composed_op_to_circuit,test_composed_op_to_circuit,approximate,787,self.assertTrue(Operator(unitary).equiv(circuit))
task2results/qiskit-aqua-main/test/aqua/operators/test_op_construction.py,test_op_to_circuit_with_parameters,test_op_to_circuit_with_parameters,approximate,799,"self.assertRaises(AquaError, summed_op_with_param.to_circuit)"
task2results/qiskit-aqua-main/test/aqua/operators/test_op_construction.py,test_permute_list_op_with_inconsistent_num_qubits,test_permute_list_op_with_inconsistent_num_qubits,approximate,804,"self.assertRaises(AquaError, list_op.permute, [0, 1])"
task2results/qiskit-aqua-main/test/aqua/operators/test_op_construction.py,test_op_indent,test_op_indent,approximate,812,self.assertTrue(starts_with_indent)
task2results/qiskit-aqua-main/test/aqua/operators/test_op_construction.py,test_op_indent,test_op_indent,approximate,816,"self.assertListEqual(indented_str_content, initial_str.split('\n'))"
task2results/qiskit-aqua-main/test/aqua/operators/test_op_construction.py,test_composed_op_immutable_under_eval,test_composed_op_immutable_under_eval,approximate,823,"self.assertEqual(op, (2 * ComposedOp([X])))"
task2results/qiskit-aqua-main/test/aqua/operators/test_op_construction.py,test_op_parameters,test_op_parameters,approximate,845,"self.assertEqual(params, op.parameters)"
task2results/qiskit-aqua-main/test/aqua/operators/test_op_construction.py,test_op_parameters,test_op_parameters,approximate,846,"self.assertEqual(params, StateFn(op).parameters)"
task2results/qiskit-aqua-main/test/aqua/operators/test_op_construction.py,test_op_parameters,test_op_parameters,approximate,847,"self.assertEqual(params, StateFn(qc, coeff=l).parameters)"
task2results/qiskit-aqua-main/test/aqua/operators/test_op_construction.py,test_list_op_parameters,test_list_op_parameters,approximate,866,"self.assertEqual(op1.parameters, set(params))"
task2results/qiskit-aqua-main/test/aqua/operators/test_op_construction.py,test_list_op_parameters,test_list_op_parameters,approximate,876,"self.assertEqual(list_op.parameters, set(params))"
task2results/qiskit-aqua-main/test/aqua/operators/test_op_construction.py,test_statefn_eval,test_statefn_eval,approximate,887,"self.assertEqual(op.eval().primitive, expected)"
task2results/qiskit-aqua-main/test/aqua/operators/test_op_construction.py,test_invalid_primitive,test_invalid_primitive,approximate,908,"self.assertEqual(str(cm.exception), (msg + ""'str'""))"
task2results/qiskit-aqua-main/test/aqua/operators/test_op_construction.py,test_invalid_primitive,test_invalid_primitive,approximate,913,"self.assertEqual(str(cm.exception), (msg + ""'MatrixOperator'""))"
task2results/qiskit-aqua-main/test/aqua/operators/test_op_construction.py,test_invalid_primitive,test_invalid_primitive,approximate,918,"self.assertEqual(str(cm.exception), (msg + ""'NoneType'""))"
task2results/qiskit-aqua-main/test/aqua/operators/test_op_construction.py,test_invalid_primitive,test_invalid_primitive,approximate,923,"self.assertEqual(str(cm.exception), (msg + ""'float'""))"
task2results/qiskit-aqua-main/test/aqua/operators/test_op_construction.py,test_summedop_equals,test_summedop_equals,approximate,929,"self.assertEqual(sum_op, sum_op)"
task2results/qiskit-aqua-main/test/aqua/operators/test_op_construction.py,test_summedop_equals,test_summedop_equals,approximate,930,"self.assertEqual((sum_op + sum_op), (2 * sum_op))"
task2results/qiskit-aqua-main/test/aqua/operators/test_op_construction.py,test_summedop_equals,test_summedop_equals,approximate,931,"self.assertEqual(((sum_op + sum_op) + sum_op), (3 * sum_op))"
task2results/qiskit-aqua-main/test/aqua/operators/test_op_construction.py,test_summedop_equals,test_summedop_equals,approximate,934,"self.assertNotEqual(sum_op, sum_op2)"
task2results/qiskit-aqua-main/test/aqua/operators/test_op_construction.py,test_summedop_equals,test_summedop_equals,approximate,935,"self.assertEqual(sum_op2, sum_op2)"
task2results/qiskit-aqua-main/test/aqua/operators/test_op_construction.py,test_summedop_equals,test_summedop_equals,approximate,937,"self.assertNotEqual(sum_op, sum_op3)"
task2results/qiskit-aqua-main/test/aqua/operators/test_op_construction.py,test_summedop_equals,test_summedop_equals,approximate,938,"self.assertNotEqual(sum_op2, sum_op3)"
task2results/qiskit-aqua-main/test/aqua/operators/test_op_construction.py,test_summedop_equals,test_summedop_equals,approximate,939,"self.assertEqual(sum_op3, sum_op3)"
task2results/qiskit-aqua-main/test/aqua/operators/test_op_construction.py,test_indexing,test_indexing,approximate,971,"self.assertIsInstance(single_op, OperatorBase)"
task2results/qiskit-aqua-main/test/aqua/operators/test_op_construction.py,test_indexing,test_indexing,approximate,972,"self.assertNotIsInstance(single_op, ListOp)"
task2results/qiskit-aqua-main/test/aqua/operators/test_op_construction.py,test_indexing,test_indexing,approximate,975,"self.assertIsInstance(list_one_element, list_op_type)"
task2results/qiskit-aqua-main/test/aqua/operators/test_op_construction.py,test_indexing,test_indexing,approximate,976,"self.assertEqual(len(list_one_element), 1)"
task2results/qiskit-aqua-main/test/aqua/operators/test_op_construction.py,test_indexing,test_indexing,approximate,977,"self.assertEqual(list_one_element[0], Y)"
task2results/qiskit-aqua-main/test/aqua/operators/test_op_construction.py,test_indexing,test_indexing,approximate,980,"self.assertIsInstance(list_two_elements, list_op_type)"
task2results/qiskit-aqua-main/test/aqua/operators/test_op_construction.py,test_indexing,test_indexing,approximate,981,"self.assertEqual(len(list_two_elements), 2)"
task2results/qiskit-aqua-main/test/aqua/operators/test_op_construction.py,test_indexing,test_indexing,approximate,982,"self.assertEqual(list_two_elements[0], X)"
task2results/qiskit-aqua-main/test/aqua/operators/test_op_construction.py,test_indexing,test_indexing,approximate,983,"self.assertEqual(list_two_elements[1], Z)"
task2results/qiskit-aqua-main/test/aqua/operators/test_op_construction.py,test_indexing,test_indexing,approximate,985,"self.assertEqual(list_one_element.coeff, coeff)"
task2results/qiskit-aqua-main/test/aqua/operators/test_op_construction.py,test_indexing,test_indexing,approximate,986,"self.assertEqual(list_two_elements.coeff, coeff)"
task2results/qiskit-aqua-main/test/aqua/operators/test_op_construction.py,assertComboFnPreserved,assertComboFnPreserved,approximate,1000,"self.assertListEqual(processed_op.combo_fn(x), self.combo_fn(x))"
task2results/qiskit-aqua-main/test/aqua/operators/test_op_construction.py,test_after_mul,test_after_mul,approximate,1011,self.assertComboFnPreserved((2 * self.listop))
task2results/qiskit-aqua-main/test/aqua/operators/test_op_construction.py,test_at_traverse,test_at_traverse,approximate,1019,self.assertComboFnPreserved(traversed)
task2results/qiskit-aqua-main/test/aqua/operators/test_op_construction.py,test_after_adjoint,test_after_adjoint,approximate,1023,self.assertComboFnPreserved(self.listop.adjoint())
task2results/qiskit-aqua-main/test/aqua/operators/test_op_construction.py,test_after_reduce,test_after_reduce,approximate,1027,self.assertComboFnPreserved(self.listop.reduce())
task2results/qiskit-aqua-main/test/aqua/operators/test_abelian_grouper.py,test_abelian_grouper,test_abelian_grouper,approximate,49,"self.assertEqual(len(grouped_sum.oplist), num_groups)"
task2results/qiskit-aqua-main/test/aqua/operators/test_cvar.py,test_cvar_simple_with_coeff,test_cvar_simple_with_coeff,approximate,84,"self.assertAlmostEqual(cvar, ((- 1) * ref))"
task2results/qiskit-aqua-main/test/aqua/operators/test_cvar.py,test_add,test_add,approximate,103,"self.assertAlmostEqual(res1, (1 - ref))"
task2results/qiskit-aqua-main/test/aqua/operators/test_cvar.py,test_add,test_add,approximate,104,"self.assertAlmostEqual(res2, (1 - ref))"
task2results/qiskit-aqua-main/test/aqua/operators/test_cvar.py,test_underlying_expectation,test_underlying_expectation,approximate,200,"self.assertEqual(cvar.oplist[0].primitive, expected.oplist[0].primitive)"
task2results/qiskit-aqua-main/test/aqua/operators/test_pauli_expectation.py,test_pauli_expect_pair,test_pauli_expect_pair,approximate,50,"self.assertAlmostEqual(converted_meas.eval(), 0, delta=0.1)"
task2results/qiskit-aqua-main/test/aqua/operators/test_pauli_expectation.py,test_pauli_expect_pair,test_pauli_expect_pair,approximate,52,"self.assertAlmostEqual(sampled.eval(), 0, delta=0.1)"
task2results/qiskit-aqua-main/test/aqua/operators/test_pauli_expectation.py,test_grouped_pauli_expectation,test_grouped_pauli_expectation,approximate,193,"self.assertEqual(num_circuits_ungrouped, 5)"
task2results/qiskit-aqua-main/test/aqua/operators/test_pauli_expectation.py,test_grouped_pauli_expectation,test_grouped_pauli_expectation,approximate,201,"self.assertEqual(num_circuits_grouped, 2)"
task2results/qiskit-aqua-main/test/aqua/operators/test_matrix_expectation.py,test_pauli_expect_pair,test_pauli_expect_pair,approximate,48,"self.assertAlmostEqual(converted_meas.eval(), 0, delta=0.1)"
task2results/qiskit-aqua-main/test/aqua/operators/test_matrix_expectation.py,test_pauli_expect_pair,test_pauli_expect_pair,approximate,50,"self.assertAlmostEqual(sampled.eval(), 0, delta=0.1)"
task2results/qiskit-aqua-main/test/aqua/operators/test_state_construction.py,test_state_singletons,test_state_singletons,approximate,34,"self.assertEqual(Zero.primitive, {'0': 1})"
task2results/qiskit-aqua-main/test/aqua/operators/test_state_construction.py,test_state_singletons,test_state_singletons,approximate,35,"self.assertEqual(One.primitive, {'1': 1})"
task2results/qiskit-aqua-main/test/aqua/operators/test_state_construction.py,test_state_singletons,test_state_singletons,approximate,37,"self.assertEqual((Zero ^ 5).primitive, {'00000': 1})"
task2results/qiskit-aqua-main/test/aqua/operators/test_state_construction.py,test_state_singletons,test_state_singletons,approximate,38,"self.assertEqual((One ^ 5).primitive, {'11111': 1})"
task2results/qiskit-aqua-main/test/aqua/operators/test_state_construction.py,test_state_singletons,test_state_singletons,approximate,39,"self.assertEqual(((Zero ^ One) ^ 3).primitive, {'010101': 1})"
task2results/qiskit-aqua-main/test/aqua/operators/test_state_construction.py,test_add_direct,test_add_direct,approximate,102,"self.assertEqual(wf.primitive, {'101010': 0.5, '111111': 0.3, '000000': 1.0})"
task2results/qiskit-aqua-main/test/aqua/operators/test_state_construction.py,test_add_direct,test_add_direct,approximate,104,"self.assertEqual(wf.primitive, {'000000': (3 + 0.1j), '101010': (2 + 0j), '111111': (1.2 + 0j)})"
task2results/qiskit-aqua-main/test/aqua/operators/test_state_construction.py,test_circuit_state_fn_from_dict_as_sum,test_circuit_state_fn_from_dict_as_sum,approximate,114,"self.assertIsInstance(sfc_sum, SummedOp)"
task2results/qiskit-aqua-main/test/aqua/operators/test_state_construction.py,test_circuit_state_fn_from_dict_initialize,test_circuit_state_fn_from_dict_initialize,approximate,129,"self.assertIsInstance(sfc, CircuitStateFn)"
task2results/qiskit-aqua-main/test/aqua/operators/test_state_construction.py,test_circuit_state_fn_from_complex_vector_initialize,test_circuit_state_fn_from_complex_vector_initialize,approximate,146,"self.assertIsInstance(sfc, CircuitStateFn)"
task2results/qiskit-aqua-main/test/aqua/operators/test_state_construction.py,test_dict_to_circuit_sum,test_dict_to_circuit_sum,approximate,170,"self.assertIsInstance(circuit_state_3q, CircuitStateFn)"
task2results/qiskit-aqua-main/test/aqua/operators/test_state_construction.py,test_dict_to_circuit_sum,test_dict_to_circuit_sum,approximate,177,"self.assertIsInstance(circuit_state_4q, SummedOp)"
task2results/qiskit-aqua-main/test/aqua/operators/test_state_construction.py,test_dict_to_circuit_sum,test_dict_to_circuit_sum,approximate,184,"self.assertIsInstance(circuit_state_3q_vect, CircuitStateFn)"
task2results/qiskit-aqua-main/test/aqua/operators/test_state_construction.py,test_circuit_permute,test_circuit_permute,approximate,197,"self.assertNotEqual(c_op, c_op_perm)"
task2results/qiskit-aqua-main/test/aqua/operators/test_state_construction.py,test_circuit_permute,test_circuit_permute,approximate,199,"self.assertEqual(c_op, c_op_id)"
task2results/qiskit-aqua-main/test/aqua/operators/test_state_construction.py,test_primitive_param_binding,test_primitive_param_binding,approximate,208,"self.assertEqual(bound.coeff, 0.3)"
task2results/qiskit-aqua-main/test/aqua/operators/test_state_construction.py,test_primitive_param_binding,test_primitive_param_binding,approximate,209,"self.assertEqual(bound.primitive.coeff, 0.2)"
task2results/qiskit-aqua-main/test/aqua/operators/test_evolution.py,test_exp_i,test_exp_i,approximate,37,"self.assertIsInstance(gate, qiskit.circuit.library.RZGate)"
task2results/qiskit-aqua-main/test/aqua/operators/test_evolution.py,test_exp_i,test_exp_i,approximate,38,"self.assertEqual(gate.params[0], 2)"
task2results/qiskit-aqua-main/test/aqua/operators/test_evolution.py,test_pauli_evolution,test_pauli_evolution,approximate,73,self.assertIsNotNone(mean)
task2results/qiskit-aqua-main/test/aqua/operators/test_evolution.py,test_parameterized_evolution,test_parameterized_evolution,approximate,94,"self.assertNotIn(thetas[0], circuit._parameter_table.get_keys())"
task2results/qiskit-aqua-main/test/aqua/operators/test_evolution.py,test_bind_parameter_list,test_bind_parameter_list,approximate,152,"self.assertIsInstance(means, ListOp)"
task2results/qiskit-aqua-main/test/aqua/operators/test_evolution.py,test_qdrift,test_qdrift,approximate,165,"self.assertGreater(len(trotterization.oplist), 150)"
task2results/qiskit-aqua-main/test/aqua/operators/test_evolution.py,test_matrix_op_parameterized_evolution,test_matrix_op_parameterized_evolution,approximate,230,"self.assertIn(theta, wf.to_circuit().parameters)"
task2results/qiskit-aqua-main/test/aqua/operators/test_evolution.py,test_matrix_op_parameterized_evolution,test_matrix_op_parameterized_evolution,approximate,238,"self.assertNotIn(theta, wf.to_circuit().parameters)"
task2results/qiskit-aqua-main/test/aqua/operators/test_evolution.py,test_reps,test_reps,approximate,263,"self.assertEqual(trotter.reps, reps)"
task2results/qiskit-aqua-main/test/aqua/operators/test_evolution.py,test_reps,test_reps,approximate,267,"self.assertEqual(suzuki.reps, reps)"
task2results/qiskit-aqua-main/test/aqua/operators/test_evolution.py,test_reps,test_reps,approximate,268,"self.assertEqual(suzuki.order, order)"
task2results/qiskit-aqua-main/test/aqua/operators/test_evolution.py,test_reps,test_reps,approximate,271,"self.assertEqual(qdrift.reps, reps)"
task2results/qiskit-aqua-main/test/aqua/operators/test_gradients.py,test_natural_gradient3,test_natural_gradient3,approximate,563,"self.assertIsInstance(nat_grad.qfi_method, circuit_qfi)"
task2results/qiskit-aqua-main/test/aqua/operators/test_gradients.py,test_converted_to_float_if_bound,test_converted_to_float_if_bound,approximate,961,"self.assertIsInstance(grad, float)"
task2results/qiskit-aqua-main/test/aqua/operators/test_aer_pauli_expectation.py,test_pauli_expect_pair,test_pauli_expect_pair,approximate,55,"self.assertAlmostEqual(sampled.eval(), 0, delta=0.1)"
task2results/qiskit-aqua-main/test/aqua/operators/test_aer_pauli_expectation.py,validate_sampler,validate_sampler,approximate,168,"self.assertTrue(np.allclose(actual_sampled, expect_sampled), ('%s != %s' % (actual_sampled, expect_sampled)))"
task2results/qiskit-aqua-main/test/aqua/operators/test_aer_pauli_expectation.py,validate_aer_binding_used,validate_aer_binding_used,approximate,177,self.assertIsNotNone(templates)
task2results/qiskit-aqua-main/test/aqua/operators/test_aer_pauli_expectation.py,validate_aer_templates_reused,validate_aer_templates_reused,approximate,180,"self.assertIs(prev_templates, cur_templates)"
task2results/qiskit-aqua-main/test/aqua/operators/test_state_op_meas_evals.py,test_statefn_overlaps,test_statefn_overlaps,approximate,36,"self.assertAlmostEqual(wf.adjoint().eval(wf), 14.45)"
task2results/qiskit-aqua-main/test/aqua/operators/test_state_op_meas_evals.py,test_statefn_overlaps,test_statefn_overlaps,approximate,37,"self.assertAlmostEqual(wf_vec.adjoint().eval(wf_vec), 14.45)"
task2results/qiskit-aqua-main/test/aqua/operators/test_state_op_meas_evals.py,test_statefn_overlaps,test_statefn_overlaps,approximate,38,"self.assertAlmostEqual(wf_vec.adjoint().eval(wf), 14.45)"
task2results/qiskit-aqua-main/test/aqua/operators/test_state_op_meas_evals.py,test_statefn_overlaps,test_statefn_overlaps,approximate,39,"self.assertAlmostEqual(wf.adjoint().eval(wf_vec), 14.45)"
task2results/qiskit-aqua-main/test/aqua/operators/test_state_op_meas_evals.py,test_wf_evals_x,test_wf_evals_x,approximate,49,"self.assertAlmostEqual(wf.adjoint().eval(op.eval(wf)), 1)"
task2results/qiskit-aqua-main/test/aqua/operators/test_state_op_meas_evals.py,test_wf_evals_x,test_wf_evals_x,approximate,50,"self.assertAlmostEqual(wf_vec.adjoint().eval(op.eval(wf)), 1)"
task2results/qiskit-aqua-main/test/aqua/operators/test_state_op_meas_evals.py,test_wf_evals_x,test_wf_evals_x,approximate,51,"self.assertAlmostEqual(wf.adjoint().eval(op.eval(wf_vec)), 1)"
task2results/qiskit-aqua-main/test/aqua/operators/test_state_op_meas_evals.py,test_wf_evals_x,test_wf_evals_x,approximate,52,"self.assertAlmostEqual(wf_vec.adjoint().eval(op.eval(wf_vec)), 1)"
task2results/qiskit-aqua-main/test/aqua/operators/test_state_op_meas_evals.py,test_wf_evals_x,test_wf_evals_x,approximate,59,"self.assertAlmostEqual(wf.adjoint().eval(op.eval(wf)), 0.25)"
task2results/qiskit-aqua-main/test/aqua/operators/test_state_op_meas_evals.py,test_wf_evals_x,test_wf_evals_x,approximate,60,"self.assertAlmostEqual(wf_vec.adjoint().eval(op.eval(wf)), 0.25)"
task2results/qiskit-aqua-main/test/aqua/operators/test_state_op_meas_evals.py,test_wf_evals_x,test_wf_evals_x,approximate,61,"self.assertAlmostEqual(wf.adjoint().eval(op.eval(wf_vec)), 0.25)"
task2results/qiskit-aqua-main/test/aqua/operators/test_state_op_meas_evals.py,test_wf_evals_x,test_wf_evals_x,approximate,62,"self.assertAlmostEqual(wf_vec.adjoint().eval(op.eval(wf_vec)), 0.25)"
task2results/qiskit-aqua-main/test/aqua/operators/test_state_op_meas_evals.py,test_is_measurement_correctly_propagated,test_is_measurement_correctly_propagated,approximate,90,self.assertTrue(sampler.oplist[0].is_measurement)
task2results/qiskit-aqua-main/test/aqua/operators/test_state_op_meas_evals.py,test_parameter_binding_on_listop,test_parameter_binding_on_listop,approximate,109,self.assertTrue(all(((len(op.parameters) == 0) for op in sampled.oplist)))
task2results/qiskit-aqua-main/test/aqua/operators/legacy/test_weighted_pauli_operator.py,test_from_to_file,test_from_to_file,approximate,63,self.assertTrue(os.path.exists(file_path))
task2results/qiskit-aqua-main/test/aqua/operators/legacy/test_weighted_pauli_operator.py,test_from_to_file,test_from_to_file,approximate,66,"self.assertEqual(op, load_op)"
task2results/qiskit-aqua-main/test/aqua/operators/legacy/test_weighted_pauli_operator.py,test_num_qubits,test_num_qubits,approximate,72,"self.assertEqual(op.num_qubits, 0)"
task2results/qiskit-aqua-main/test/aqua/operators/legacy/test_weighted_pauli_operator.py,test_num_qubits,test_num_qubits,approximate,73,"self.assertEqual(self.qubit_op.num_qubits, self.num_qubits)"
task2results/qiskit-aqua-main/test/aqua/operators/legacy/test_weighted_pauli_operator.py,test_is_empty,test_is_empty,approximate,78,self.assertTrue(op.is_empty())
task2results/qiskit-aqua-main/test/aqua/operators/legacy/test_weighted_pauli_operator.py,test_is_empty,test_is_empty,approximate,79,self.assertFalse(self.qubit_op.is_empty())
task2results/qiskit-aqua-main/test/aqua/operators/legacy/test_weighted_pauli_operator.py,test_str,test_str,approximate,93,"self.assertEqual('Representation: paulis, qubits: 4, size: 2', str(op_a))"
task2results/qiskit-aqua-main/test/aqua/operators/legacy/test_weighted_pauli_operator.py,test_str,test_str,approximate,96,"self.assertEqual('ABC: Representation: paulis, qubits: 4, size: 1', str(op_a))"
task2results/qiskit-aqua-main/test/aqua/operators/legacy/test_weighted_pauli_operator.py,test_multiplication,test_multiplication,approximate,110,"self.assertEqual(1, len(new_op.paulis))"
task2results/qiskit-aqua-main/test/aqua/operators/legacy/test_weighted_pauli_operator.py,test_multiplication,test_multiplication,approximate,111,"self.assertEqual((- 0.25), new_op.paulis[0][0])"
task2results/qiskit-aqua-main/test/aqua/operators/legacy/test_weighted_pauli_operator.py,test_multiplication,test_multiplication,approximate,112,"self.assertEqual('ZZYY', new_op.paulis[0][1].to_label())"
task2results/qiskit-aqua-main/test/aqua/operators/legacy/test_weighted_pauli_operator.py,test_multiplication,test_multiplication,approximate,115,"self.assertEqual(0.5j, new_op.paulis[0][0])"
task2results/qiskit-aqua-main/test/aqua/operators/legacy/test_weighted_pauli_operator.py,test_multiplication,test_multiplication,approximate,118,"self.assertEqual((- 0.15), new_op.paulis[0][0])"
task2results/qiskit-aqua-main/test/aqua/operators/legacy/test_weighted_pauli_operator.py,test_iadd,test_iadd,approximate,134,"self.assertNotEqual(op_a, ori_op_a)"
task2results/qiskit-aqua-main/test/aqua/operators/legacy/test_weighted_pauli_operator.py,test_iadd,test_iadd,approximate,135,"self.assertEqual(op_b, ori_op_b)"
task2results/qiskit-aqua-main/test/aqua/operators/legacy/test_weighted_pauli_operator.py,test_iadd,test_iadd,approximate,136,"self.assertEqual(2, len(op_a.paulis))"
task2results/qiskit-aqua-main/test/aqua/operators/legacy/test_weighted_pauli_operator.py,test_iadd,test_iadd,approximate,143,"self.assertEqual(2, len(op_a.paulis))"
task2results/qiskit-aqua-main/test/aqua/operators/legacy/test_weighted_pauli_operator.py,test_iadd,test_iadd,approximate,144,"self.assertEqual(0.75, op_a.paulis[0][0])"
task2results/qiskit-aqua-main/test/aqua/operators/legacy/test_weighted_pauli_operator.py,test_add,test_add,approximate,160,"self.assertEqual(op_a, ori_op_a)"
task2results/qiskit-aqua-main/test/aqua/operators/legacy/test_weighted_pauli_operator.py,test_add,test_add,approximate,161,"self.assertEqual(op_b, ori_op_b)"
task2results/qiskit-aqua-main/test/aqua/operators/legacy/test_weighted_pauli_operator.py,test_add,test_add,approximate,162,"self.assertEqual(1, len(op_a.paulis))"
task2results/qiskit-aqua-main/test/aqua/operators/legacy/test_weighted_pauli_operator.py,test_add,test_add,approximate,163,"self.assertEqual(2, len(new_op.paulis))"
task2results/qiskit-aqua-main/test/aqua/operators/legacy/test_weighted_pauli_operator.py,test_add,test_add,approximate,170,"self.assertEqual(2, len(new_op.paulis))"
task2results/qiskit-aqua-main/test/aqua/operators/legacy/test_weighted_pauli_operator.py,test_add,test_add,approximate,171,"self.assertEqual(0.75, new_op.paulis[0][0])"
task2results/qiskit-aqua-main/test/aqua/operators/legacy/test_weighted_pauli_operator.py,test_sub,test_sub,approximate,187,"self.assertEqual(op_a, ori_op_a)"
task2results/qiskit-aqua-main/test/aqua/operators/legacy/test_weighted_pauli_operator.py,test_sub,test_sub,approximate,188,"self.assertEqual(op_b, ori_op_b)"
task2results/qiskit-aqua-main/test/aqua/operators/legacy/test_weighted_pauli_operator.py,test_sub,test_sub,approximate,189,"self.assertEqual(1, len(op_a.paulis))"
task2results/qiskit-aqua-main/test/aqua/operators/legacy/test_weighted_pauli_operator.py,test_sub,test_sub,approximate,190,"self.assertEqual(2, len(new_op.paulis))"
task2results/qiskit-aqua-main/test/aqua/operators/legacy/test_weighted_pauli_operator.py,test_sub,test_sub,approximate,191,"self.assertEqual(0.5, new_op.paulis[0][0])"
task2results/qiskit-aqua-main/test/aqua/operators/legacy/test_weighted_pauli_operator.py,test_sub,test_sub,approximate,192,"self.assertEqual((- 0.5), new_op.paulis[1][0])"
task2results/qiskit-aqua-main/test/aqua/operators/legacy/test_weighted_pauli_operator.py,test_sub,test_sub,approximate,199,"self.assertEqual(2, len(new_op.paulis))"
task2results/qiskit-aqua-main/test/aqua/operators/legacy/test_weighted_pauli_operator.py,test_sub,test_sub,approximate,200,"self.assertEqual(0.25, new_op.paulis[0][0])"
task2results/qiskit-aqua-main/test/aqua/operators/legacy/test_weighted_pauli_operator.py,test_isub,test_isub,approximate,216,"self.assertNotEqual(op_a, ori_op_a)"
task2results/qiskit-aqua-main/test/aqua/operators/legacy/test_weighted_pauli_operator.py,test_isub,test_isub,approximate,217,"self.assertEqual(op_b, ori_op_b)"
task2results/qiskit-aqua-main/test/aqua/operators/legacy/test_weighted_pauli_operator.py,test_isub,test_isub,approximate,218,"self.assertEqual(2, len(op_a.paulis))"
task2results/qiskit-aqua-main/test/aqua/operators/legacy/test_weighted_pauli_operator.py,test_isub,test_isub,approximate,225,"self.assertEqual(2, len(op_a.paulis))"
task2results/qiskit-aqua-main/test/aqua/operators/legacy/test_weighted_pauli_operator.py,test_equal_operator,test_equal_operator,approximate,242,"self.assertEqual(op1, op2)"
task2results/qiskit-aqua-main/test/aqua/operators/legacy/test_weighted_pauli_operator.py,test_equal_operator,test_equal_operator,approximate,243,"self.assertNotEqual(op1, op3)"
task2results/qiskit-aqua-main/test/aqua/operators/legacy/test_weighted_pauli_operator.py,test_equal_operator,test_equal_operator,approximate,244,"self.assertNotEqual(op1, op4)"
task2results/qiskit-aqua-main/test/aqua/operators/legacy/test_weighted_pauli_operator.py,test_equal_operator,test_equal_operator,approximate,245,"self.assertNotEqual(op3, op4)"
task2results/qiskit-aqua-main/test/aqua/operators/legacy/test_weighted_pauli_operator.py,test_negation_operator,test_negation_operator,approximate,255,"self.assertNotEqual(op1, op2)"
task2results/qiskit-aqua-main/test/aqua/operators/legacy/test_weighted_pauli_operator.py,test_negation_operator,test_negation_operator,approximate,256,"self.assertEqual(op1, (- op2))"
task2results/qiskit-aqua-main/test/aqua/operators/legacy/test_weighted_pauli_operator.py,test_negation_operator,test_negation_operator,approximate,257,"self.assertEqual((- op1), op2)"
task2results/qiskit-aqua-main/test/aqua/operators/legacy/test_weighted_pauli_operator.py,test_negation_operator,test_negation_operator,approximate,259,"self.assertEqual(op1, op2)"
task2results/qiskit-aqua-main/test/aqua/operators/legacy/test_weighted_pauli_operator.py,test_simplify,test_simplify,approximate,274,"self.assertEqual(0, len(new_op.paulis), '{}'.format(new_op.print_details()))"
task2results/qiskit-aqua-main/test/aqua/operators/legacy/test_weighted_pauli_operator.py,test_simplify,test_simplify,approximate,275,self.assertTrue(new_op.is_empty())
task2results/qiskit-aqua-main/test/aqua/operators/legacy/test_weighted_pauli_operator.py,test_simplify_same_paulis,test_simplify_same_paulis,approximate,297,"self.assertEqual(1, len(op_a.paulis), '{}'.format(op_a.print_details()))"
task2results/qiskit-aqua-main/test/aqua/operators/legacy/test_weighted_pauli_operator.py,test_simplify_same_paulis,test_simplify_same_paulis,approximate,298,"self.assertEqual(1, len(op_a.basis))"
task2results/qiskit-aqua-main/test/aqua/operators/legacy/test_weighted_pauli_operator.py,test_simplify_same_paulis,test_simplify_same_paulis,approximate,299,"self.assertEqual(0, op_a.basis[0][1][0])"
task2results/qiskit-aqua-main/test/aqua/operators/legacy/test_weighted_pauli_operator.py,test_evaluate_single_pauli_qasm,test_evaluate_single_pauli_qasm,approximate,347,"self.assertAlmostEqual(1.0, actual_value[0].real, places=5)"
task2results/qiskit-aqua-main/test/aqua/operators/legacy/test_weighted_pauli_operator.py,test_evaluate_single_pauli_qasm,test_evaluate_single_pauli_qasm,approximate,356,"self.assertAlmostEqual((- 1.0), actual_value[0].real, places=5)"
task2results/qiskit-aqua-main/test/aqua/operators/legacy/test_weighted_pauli_operator.py,test_evaluate_single_pauli_qasm,test_evaluate_single_pauli_qasm,approximate,369,"self.assertAlmostEqual(1.0, actual_value[0].real, places=5)"
task2results/qiskit-aqua-main/test/aqua/operators/legacy/test_weighted_pauli_operator.py,test_evaluate_single_pauli_qasm,test_evaluate_single_pauli_qasm,approximate,379,"self.assertAlmostEqual((- 1.0), actual_value[0].real, places=5)"
task2results/qiskit-aqua-main/test/aqua/operators/legacy/test_weighted_pauli_operator.py,test_evaluate_single_pauli_qasm,test_evaluate_single_pauli_qasm,approximate,390,"self.assertAlmostEqual(1.0, actual_value[0].real, places=5)"
task2results/qiskit-aqua-main/test/aqua/operators/legacy/test_weighted_pauli_operator.py,test_evaluate_single_pauli_qasm,test_evaluate_single_pauli_qasm,approximate,398,"self.assertAlmostEqual((- 1.0), actual_value[0].real, places=5)"
task2results/qiskit-aqua-main/test/aqua/operators/legacy/test_weighted_pauli_operator.py,test_evaluate_single_pauli_statevector,test_evaluate_single_pauli_statevector,approximate,412,"self.assertAlmostEqual(1.0, actual_value[0].real, places=5)"
task2results/qiskit-aqua-main/test/aqua/operators/legacy/test_weighted_pauli_operator.py,test_evaluate_single_pauli_statevector,test_evaluate_single_pauli_statevector,approximate,421,"self.assertAlmostEqual((- 1.0), actual_value[0].real, places=5)"
task2results/qiskit-aqua-main/test/aqua/operators/legacy/test_weighted_pauli_operator.py,test_evaluate_single_pauli_statevector,test_evaluate_single_pauli_statevector,approximate,434,"self.assertAlmostEqual(1.0, actual_value[0].real, places=5)"
task2results/qiskit-aqua-main/test/aqua/operators/legacy/test_weighted_pauli_operator.py,test_evaluate_single_pauli_statevector,test_evaluate_single_pauli_statevector,approximate,444,"self.assertAlmostEqual((- 1.0), actual_value[0].real, places=5)"
task2results/qiskit-aqua-main/test/aqua/operators/legacy/test_weighted_pauli_operator.py,test_evaluate_single_pauli_statevector,test_evaluate_single_pauli_statevector,approximate,455,"self.assertAlmostEqual(1.0, actual_value[0].real, places=5)"
task2results/qiskit-aqua-main/test/aqua/operators/legacy/test_weighted_pauli_operator.py,test_evaluate_single_pauli_statevector,test_evaluate_single_pauli_statevector,approximate,463,"self.assertAlmostEqual((- 1.0), actual_value[0].real, places=5)"
task2results/qiskit-aqua-main/test/aqua/operators/legacy/test_weighted_pauli_operator.py,test_evaluate_qasm_mode,test_evaluate_qasm_mode,approximate,480,"self.assertGreaterEqual(reference[0].real, (actual_value[0].real - (3 * actual_value[1].real)))"
task2results/qiskit-aqua-main/test/aqua/operators/legacy/test_weighted_pauli_operator.py,test_evaluate_qasm_mode,test_evaluate_qasm_mode,approximate,481,"self.assertLessEqual(reference[0].real, (actual_value[0].real + (3 * actual_value[1].real)))"
task2results/qiskit-aqua-main/test/aqua/operators/legacy/test_weighted_pauli_operator.py,test_evaluate_statevector_mode,test_evaluate_statevector_mode,approximate,496,"self.assertAlmostEqual(reference[0], actual_value[0], places=10)"
task2results/qiskit-aqua-main/test/aqua/operators/legacy/test_weighted_pauli_operator.py,test_evaluate_with_aer_mode,test_evaluate_with_aer_mode,approximate,524,"self.assertAlmostEqual(reference[0], actual_value[0], places=10)"
task2results/qiskit-aqua-main/test/aqua/operators/legacy/test_weighted_pauli_operator.py,test_simplification,test_simplification,approximate,603,"self.assertAlmostEqual(expectation_value, (- 3.0), places=2)"
task2results/qiskit-aqua-main/test/aqua/operators/legacy/test_weighted_pauli_operator.py,test_simplification,test_simplification,approximate,612,"self.assertAlmostEqual(expectation_value, (- 3.0), places=2)"
task2results/qiskit-aqua-main/test/aqua/operators/legacy/test_weighted_pauli_operator.py,test_to_opflow,test_to_opflow,approximate,628,"self.assertEqual(op, legacy_op.to_opflow())"
task2results/qiskit-aqua-main/test/aqua/operators/legacy/test_tpb_grouped_weighted_pauli_operator.py,test_sorted_grouping,test_sorted_grouping,approximate,74,"self.assertGreaterEqual(len(op.basis), len(grouped_op.basis))"
task2results/qiskit-aqua-main/test/aqua/operators/legacy/test_tpb_grouped_weighted_pauli_operator.py,test_unsorted_grouping,test_unsorted_grouping,approximate,96,"self.assertGreaterEqual(len(op.basis), len(grouped_op.basis))"
task2results/qiskit-aqua-main/test/aqua/operators/legacy/test_tpb_grouped_weighted_pauli_operator.py,test_chop,test_chop,approximate,108,"self.assertLessEqual(len(chopped_grouped_op.basis), 3)"
task2results/qiskit-aqua-main/test/aqua/operators/legacy/test_tpb_grouped_weighted_pauli_operator.py,test_chop,test_chop,approximate,109,"self.assertLessEqual(len(chopped_grouped_op.basis), original_num_basis)"
task2results/qiskit-aqua-main/test/aqua/operators/legacy/test_tpb_grouped_weighted_pauli_operator.py,test_chop,test_chop,approximate,115,"self.assertLessEqual(len(chopped_grouped_op.basis), 1)"
task2results/qiskit-aqua-main/test/aqua/operators/legacy/test_tpb_grouped_weighted_pauli_operator.py,test_chop,test_chop,approximate,116,"self.assertLessEqual(len(chopped_grouped_op.basis), original_num_basis)"
task2results/qiskit-aqua-main/test/aqua/operators/legacy/test_tpb_grouped_weighted_pauli_operator.py,test_evaluate_qasm_mode,test_evaluate_qasm_mode,approximate,146,"self.assertGreaterEqual(reference[0].real, (grouped_pauli_value[0].real - (3 * grouped_pauli_value[1].real)))"
task2results/qiskit-aqua-main/test/aqua/operators/legacy/test_tpb_grouped_weighted_pauli_operator.py,test_evaluate_qasm_mode,test_evaluate_qasm_mode,approximate,148,"self.assertLessEqual(reference[0].real, (grouped_pauli_value[0].real + (3 * grouped_pauli_value[1].real)))"
task2results/qiskit-aqua-main/test/aqua/operators/legacy/test_tpb_grouped_weighted_pauli_operator.py,test_evaluate_qasm_mode,test_evaluate_qasm_mode,approximate,152,"self.assertLessEqual(grouped_pauli_value[1].real, pauli_value[1].real)"
task2results/qiskit-aqua-main/test/aqua/operators/legacy/test_tpb_grouped_weighted_pauli_operator.py,test_equal,test_equal,approximate,161,"self.assertEqual(gop_1, gop_2)"
task2results/qiskit-aqua-main/test/aqua/operators/legacy/test_op_converter.py,test_to_weighted_pauli_operator,test_to_weighted_pauli_operator,approximate,50,"self.assertEqual(pauli_op, self.pauli_op)"
task2results/qiskit-aqua-main/test/aqua/operators/legacy/test_op_converter.py,test_to_matrix_operator,test_to_matrix_operator,approximate,57,"self.assertAlmostEqual(0, diff, places=8)"
task2results/qiskit-aqua-main/test/aqua/operators/legacy/test_matrix_operator.py,test_num_qubits,test_num_qubits,approximate,40,"self.assertEqual(op.num_qubits, 0)"
task2results/qiskit-aqua-main/test/aqua/operators/legacy/test_matrix_operator.py,test_num_qubits,test_num_qubits,approximate,41,"self.assertEqual(self.qubit_op.num_qubits, self.num_qubits)"
task2results/qiskit-aqua-main/test/aqua/operators/legacy/test_matrix_operator.py,test_is_empty,test_is_empty,approximate,46,self.assertTrue(op.is_empty())
task2results/qiskit-aqua-main/test/aqua/operators/legacy/test_matrix_operator.py,test_is_empty,test_is_empty,approximate,47,self.assertFalse(self.qubit_op.is_empty())
task2results/qiskit-aqua-main/test/finance/test_european_call_expected_value.py,test_ecev_circuit,test_ecev_circuit,approximate,62,self.assertTrue(Operator(ecev).equiv(linear_function))
task2results/qiskit-aqua-main/test/finance/test_european_call_expected_value.py,test_application,test_application,approximate,94,"self.assertAlmostEqual(result.estimation, 1.0364776997977694)"
task2results/qiskit-aqua-main/test/finance/test_portfolio.py,test_portfolio,test_portfolio,approximate,63,"self.assertAlmostEqual(value, (- 0.00679917))"
task2results/qiskit-aqua-main/test/finance/test_portfolio.py,test_portfolio_qaoa,test_portfolio_qaoa,approximate,80,"self.assertAlmostEqual(value, (- 0.00679917))"
task2results/qiskit-aqua-main/test/finance/test_fixed_income_expected_value.py,test_circuit,test_circuit,approximate,50,self.assertTrue(Operator(circuit).equiv(expected))
task2results/qiskit-aqua-main/test/finance/test_fixed_income_expected_value.py,test_application,test_application,approximate,91,"self.assertAlmostEqual(result.estimation, 2.3389012822103044)"
task2results/qiskit-aqua-main/test/finance/test_readme_sample.py,test_readme_sample,test_readme_sample,approximate,77,"self.assertAlmostEqual(result.estimation, 2.46, places=4)"
task2results/qiskit-aqua-main/test/finance/test_readme_sample.py,test_readme_sample,test_readme_sample,approximate,78,"self.assertAlmostEqual(result.max_probability, 0.8487, places=4)"
task2results/qiskit-aqua-main/test/finance/test_european_call_delta.py,test_circuit,test_circuit,approximate,46,self.assertTrue(Operator(ecd).equiv(comparator))
task2results/qiskit-aqua-main/test/finance/test_european_call_delta.py,test_application,test_application,approximate,91,"self.assertAlmostEqual(result.estimation, 0.8088790606143996)"
